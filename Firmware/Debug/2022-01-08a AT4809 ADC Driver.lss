
2022-01-08a AT4809 ADC Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00802800  00003771  00003825  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003708  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000069  00007708  00003708  000037bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000154  00802806  00802806  0000382b  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000382b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000385c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000518  00000000  00000000  0000389c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000104b3  00000000  00000000  00003db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044f5  00000000  00000000  00014267  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005778  00000000  00000000  0001875c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001058  00000000  00000000  0001ded4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000044d5  00000000  00000000  0001ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000111ce  00000000  00000000  00023401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010e8  00000000  00000000  000345cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__dtors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_4>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_7>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_17>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_22>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      68:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      6c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      70:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      74:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      78:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      7c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      80:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      84:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      88:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      8c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      90:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      94:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      98:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      9c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      a0:	d7 08       	sbc	r13, r7
      a2:	df 08       	sbc	r13, r15
      a4:	ea 08       	sbc	r14, r10
      a6:	f7 08       	sbc	r15, r7
      a8:	06 09       	sbc	r16, r6
      aa:	0e 09       	sbc	r16, r14
      ac:	19 09       	sbc	r17, r9
      ae:	26 09       	sbc	r18, r6

000000b0 <__ctors_start>:
      b0:	cf 06       	cpc	r12, r31

000000b2 <__ctors_end>:
      b2:	d6 06       	cpc	r13, r22

000000b4 <__dtors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	df e3       	ldi	r29, 0x3F	; 63
      be:	de bf       	out	0x3e, r29	; 62

000000c0 <__do_copy_data>:
      c0:	18 e2       	ldi	r17, 0x28	; 40
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b8 e2       	ldi	r27, 0x28	; 40
      c6:	e1 e7       	ldi	r30, 0x71	; 113
      c8:	f7 e3       	ldi	r31, 0x37	; 55
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a6 30       	cpi	r26, 0x06	; 6
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	29 e2       	ldi	r18, 0x29	; 41
      d8:	a6 e0       	ldi	r26, 0x06	; 6
      da:	b8 e2       	ldi	r27, 0x28	; 40
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	aa 35       	cpi	r26, 0x5A	; 90
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	c9 e5       	ldi	r28, 0x59	; 89
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	21 97       	sbiw	r28, 0x01	; 1
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__tablejump2__>
      f6:	c8 35       	cpi	r28, 0x58	; 88
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
     100:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__do_global_dtors>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <_ZN4User3AdcD1Ev>:
    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN(); //Trace Return
    return err_code; //OK
}   //end getter: get_error | void |
     108:	08 95       	ret

0000010a <_ZN4User3Adc10get_resultERj>:
     10a:	fc 01       	movw	r30, r24
     10c:	20 81       	ld	r18, Z
     10e:	22 23       	and	r18, r18
     110:	39 f0       	breq	.+14     	; 0x120 <_ZN4User3Adc10get_resultERj+0x16>
     112:	81 81       	ldd	r24, Z+1	; 0x01
     114:	92 81       	ldd	r25, Z+2	; 0x02
     116:	fb 01       	movw	r30, r22
     118:	80 83       	st	Z, r24
     11a:	91 83       	std	Z+1, r25	; 0x01
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	08 95       	ret
     120:	fb 01       	movw	r30, r22
     122:	10 82       	st	Z, r1
     124:	11 82       	std	Z+1, r1	; 0x01
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	08 95       	ret

0000012a <_ZN4User3Adc8isr_callEj>:
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------


	this -> gu16_res = iu16_res;
     12a:	fc 01       	movw	r30, r24
     12c:	61 83       	std	Z+1, r22	; 0x01
     12e:	72 83       	std	Z+2, r23	; 0x02
	this -> gu1_new_result = true;
     130:	21 e0       	ldi	r18, 0x01	; 1
     132:	20 83       	st	Z, r18
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN(); //Trace Return
	return false;	//Propagate
}   //end public method: isr_call | uint16_t |
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	08 95       	ret

00000138 <_ZN4User3Adc15init_class_varsEv>:
    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return false;   //OK
}   //end method: init_class_vars | void
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	08 95       	ret

0000013c <_ZN4User3Adc8init_adcER10ADC_struct>:
//!		RTC_CNT_vect
//!		RTC_PIT_vect
/***************************************************************************/

bool Adc::init_adc( ADC_t &irst_adc )
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	fb 01       	movw	r30, r22
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//Fetch registers	
	uint8_t u8_ctrla_tmp		= irst_adc.CTRLA;
     142:	c0 81       	ld	r28, Z
	uint8_t u8_ctrlb_tmp		= irst_adc.CTRLB;
     144:	b1 81       	ldd	r27, Z+1	; 0x01
	uint8_t u8_ctrlc_tmp		= irst_adc.CTRLC;
     146:	22 81       	ldd	r18, Z+2	; 0x02
	uint8_t u8_ctrld_tmp		= irst_adc.CTRLD;
     148:	93 81       	ldd	r25, Z+3	; 0x03
	uint8_t u8_ctrle_tmp		= irst_adc.CTRLE;
     14a:	a4 81       	ldd	r26, Z+4	; 0x04
	uint8_t u8_ctrl_calib_tmp	= irst_adc.CALIB;
     14c:	76 89       	ldd	r23, Z+22	; 0x16
	uint8_t u8_ctrl_samp		= irst_adc.SAMPCTRL;
     14e:	65 81       	ldd	r22, Z+5	; 0x05
	uint8_t u8_ctrl_mux			= irst_adc.MUXPOS;
     150:	86 81       	ldd	r24, Z+6	; 0x06
	uint8_t u8_command_tmp		= irst_adc.COMMAND;
     152:	50 85       	ldd	r21, Z+8	; 0x08
	uint8_t u8_ctrl_event_tmp	= irst_adc.EVCTRL;
     154:	d1 85       	ldd	r29, Z+9	; 0x09
	uint8_t u8_ctrl_int_tmp		= irst_adc.INTCTRL;
     156:	42 85       	ldd	r20, Z+10	; 0x0a
	uint8_t u8_debug_tmp		= irst_adc.DBGCTRL;
     158:	34 85       	ldd	r19, Z+12	; 0x0c
	//----------------------------------------------------------------

	//Enable the ADC
	SET_BIT( u8_ctrla_tmp, ADC_ENABLE_bp );
	//Start conversion
	SET_BIT( u8_command_tmp, ADC_STCONV_bp );
     15a:	51 60       	ori	r21, 0x01	; 1
	//----------------------------------------------------------------
	
	//Allow events to start a conversion
	//SET_BIT( u8_ctrl_event_tmp, ADC_STARTEI_bp );
	//Conversion complete causes an interrupt to occur
	SET_BIT( u8_ctrl_int_tmp, ADC_RESRDY_bp );
     15c:	41 60       	ori	r20, 0x01	; 1
	
	//true = 8b | false = 10b
	//SET_BIT( u8_ctrla_tmp, ADC_RESSEL_bp);
	
	//true = ADC runs when chip is in standby |
	SET_BIT( u8_ctrla_tmp, ADC_RUNSTBY_bp );
     15e:	c1 68       	ori	r28, 0x81	; 129
	SET_MASKED_BIT( u8_ctrlc_tmp, ADC_PRESC_gm, ADC_PRESC_DIV128_gc );
	//SET_MASKED_BIT( u8_ctrlc_tmp, ADC_PRESC_gm, ADC_PRESC_DIV256_gc );
	
	//Select voltage reference
	//SET_MASKED_BIT( u8_ctrlc_tmp, ADC_REFSEL_gm, ADC_REFSEL_INTREF_gc );
	SET_MASKED_BIT( u8_ctrlc_tmp, ADC_REFSEL_gm, ADC_REFSEL_VDDREF_gc );
     160:	28 7c       	andi	r18, 0xC8	; 200
	//SET_MASKED_BIT( u8_ctrlc_tmp, ADC_REFSEL_gm, ADC_REFSEL_VREFA_gc );
	
	//true = reduce capacitance for reference >= 1V | false = increased capacitance for reference < 1V
	SET_BIT( u8_ctrlc_tmp, ADC_SAMPCAP_bp );
     162:	26 65       	ori	r18, 0x56	; 86
	
	//true = 25% duty cycle when ADC_CLK < 1.5MHz | false = 50% duty cycle when ADC_CLK > 1.5MHz
	SET_BIT( u8_ctrl_calib_tmp, ADC_DUTYCYC_bp );
     164:	71 60       	ori	r23, 0x01	; 1
	//SET_MASKED_BIT( u8_ctrld_tmp, ADC_INITDLY_gm, ADC_INITDLY_DLY0_gc );
	//SET_MASKED_BIT( u8_ctrld_tmp, ADC_INITDLY_gm, ADC_INITDLY_DLY16_gc );
	//SET_MASKED_BIT( u8_ctrld_tmp, ADC_INITDLY_gm, ADC_INITDLY_DLY32_gc );
	//SET_MASKED_BIT( u8_ctrld_tmp, ADC_INITDLY_gm, ADC_INITDLY_DLY64_gc );
	//SET_MASKED_BIT( u8_ctrld_tmp, ADC_INITDLY_gm, ADC_INITDLY_DLY128_gc );
	SET_MASKED_BIT( u8_ctrld_tmp, ADC_INITDLY_gm, ADC_INITDLY_DLY256_gc );
     166:	9f 71       	andi	r25, 0x1F	; 31
     168:	90 6a       	ori	r25, 0xA0	; 160
	
	//Default sampling time is 2 ADC cycles. Sampling time can be extended with this register to account for higher impedance sources
	SET_MASKED_BIT( u8_ctrl_samp, ADC_SAMPLEN_gm, 0 );
     16a:	60 7e       	andi	r22, 0xE0	; 224
	
	//Select GND as initial sampling source. mux selection won't take effect until conversion is done
	SET_MASKED_BIT( u8_ctrl_mux, ADC_MUXPOS_gm, ADC_MUXPOS_TEMPSENSE_gc );
     16c:	80 7e       	andi	r24, 0xE0	; 224
     16e:	8e 61       	ori	r24, 0x1E	; 30
	//Allow peripheral to run during break
	SET_BIT( u8_debug_tmp, ADC_DBGRUN_bp );
     170:	31 60       	ori	r19, 0x01	; 1
	//----------------------------------------------------------------
	//	ACCUMULATOR
	//----------------------------------------------------------------
	
	//A number of samples are accumulated inside ADC.RES result registers before a complete conversion
	SET_MASKED_BIT( u8_ctrlb_tmp, ADC_SAMPNUM_gm, ADC_SAMPNUM_ACC1_gc );
     172:	b8 7f       	andi	r27, 0xF8	; 248
	//----------------------------------------------------------------
	//	WINDOW COMPARATOR
	//----------------------------------------------------------------
	//	define a window. ISR can be called when conversion result is within a certain range of WIN_LT and WINHT
	
	SET_MASKED_BIT( u8_ctrle_tmp, ADC_WINCM_gm, ADC_WINCM_NONE_gc );
     174:	a8 7f       	andi	r26, 0xF8	; 248
	//----------------------------------------------------------------
	//	WRITE BACK
	//----------------------------------------------------------------
	
	//Write back registers
	irst_adc.CTRLA = u8_ctrla_tmp;
     176:	c0 83       	st	Z, r28
	irst_adc.CTRLB = u8_ctrlb_tmp;
     178:	b1 83       	std	Z+1, r27	; 0x01
	irst_adc.CTRLC = u8_ctrlc_tmp;
     17a:	22 83       	std	Z+2, r18	; 0x02
	irst_adc.CTRLD = u8_ctrld_tmp;
     17c:	93 83       	std	Z+3, r25	; 0x03
	irst_adc.CTRLE = u8_ctrle_tmp;
     17e:	a4 83       	std	Z+4, r26	; 0x04
	irst_adc.CALIB = u8_ctrl_calib_tmp;
     180:	76 8b       	std	Z+22, r23	; 0x16
	irst_adc.SAMPCTRL = u8_ctrl_samp;
     182:	65 83       	std	Z+5, r22	; 0x05
	irst_adc.MUXPOS = u8_ctrl_mux;
     184:	86 83       	std	Z+6, r24	; 0x06
	irst_adc.COMMAND = u8_command_tmp;
     186:	50 87       	std	Z+8, r21	; 0x08
	irst_adc.EVCTRL = u8_ctrl_event_tmp;
     188:	d1 87       	std	Z+9, r29	; 0x09
	irst_adc.INTCTRL = u8_ctrl_int_tmp;
     18a:	42 87       	std	Z+10, r20	; 0x0a
	irst_adc.DBGCTRL = u8_debug_tmp;
     18c:	34 87       	std	Z+12, r19	; 0x0c
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	return false;	//OK
}	//End: init_adc | void |
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <_ZN4User3Adc4initEv>:
//! @details
//! \n Initialize peripheral
/***************************************************************************/

bool Adc::init( void )
{
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	ec 01       	movw	r28, r24
	///--------------------------------------------------------------------------

	//Initialize to success
	bool u1_fail = false;
	//Initialize class
	u1_fail |= this -> init_class_vars();
     19e:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN4User3Adc15init_class_varsEv>
     1a2:	18 2f       	mov	r17, r24
	//Initialize voltage reference hardware
	
	//Initialize hardware ADC
	u1_fail |= this -> init_adc( ADC0 );
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	76 e0       	ldi	r23, 0x06	; 6
     1a8:	ce 01       	movw	r24, r28
     1aa:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN4User3Adc8init_adcER10ADC_struct>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Fail: %d", u1_fail); //Trace Return
	return u1_fail;	//Propagate
}   //end public method: init | void |
     1ae:	81 2b       	or	r24, r17
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <_ZN4User3AdcC1Ev>:
    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    //Initialize class vars
    this -> init();
     1b8:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN4User3Adc4initEv>
     1bc:	08 95       	ret

000001be <_Z12lcd_send_cmdh>:
	//***********************************************************************
	//	RETURN
	//***********************************************************************

	return;
}   //End function: lcd_print_s8
     1be:	e0 e2       	ldi	r30, 0x20	; 32
     1c0:	f4 e0       	ldi	r31, 0x04	; 4
     1c2:	94 81       	ldd	r25, Z+4	; 0x04
     1c4:	90 7f       	andi	r25, 0xF0	; 240
     1c6:	28 2f       	mov	r18, r24
     1c8:	22 95       	swap	r18
     1ca:	2f 70       	andi	r18, 0x0F	; 15
     1cc:	92 2b       	or	r25, r18
     1ce:	94 83       	std	Z+4, r25	; 0x04
     1d0:	94 81       	ldd	r25, Z+4	; 0x04
     1d2:	9f 7d       	andi	r25, 0xDF	; 223
     1d4:	94 83       	std	Z+4, r25	; 0x04
     1d6:	94 81       	ldd	r25, Z+4	; 0x04
     1d8:	90 61       	ori	r25, 0x10	; 16
     1da:	94 83       	std	Z+4, r25	; 0x04
     1dc:	a7 ee       	ldi	r26, 0xE7	; 231
     1de:	b3 e0       	ldi	r27, 0x03	; 3
     1e0:	11 97       	sbiw	r26, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z12lcd_send_cmdh+0x22>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z12lcd_send_cmdh+0x28>
     1e6:	00 00       	nop
     1e8:	94 81       	ldd	r25, Z+4	; 0x04
     1ea:	9f 7e       	andi	r25, 0xEF	; 239
     1ec:	94 83       	std	Z+4, r25	; 0x04
     1ee:	a7 ee       	ldi	r26, 0xE7	; 231
     1f0:	b3 e0       	ldi	r27, 0x03	; 3
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z12lcd_send_cmdh+0x34>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_Z12lcd_send_cmdh+0x3a>
     1f8:	00 00       	nop
     1fa:	94 81       	ldd	r25, Z+4	; 0x04
     1fc:	90 7f       	andi	r25, 0xF0	; 240
     1fe:	8f 70       	andi	r24, 0x0F	; 15
     200:	89 2b       	or	r24, r25
     202:	84 83       	std	Z+4, r24	; 0x04
     204:	84 81       	ldd	r24, Z+4	; 0x04
     206:	80 61       	ori	r24, 0x10	; 16
     208:	84 83       	std	Z+4, r24	; 0x04
     20a:	87 ee       	ldi	r24, 0xE7	; 231
     20c:	93 e0       	ldi	r25, 0x03	; 3
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <_Z12lcd_send_cmdh+0x50>
     212:	00 c0       	rjmp	.+0      	; 0x214 <_Z12lcd_send_cmdh+0x56>
     214:	00 00       	nop
     216:	84 81       	ldd	r24, Z+4	; 0x04
     218:	8f 7e       	andi	r24, 0xEF	; 239
     21a:	84 83       	std	Z+4, r24	; 0x04
     21c:	a7 ee       	ldi	r26, 0xE7	; 231
     21e:	b3 e0       	ldi	r27, 0x03	; 3
     220:	11 97       	sbiw	r26, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <_Z12lcd_send_cmdh+0x62>
     224:	00 c0       	rjmp	.+0      	; 0x226 <_Z12lcd_send_cmdh+0x68>
     226:	00 00       	nop
     228:	8f e0       	ldi	r24, 0x0F	; 15
     22a:	97 e2       	ldi	r25, 0x27	; 39
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <_Z12lcd_send_cmdh+0x6e>
     230:	00 c0       	rjmp	.+0      	; 0x232 <_Z12lcd_send_cmdh+0x74>
     232:	00 00       	nop
     234:	08 95       	ret

00000236 <_Z8lcd_initv>:
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	0e 94 df 00 	call	0x1be	; 0x1be <_Z12lcd_send_cmdh>
     23c:	88 e2       	ldi	r24, 0x28	; 40
     23e:	0e 94 df 00 	call	0x1be	; 0x1be <_Z12lcd_send_cmdh>
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	0e 94 df 00 	call	0x1be	; 0x1be <_Z12lcd_send_cmdh>
     248:	8c e0       	ldi	r24, 0x0C	; 12
     24a:	0e 94 df 00 	call	0x1be	; 0x1be <_Z12lcd_send_cmdh>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	80 32       	cpi	r24, 0x20	; 32
     252:	40 f4       	brcc	.+16     	; 0x264 <_Z8lcd_initv+0x2e>
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e1 5f       	subi	r30, 0xF1	; 241
     25a:	f7 4d       	sbci	r31, 0xD7	; 215
     25c:	90 e2       	ldi	r25, 0x20	; 32
     25e:	90 83       	st	Z, r25
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	f6 cf       	rjmp	.-20     	; 0x250 <_Z8lcd_initv+0x1a>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	84 30       	cpi	r24, 0x04	; 4
     268:	38 f4       	brcc	.+14     	; 0x278 <_Z8lcd_initv+0x42>
     26a:	e8 2f       	mov	r30, r24
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	e5 5f       	subi	r30, 0xF5	; 245
     270:	f7 4d       	sbci	r31, 0xD7	; 215
     272:	10 82       	st	Z, r1
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	f7 cf       	rjmp	.-18     	; 0x266 <_Z8lcd_initv+0x30>
     278:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <lcd_cfg_flags>
     27c:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <lcd_error>
     280:	08 95       	ret

00000282 <_Z10lcd_updatev>:
     282:	cf 93       	push	r28
     284:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <_ZZ10lcd_updatevE6status>
     288:	98 2f       	mov	r25, r24
     28a:	92 95       	swap	r25
     28c:	96 95       	lsr	r25
     28e:	97 70       	andi	r25, 0x07	; 7
     290:	93 70       	andi	r25, 0x03	; 3
     292:	c8 2f       	mov	r28, r24
     294:	cf 71       	andi	r28, 0x1F	; 31
     296:	8c 2f       	mov	r24, r28
     298:	91 11       	cpse	r25, r1
     29a:	aa c0       	rjmp	.+340    	; 0x3f0 <_Z10lcd_updatev+0x16e>
     29c:	5c 2f       	mov	r21, r28
     29e:	57 70       	andi	r21, 0x07	; 7
     2a0:	6f ef       	ldi	r22, 0xFF	; 255
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	05 2e       	mov	r0, r21
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <_Z10lcd_updatev+0x2a>
     2a8:	66 0f       	add	r22, r22
     2aa:	77 1f       	adc	r23, r23
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <_Z10lcd_updatev+0x26>
     2b0:	9c 2f       	mov	r25, r28
     2b2:	98 71       	andi	r25, 0x18	; 24
     2b4:	29 2f       	mov	r18, r25
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	35 95       	asr	r19
     2ba:	27 95       	ror	r18
     2bc:	35 95       	asr	r19
     2be:	27 95       	ror	r18
     2c0:	35 95       	asr	r19
     2c2:	27 95       	ror	r18
     2c4:	f9 01       	movw	r30, r18
     2c6:	e5 5f       	subi	r30, 0xF5	; 245
     2c8:	f7 4d       	sbci	r31, 0xD7	; 215
     2ca:	40 81       	ld	r20, Z
     2cc:	64 23       	and	r22, r20
     2ce:	a1 f0       	breq	.+40     	; 0x2f8 <_Z10lcd_updatev+0x76>
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <_Z10lcd_updatev+0x54>
     2d4:	99 0f       	add	r25, r25
     2d6:	5a 95       	dec	r21
     2d8:	ea f7       	brpl	.-6      	; 0x2d4 <_Z10lcd_updatev+0x52>
     2da:	01 c0       	rjmp	.+2      	; 0x2de <_Z10lcd_updatev+0x5c>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	99 23       	and	r25, r25
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <_Z10lcd_updatev+0x62>
     2e2:	44 c0       	rjmp	.+136    	; 0x36c <_Z10lcd_updatev+0xea>
     2e4:	29 2f       	mov	r18, r25
     2e6:	24 23       	and	r18, r20
     2e8:	c9 f7       	brne	.-14     	; 0x2dc <_Z10lcd_updatev+0x5a>
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	99 0f       	add	r25, r25
     2ee:	b9 f7       	brne	.-18     	; 0x2de <_Z10lcd_updatev+0x5c>
     2f0:	23 e6       	ldi	r18, 0x63	; 99
     2f2:	20 93 09 28 	sts	0x2809, r18	; 0x802809 <lcd_error>
     2f6:	f3 cf       	rjmp	.-26     	; 0x2de <_Z10lcd_updatev+0x5c>
     2f8:	89 2f       	mov	r24, r25
     2fa:	52 2f       	mov	r21, r18
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <_Z10lcd_updatev+0x80>
     300:	95 e0       	ldi	r25, 0x05	; 5
     302:	95 30       	cpi	r25, 0x05	; 5
     304:	f0 f4       	brcc	.+60     	; 0x342 <_Z10lcd_updatev+0xc0>
     306:	25 2f       	mov	r18, r21
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	e5 5f       	subi	r30, 0xF5	; 245
     30e:	f7 4d       	sbci	r31, 0xD7	; 215
     310:	40 81       	ld	r20, Z
     312:	41 11       	cpse	r20, r1
     314:	f5 cf       	rjmp	.-22     	; 0x300 <_Z10lcd_updatev+0x7e>
     316:	9f 5f       	subi	r25, 0xFF	; 255
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	24 30       	cpi	r18, 0x04	; 4
     31e:	31 05       	cpc	r19, r1
     320:	14 f4       	brge	.+4      	; 0x326 <_Z10lcd_updatev+0xa4>
     322:	5f 5f       	subi	r21, 0xFF	; 255
     324:	01 c0       	rjmp	.+2      	; 0x328 <_Z10lcd_updatev+0xa6>
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	28 2f       	mov	r18, r24
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	28 5f       	subi	r18, 0xF8	; 248
     32e:	3f 4f       	sbci	r19, 0xFF	; 255
     330:	20 32       	cpi	r18, 0x20	; 32
     332:	31 05       	cpc	r19, r1
     334:	14 f0       	brlt	.+4      	; 0x33a <_Z10lcd_updatev+0xb8>
     336:	88 51       	subi	r24, 0x18	; 24
     338:	01 c0       	rjmp	.+2      	; 0x33c <_Z10lcd_updatev+0xba>
     33a:	88 5f       	subi	r24, 0xF8	; 248
     33c:	95 30       	cpi	r25, 0x05	; 5
     33e:	08 f3       	brcs	.-62     	; 0x302 <_Z10lcd_updatev+0x80>
     340:	1e c1       	rjmp	.+572    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     342:	e5 2f       	mov	r30, r21
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	e5 5f       	subi	r30, 0xF5	; 245
     348:	f7 4d       	sbci	r31, 0xD7	; 215
     34a:	30 81       	ld	r19, Z
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	01 c0       	rjmp	.+2      	; 0x352 <_Z10lcd_updatev+0xd0>
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	99 23       	and	r25, r25
     354:	59 f0       	breq	.+22     	; 0x36c <_Z10lcd_updatev+0xea>
     356:	29 2f       	mov	r18, r25
     358:	23 23       	and	r18, r19
     35a:	d1 f7       	brne	.-12     	; 0x350 <_Z10lcd_updatev+0xce>
     35c:	99 0f       	add	r25, r25
     35e:	8f 5f       	subi	r24, 0xFF	; 255
     360:	91 11       	cpse	r25, r1
     362:	f7 cf       	rjmp	.-18     	; 0x352 <_Z10lcd_updatev+0xd0>
     364:	23 e6       	ldi	r18, 0x63	; 99
     366:	20 93 09 28 	sts	0x2809, r18	; 0x802809 <lcd_error>
     36a:	f3 cf       	rjmp	.-26     	; 0x352 <_Z10lcd_updatev+0xd0>
     36c:	98 2f       	mov	r25, r24
     36e:	9f 70       	andi	r25, 0x0F	; 15
     370:	c1 f0       	breq	.+48     	; 0x3a2 <_Z10lcd_updatev+0x120>
     372:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     376:	96 95       	lsr	r25
     378:	9f 71       	andi	r25, 0x1F	; 31
     37a:	89 13       	cpse	r24, r25
     37c:	12 c0       	rjmp	.+36     	; 0x3a2 <_Z10lcd_updatev+0x120>
     37e:	e7 e0       	ldi	r30, 0x07	; 7
     380:	f8 e2       	ldi	r31, 0x28	; 40
     382:	90 81       	ld	r25, Z
     384:	9f 77       	andi	r25, 0x7F	; 127
     386:	90 83       	st	Z, r25
     388:	e8 2f       	mov	r30, r24
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	e1 5f       	subi	r30, 0xF1	; 241
     38e:	f7 4d       	sbci	r31, 0xD7	; 215
     390:	90 81       	ld	r25, Z
     392:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <__data_end>
     396:	e0 e2       	ldi	r30, 0x20	; 32
     398:	f4 e0       	ldi	r31, 0x04	; 4
     39a:	24 81       	ldd	r18, Z+4	; 0x04
     39c:	20 62       	ori	r18, 0x20	; 32
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	18 c0       	rjmp	.+48     	; 0x3d2 <_Z10lcd_updatev+0x150>
     3a2:	e7 e0       	ldi	r30, 0x07	; 7
     3a4:	f8 e2       	ldi	r31, 0x28	; 40
     3a6:	90 81       	ld	r25, Z
     3a8:	90 68       	ori	r25, 0x80	; 128
     3aa:	90 83       	st	Z, r25
     3ac:	28 2f       	mov	r18, r24
     3ae:	20 71       	andi	r18, 0x10	; 16
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	22 0f       	add	r18, r18
     3b4:	33 1f       	adc	r19, r19
     3b6:	22 0f       	add	r18, r18
     3b8:	33 1f       	adc	r19, r19
     3ba:	92 2f       	mov	r25, r18
     3bc:	90 68       	ori	r25, 0x80	; 128
     3be:	28 2f       	mov	r18, r24
     3c0:	2f 70       	andi	r18, 0x0F	; 15
     3c2:	92 2b       	or	r25, r18
     3c4:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <__data_end>
     3c8:	e0 e2       	ldi	r30, 0x20	; 32
     3ca:	f4 e0       	ldi	r31, 0x04	; 4
     3cc:	24 81       	ldd	r18, Z+4	; 0x04
     3ce:	2f 7d       	andi	r18, 0xDF	; 223
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	e8 e0       	ldi	r30, 0x08	; 8
     3d4:	f8 e2       	ldi	r31, 0x28	; 40
     3d6:	20 81       	ld	r18, Z
     3d8:	21 60       	ori	r18, 0x01	; 1
     3da:	20 83       	st	Z, r18
     3dc:	e0 e2       	ldi	r30, 0x20	; 32
     3de:	f4 e0       	ldi	r31, 0x04	; 4
     3e0:	24 81       	ldd	r18, Z+4	; 0x04
     3e2:	20 7f       	andi	r18, 0xF0	; 240
     3e4:	92 95       	swap	r25
     3e6:	9f 70       	andi	r25, 0x0F	; 15
     3e8:	92 2b       	or	r25, r18
     3ea:	94 83       	std	Z+4, r25	; 0x04
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	ba c0       	rjmp	.+372    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     3f0:	91 30       	cpi	r25, 0x01	; 1
     3f2:	39 f4       	brne	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f4:	e0 e2       	ldi	r30, 0x20	; 32
     3f6:	f4 e0       	ldi	r31, 0x04	; 4
     3f8:	94 81       	ldd	r25, Z+4	; 0x04
     3fa:	90 61       	ori	r25, 0x10	; 16
     3fc:	94 83       	std	Z+4, r25	; 0x04
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	b1 c0       	rjmp	.+354    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     402:	92 30       	cpi	r25, 0x02	; 2
     404:	81 f4       	brne	.+32     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     406:	e0 e2       	ldi	r30, 0x20	; 32
     408:	f4 e0       	ldi	r31, 0x04	; 4
     40a:	94 81       	ldd	r25, Z+4	; 0x04
     40c:	9f 7e       	andi	r25, 0xEF	; 239
     40e:	94 83       	std	Z+4, r25	; 0x04
     410:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <_ZZ10lcd_updatevE6status>
     414:	99 23       	and	r25, r25
     416:	0c f4       	brge	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	a2 c0       	rjmp	.+324    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     41a:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     41e:	90 ff       	sbrs	r25, 0
     420:	a0 c0       	rjmp	.+320    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	9f c0       	rjmp	.+318    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     426:	93 30       	cpi	r25, 0x03	; 3
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	95 c0       	rjmp	.+298    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     42c:	20 91 07 28 	lds	r18, 0x2807	; 0x802807 <_ZZ10lcd_updatevE6status>
     430:	20 78       	andi	r18, 0x80	; 128
     432:	e1 f0       	breq	.+56     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     434:	30 91 08 28 	lds	r19, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     438:	30 ff       	sbrs	r19, 0
     43a:	18 c0       	rjmp	.+48     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     43c:	e8 e0       	ldi	r30, 0x08	; 8
     43e:	f8 e2       	ldi	r31, 0x28	; 40
     440:	23 2f       	mov	r18, r19
     442:	2e 7f       	andi	r18, 0xFE	; 254
     444:	20 83       	st	Z, r18
     446:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <__data_end>
     44a:	a0 e2       	ldi	r26, 0x20	; 32
     44c:	b4 e0       	ldi	r27, 0x04	; 4
     44e:	14 96       	adiw	r26, 0x04	; 4
     450:	4c 91       	ld	r20, X
     452:	14 97       	sbiw	r26, 0x04	; 4
     454:	40 7f       	andi	r20, 0xF0	; 240
     456:	3f 70       	andi	r19, 0x0F	; 15
     458:	34 2b       	or	r19, r20
     45a:	14 96       	adiw	r26, 0x04	; 4
     45c:	3c 93       	st	X, r19
     45e:	9c 2f       	mov	r25, r28
     460:	99 0f       	add	r25, r25
     462:	21 7c       	andi	r18, 0xC1	; 193
     464:	29 2b       	or	r18, r25
     466:	20 83       	st	Z, r18
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	7c c0       	rjmp	.+248    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     46c:	22 23       	and	r18, r18
     46e:	11 f1       	breq	.+68     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     470:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     474:	90 fd       	sbrc	r25, 0
     476:	1e c0       	rjmp	.+60     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     478:	e0 e2       	ldi	r30, 0x20	; 32
     47a:	f4 e0       	ldi	r31, 0x04	; 4
     47c:	94 81       	ldd	r25, Z+4	; 0x04
     47e:	90 62       	ori	r25, 0x20	; 32
     480:	94 83       	std	Z+4, r25	; 0x04
     482:	a7 e0       	ldi	r26, 0x07	; 7
     484:	b8 e2       	ldi	r27, 0x28	; 40
     486:	9c 91       	ld	r25, X
     488:	9f 77       	andi	r25, 0x7F	; 127
     48a:	9c 93       	st	X, r25
     48c:	a8 e0       	ldi	r26, 0x08	; 8
     48e:	b8 e2       	ldi	r27, 0x28	; 40
     490:	9c 91       	ld	r25, X
     492:	91 60       	ori	r25, 0x01	; 1
     494:	9c 93       	st	X, r25
     496:	ac 2f       	mov	r26, r28
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	a1 5f       	subi	r26, 0xF1	; 241
     49c:	b7 4d       	sbci	r27, 0xD7	; 215
     49e:	9c 91       	ld	r25, X
     4a0:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <__data_end>
     4a4:	24 81       	ldd	r18, Z+4	; 0x04
     4a6:	20 7f       	andi	r18, 0xF0	; 240
     4a8:	92 95       	swap	r25
     4aa:	9f 70       	andi	r25, 0x0F	; 15
     4ac:	92 2b       	or	r25, r18
     4ae:	94 83       	std	Z+4, r25	; 0x04
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	58 c0       	rjmp	.+176    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     4b4:	21 11       	cpse	r18, r1
     4b6:	4a c0       	rjmp	.+148    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     4b8:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     4bc:	90 ff       	sbrs	r25, 0
     4be:	46 c0       	rjmp	.+140    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     4c0:	e8 e0       	ldi	r30, 0x08	; 8
     4c2:	f8 e2       	ldi	r31, 0x28	; 40
     4c4:	9e 7f       	andi	r25, 0xFE	; 254
     4c6:	90 83       	st	Z, r25
     4c8:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <__data_end>
     4cc:	e0 e2       	ldi	r30, 0x20	; 32
     4ce:	f4 e0       	ldi	r31, 0x04	; 4
     4d0:	94 81       	ldd	r25, Z+4	; 0x04
     4d2:	29 2f       	mov	r18, r25
     4d4:	20 7f       	andi	r18, 0xF0	; 240
     4d6:	93 2f       	mov	r25, r19
     4d8:	9f 70       	andi	r25, 0x0F	; 15
     4da:	92 2b       	or	r25, r18
     4dc:	94 83       	std	Z+4, r25	; 0x04
     4de:	ec 2f       	mov	r30, r28
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e1 5f       	subi	r30, 0xF1	; 241
     4e4:	f7 4d       	sbci	r31, 0xD7	; 215
     4e6:	90 81       	ld	r25, Z
     4e8:	39 13       	cpse	r19, r25
     4ea:	18 c0       	rjmp	.+48     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     4ec:	ec 2f       	mov	r30, r28
     4ee:	e8 71       	andi	r30, 0x18	; 24
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	f5 95       	asr	r31
     4f4:	e7 95       	ror	r30
     4f6:	f5 95       	asr	r31
     4f8:	e7 95       	ror	r30
     4fa:	f5 95       	asr	r31
     4fc:	e7 95       	ror	r30
     4fe:	9c 2f       	mov	r25, r28
     500:	97 70       	andi	r25, 0x07	; 7
     502:	21 e0       	ldi	r18, 0x01	; 1
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	9a 95       	dec	r25
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     510:	e5 5f       	subi	r30, 0xF5	; 245
     512:	f7 4d       	sbci	r31, 0xD7	; 215
     514:	20 95       	com	r18
     516:	90 81       	ld	r25, Z
     518:	92 23       	and	r25, r18
     51a:	90 83       	st	Z, r25
     51c:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     520:	96 95       	lsr	r25
     522:	9f 71       	andi	r25, 0x1F	; 31
     524:	29 2f       	mov	r18, r25
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	20 32       	cpi	r18, 0x20	; 32
     52e:	31 05       	cpc	r19, r1
     530:	14 f4       	brge	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     532:	9f 5f       	subi	r25, 0xFF	; 255
     534:	01 c0       	rjmp	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	e8 e0       	ldi	r30, 0x08	; 8
     53a:	f8 e2       	ldi	r31, 0x28	; 40
     53c:	9f 71       	andi	r25, 0x1F	; 31
     53e:	99 0f       	add	r25, r25
     540:	20 81       	ld	r18, Z
     542:	21 7c       	andi	r18, 0xC1	; 193
     544:	92 2b       	or	r25, r18
     546:	90 83       	st	Z, r25
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0c c0       	rjmp	.+24     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     54c:	93 e6       	ldi	r25, 0x63	; 99
     54e:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <lcd_error>
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	07 c0       	rjmp	.+14     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     556:	23 e6       	ldi	r18, 0x63	; 99
     558:	20 93 09 28 	sts	0x2809, r18	; 0x802809 <lcd_error>
     55c:	03 c0       	rjmp	.+6      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	01 c0       	rjmp	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	e7 e0       	ldi	r30, 0x07	; 7
     566:	f8 e2       	ldi	r31, 0x28	; 40
     568:	29 2f       	mov	r18, r25
     56a:	22 95       	swap	r18
     56c:	22 0f       	add	r18, r18
     56e:	20 7e       	andi	r18, 0xE0	; 224
     570:	90 81       	ld	r25, Z
     572:	9f 79       	andi	r25, 0x9F	; 159
     574:	92 2b       	or	r25, r18
     576:	8f 71       	andi	r24, 0x1F	; 31
     578:	90 7e       	andi	r25, 0xE0	; 224
     57a:	89 2b       	or	r24, r25
     57c:	80 83       	st	Z, r24
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <_Z14lcd_print_charhh>:
     582:	81 32       	cpi	r24, 0x21	; 33
     584:	20 f0       	brcs	.+8      	; 0x58e <_Z14lcd_print_charhh+0xc>
     586:	8a e0       	ldi	r24, 0x0A	; 10
     588:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <lcd_error>
     58c:	08 95       	ret
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	e1 5f       	subi	r30, 0xF1	; 241
     596:	f7 4d       	sbci	r31, 0xD7	; 215
     598:	90 81       	ld	r25, Z
     59a:	96 17       	cp	r25, r22
     59c:	e1 f0       	breq	.+56     	; 0x5d6 <_Z14lcd_print_charhh+0x54>
     59e:	f9 01       	movw	r30, r18
     5a0:	e1 5f       	subi	r30, 0xF1	; 241
     5a2:	f7 4d       	sbci	r31, 0xD7	; 215
     5a4:	60 83       	st	Z, r22
     5a6:	e8 2f       	mov	r30, r24
     5a8:	e8 71       	andi	r30, 0x18	; 24
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	f5 95       	asr	r31
     5ae:	e7 95       	ror	r30
     5b0:	f5 95       	asr	r31
     5b2:	e7 95       	ror	r30
     5b4:	f5 95       	asr	r31
     5b6:	e7 95       	ror	r30
     5b8:	87 70       	andi	r24, 0x07	; 7
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	a9 01       	movw	r20, r18
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <_Z14lcd_print_charhh+0x44>
     5c2:	44 0f       	add	r20, r20
     5c4:	55 1f       	adc	r21, r21
     5c6:	8a 95       	dec	r24
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <_Z14lcd_print_charhh+0x40>
     5ca:	ca 01       	movw	r24, r20
     5cc:	e5 5f       	subi	r30, 0xF5	; 245
     5ce:	f7 4d       	sbci	r31, 0xD7	; 215
     5d0:	90 81       	ld	r25, Z
     5d2:	89 2b       	or	r24, r25
     5d4:	80 83       	st	Z, r24
     5d6:	08 95       	ret

000005d8 <_Z13lcd_print_strhPKc>:
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	61 15       	cp	r22, r1
     5e2:	71 05       	cpc	r23, r1
     5e4:	b1 f0       	breq	.+44     	; 0x612 <_Z13lcd_print_strhPKc+0x3a>
     5e6:	8b 01       	movw	r16, r22
     5e8:	d8 2f       	mov	r29, r24
     5ea:	c0 e0       	ldi	r28, 0x00	; 0
     5ec:	2c 2f       	mov	r18, r28
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	2d 0f       	add	r18, r29
     5f2:	31 1d       	adc	r19, r1
     5f4:	21 32       	cpi	r18, 0x21	; 33
     5f6:	31 05       	cpc	r19, r1
     5f8:	64 f4       	brge	.+24     	; 0x612 <_Z13lcd_print_strhPKc+0x3a>
     5fa:	f8 01       	movw	r30, r16
     5fc:	ec 0f       	add	r30, r28
     5fe:	f1 1d       	adc	r31, r1
     600:	60 81       	ld	r22, Z
     602:	66 23       	and	r22, r22
     604:	31 f0       	breq	.+12     	; 0x612 <_Z13lcd_print_strhPKc+0x3a>
     606:	8c 2f       	mov	r24, r28
     608:	8d 0f       	add	r24, r29
     60a:	0e 94 c1 02 	call	0x582	; 0x582 <_Z14lcd_print_charhh>
     60e:	cf 5f       	subi	r28, 0xFF	; 255
     610:	ed cf       	rjmp	.-38     	; 0x5ec <_Z13lcd_print_strhPKc+0x14>
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <_Z13lcd_print_u16hj>:
**	RIGHT 	|123		LEFT	|123
**			|  1			 	|1
****************************************************************************/

void lcd_print_u16( uint8_t pos, uint16_t num )
{
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	60 97       	sbiw	r28, 0x10	; 16
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	de bf       	out	0x3e, r29	; 62
     630:	f8 2e       	mov	r15, r24
     632:	8b 01       	movw	r16, r22
            {
                //Bad parameters
                return 0;
            }
            //If: number is small enough
            if (num <= UINT8_MAX)
     634:	6f 3f       	cpi	r22, 0xFF	; 255
     636:	71 05       	cpc	r23, r1
     638:	11 f0       	breq	.+4      	; 0x63e <_Z13lcd_print_u16hj+0x22>
     63a:	08 f0       	brcs	.+2      	; 0x63e <_Z13lcd_print_u16hj+0x22>
     63c:	4e c0       	rjmp	.+156    	; 0x6da <_Z13lcd_print_u16hj+0xbe>
            const uint8_t base[Config::DIGIT8] =
            {
                100,
                10,
                1
            };
     63e:	84 e6       	ldi	r24, 0x64	; 100
     640:	8f 83       	std	Y+7, r24	; 0x07
     642:	8a e0       	ldi	r24, 0x0A	; 10
     644:	88 87       	std	Y+8, r24	; 0x08
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	89 87       	std	Y+9, r24	; 0x09
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
     64a:	20 e0       	ldi	r18, 0x00	; 0
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT8; t++)
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	33 30       	cpi	r19, 0x03	; 3
     650:	d8 f5       	brcc	.+118    	; 0x6c8 <_Z13lcd_print_u16hj+0xac>
            {
                //If the base is bigger or equal than the number (division is meaningful)
                if (base[t] <= num)
     652:	e7 e0       	ldi	r30, 0x07	; 7
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ec 0f       	add	r30, r28
     658:	fd 1f       	adc	r31, r29
     65a:	e3 0f       	add	r30, r19
     65c:	f1 1d       	adc	r31, r1
     65e:	40 81       	ld	r20, Z
     660:	04 17       	cp	r16, r20
     662:	d8 f0       	brcs	.+54     	; 0x69a <_Z13lcd_print_u16hj+0x7e>
                {
                    //Divide number by base, get the digit. Bounded to 0 to 9.
                    tmp = num / base[t];
     664:	80 2f       	mov	r24, r16
     666:	64 2f       	mov	r22, r20
     668:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodqi4>
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     66c:	62 2f       	mov	r22, r18
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	64 30       	cpi	r22, 0x04	; 4
     672:	71 05       	cpc	r23, r1
     674:	1c f0       	brlt	.+6      	; 0x67c <_Z13lcd_print_u16hj+0x60>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     676:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	8b c0       	rjmp	.+278    	; 0x792 <_Z13lcd_print_u16hj+0x176>
                    }
                    //Write the digit
                    str[ index ] = '0' +tmp;
     67c:	e1 e0       	ldi	r30, 0x01	; 1
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ec 0f       	add	r30, r28
     682:	fd 1f       	adc	r31, r29
     684:	e2 0f       	add	r30, r18
     686:	f1 1d       	adc	r31, r1
     688:	90 e3       	ldi	r25, 0x30	; 48
     68a:	98 0f       	add	r25, r24
     68c:	90 83       	st	Z, r25
                    //Update the number
                    num = num - base[t] * tmp;
     68e:	48 9f       	mul	r20, r24
     690:	00 19       	sub	r16, r0
     692:	11 24       	eor	r1, r1
                    //I have found a meaningful digit
                    flag = false;
                    //Jump to the next digit
                    index++;
     694:	2f 5f       	subi	r18, 0xFF	; 255
                    //Write the digit
                    str[ index ] = '0' +tmp;
                    //Update the number
                    num = num - base[t] * tmp;
                    //I have found a meaningful digit
                    flag = false;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	15 c0       	rjmp	.+42     	; 0x6c4 <_Z13lcd_print_u16hj+0xa8>
                    //Jump to the next digit
                    index++;
                }
                //If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
                else if ( (flag == true) && (t != (Config::DIGIT8 -1)) )
     69a:	88 23       	and	r24, r24
     69c:	11 f0       	breq	.+4      	; 0x6a2 <_Z13lcd_print_u16hj+0x86>
     69e:	32 30       	cpi	r19, 0x02	; 2
     6a0:	89 f4       	brne	.+34     	; 0x6c4 <_Z13lcd_print_u16hj+0xa8>
                }
                //If: I have a meaningful zero
                else
                {
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     6a2:	42 2f       	mov	r20, r18
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	44 30       	cpi	r20, 0x04	; 4
     6a8:	51 05       	cpc	r21, r1
     6aa:	1c f0       	brlt	.+6      	; 0x6b2 <_Z13lcd_print_u16hj+0x96>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     6ac:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     6ae:	00 e0       	ldi	r16, 0x00	; 0
     6b0:	70 c0       	rjmp	.+224    	; 0x792 <_Z13lcd_print_u16hj+0x176>
                    }
                    //It's a zero
                    str[ index ] = '0';
     6b2:	e1 e0       	ldi	r30, 0x01	; 1
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ec 0f       	add	r30, r28
     6b8:	fd 1f       	adc	r31, r29
     6ba:	e2 0f       	add	r30, r18
     6bc:	f1 1d       	adc	r31, r1
     6be:	90 e3       	ldi	r25, 0x30	; 48
     6c0:	90 83       	st	Z, r25
                    //Jump to the next digit
                    index++;
     6c2:	2f 5f       	subi	r18, 0xFF	; 255
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT8; t++)
     6c4:	3f 5f       	subi	r19, 0xFF	; 255
     6c6:	c3 cf       	rjmp	.-122    	; 0x64e <_Z13lcd_print_u16hj+0x32>
            //----------------------------------------------------------------
            //	RETURN
            //----------------------------------------------------------------

            //Append the terminator
            str[ index ] = Config::TERMINATOR;
     6c8:	e1 e0       	ldi	r30, 0x01	; 1
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	e2 0f       	add	r30, r18
     6d2:	f1 1d       	adc	r31, r1
     6d4:	10 82       	st	Z, r1
            DRETURN_ARG("digits written: %d | output >%s<\n", index, str);
            return index;
     6d6:	02 2f       	mov	r16, r18
     6d8:	5c c0       	rjmp	.+184    	; 0x792 <_Z13lcd_print_u16hj+0x176>
                10000,
                1000,
                100,
                10,
                1
            };
     6da:	8a e0       	ldi	r24, 0x0A	; 10
     6dc:	e8 e0       	ldi	r30, 0x08	; 8
     6de:	f7 e7       	ldi	r31, 0x77	; 119
     6e0:	de 01       	movw	r26, r28
     6e2:	17 96       	adiw	r26, 0x07	; 7
     6e4:	01 90       	ld	r0, Z+
     6e6:	0d 92       	st	X+, r0
     6e8:	8a 95       	dec	r24
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <_Z13lcd_print_u16hj+0xc8>
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
            //flag used to blank non meaningful zeros
            bool flag = true;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
                1
            };
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
     6ee:	20 e0       	ldi	r18, 0x00	; 0
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT16; t++)
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	35 30       	cpi	r19, 0x05	; 5
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <_Z13lcd_print_u16hj+0xdc>
     6f6:	45 c0       	rjmp	.+138    	; 0x782 <_Z13lcd_print_u16hj+0x166>
            {
                //If the base is bigger or equal than the number (division is meaningful)
                if (base[t] <= num)
     6f8:	e3 2f       	mov	r30, r19
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	4c 0f       	add	r20, r28
     706:	5d 1f       	adc	r21, r29
     708:	e4 0f       	add	r30, r20
     70a:	f5 1f       	adc	r31, r21
     70c:	06 80       	ldd	r0, Z+6	; 0x06
     70e:	f7 81       	ldd	r31, Z+7	; 0x07
     710:	e0 2d       	mov	r30, r0
     712:	0e 17       	cp	r16, r30
     714:	1f 07       	cpc	r17, r31
     716:	f0 f0       	brcs	.+60     	; 0x754 <_Z13lcd_print_u16hj+0x138>
                {
                    //Divide number by base, get the digit. Bounded to 0 to 9.
                    tmp = num / base[t];
     718:	c8 01       	movw	r24, r16
     71a:	bf 01       	movw	r22, r30
     71c:	0e 94 9e 1a 	call	0x353c	; 0x353c <__udivmodhi4>
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     720:	82 2f       	mov	r24, r18
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	04 97       	sbiw	r24, 0x04	; 4
     726:	1c f0       	brlt	.+6      	; 0x72e <_Z13lcd_print_u16hj+0x112>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     728:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	32 c0       	rjmp	.+100    	; 0x792 <_Z13lcd_print_u16hj+0x176>
                    }
                    //Write the digit
                    str[ index ] = '0' +tmp;
     72e:	a1 e0       	ldi	r26, 0x01	; 1
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	ac 0f       	add	r26, r28
     734:	bd 1f       	adc	r27, r29
     736:	a2 0f       	add	r26, r18
     738:	b1 1d       	adc	r27, r1
     73a:	80 e3       	ldi	r24, 0x30	; 48
     73c:	86 0f       	add	r24, r22
     73e:	8c 93       	st	X, r24
                    //Update the number
                    num = num - base[t] * tmp;
     740:	6e 9f       	mul	r22, r30
     742:	c0 01       	movw	r24, r0
     744:	6f 9f       	mul	r22, r31
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	08 1b       	sub	r16, r24
     74c:	19 0b       	sbc	r17, r25
                    //I have found a meaningful digit
                    flag = false;
                    //Jump to the next digit
                    index++;
     74e:	2f 5f       	subi	r18, 0xFF	; 255
                    //Write the digit
                    str[ index ] = '0' +tmp;
                    //Update the number
                    num = num - base[t] * tmp;
                    //I have found a meaningful digit
                    flag = false;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	15 c0       	rjmp	.+42     	; 0x77e <_Z13lcd_print_u16hj+0x162>
                    //Jump to the next digit
                    index++;
                }
                //If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
                else if ( (flag == true) && (t != (Config::DIGIT16 -1)) )
     754:	88 23       	and	r24, r24
     756:	11 f0       	breq	.+4      	; 0x75c <_Z13lcd_print_u16hj+0x140>
     758:	34 30       	cpi	r19, 0x04	; 4
     75a:	89 f4       	brne	.+34     	; 0x77e <_Z13lcd_print_u16hj+0x162>
                }
                //If: I have a meaningful zero
                else
                {
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     75c:	42 2f       	mov	r20, r18
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	44 30       	cpi	r20, 0x04	; 4
     762:	51 05       	cpc	r21, r1
     764:	1c f0       	brlt	.+6      	; 0x76c <_Z13lcd_print_u16hj+0x150>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     766:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     768:	00 e0       	ldi	r16, 0x00	; 0
     76a:	13 c0       	rjmp	.+38     	; 0x792 <_Z13lcd_print_u16hj+0x176>
                    }
                    //It's a zero
                    str[ index ] = '0';
     76c:	e1 e0       	ldi	r30, 0x01	; 1
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ec 0f       	add	r30, r28
     772:	fd 1f       	adc	r31, r29
     774:	e2 0f       	add	r30, r18
     776:	f1 1d       	adc	r31, r1
     778:	90 e3       	ldi	r25, 0x30	; 48
     77a:	90 83       	st	Z, r25
                    //Jump to the next digit
                    index++;
     77c:	2f 5f       	subi	r18, 0xFF	; 255
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT16; t++)
     77e:	3f 5f       	subi	r19, 0xFF	; 255
     780:	b8 cf       	rjmp	.-144    	; 0x6f2 <_Z13lcd_print_u16hj+0xd6>
            //----------------------------------------------------------------
            //	RETURN
            //----------------------------------------------------------------

            //Append the terminator
            str[ index ] = Config::TERMINATOR;
     782:	e1 e0       	ldi	r30, 0x01	; 1
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	ec 0f       	add	r30, r28
     788:	fd 1f       	adc	r31, r29
     78a:	e2 0f       	add	r30, r18
     78c:	f1 1d       	adc	r31, r1
     78e:	10 82       	st	Z, r1
            DRETURN_ARG("digits written: %d | output >%s<\n", index, str);
            return index;
     790:	02 2f       	mov	r16, r18
	//***********************************************************************

	//convert the number
	ret = User::String::num_to_str( num, User::String::Config::DIGIT16, str );
	//For: every digit
	for (u8t = 0;u8t < User::String::Config::DIGIT16; u8t++)
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	15 30       	cpi	r17, 0x05	; 5
     796:	38 f5       	brcc	.+78     	; 0x7e6 <_Z13lcd_print_u16hj+0x1ca>
	{
		//If: left alignment
		if (IS_BIT_ONE( lcd_cfg_flags, LCD_ADJ_FLAG ))
     798:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <lcd_cfg_flags>
     79c:	80 ff       	sbrs	r24, 0
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <_Z13lcd_print_u16hj+0x198>
		{
			//If: I'm outside the number
			if (u8t >= ret)
     7a0:	10 17       	cp	r17, r16
     7a2:	c0 f4       	brcc	.+48     	; 0x7d4 <_Z13lcd_print_u16hj+0x1b8>
				u8t1 = ' ';
			}
			else
			{
				//Print number
				u8t1 = str[ u8t ];
     7a4:	e1 e0       	ldi	r30, 0x01	; 1
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ec 0f       	add	r30, r28
     7aa:	fd 1f       	adc	r31, r29
     7ac:	e1 0f       	add	r30, r17
     7ae:	f1 1d       	adc	r31, r1
     7b0:	60 81       	ld	r22, Z
     7b2:	13 c0       	rjmp	.+38     	; 0x7da <_Z13lcd_print_u16hj+0x1be>
		}	//End If: left alignment
		//If: right alignment
		else
		{
			//If: I'm outside the number (yes, that's the condition,right adjustment is messy)
			if ((u8t +ret) < User::String::Config::DIGIT16)
     7b4:	80 2f       	mov	r24, r16
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	81 0f       	add	r24, r17
     7ba:	91 1d       	adc	r25, r1
     7bc:	85 30       	cpi	r24, 0x05	; 5
     7be:	91 05       	cpc	r25, r1
     7c0:	5c f0       	brlt	.+22     	; 0x7d8 <_Z13lcd_print_u16hj+0x1bc>
			}
			//If: I'm writing a digit
			else
			{
				//print number, I have to write digit in order with this adjust
				u8t1 = str[ u8t +ret -User::String::Config::DIGIT16 ];
     7c2:	05 97       	sbiw	r24, 0x05	; 5
     7c4:	e1 e0       	ldi	r30, 0x01	; 1
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ec 0f       	add	r30, r28
     7ca:	fd 1f       	adc	r31, r29
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	60 81       	ld	r22, Z
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <_Z13lcd_print_u16hj+0x1be>
		{
			//If: I'm outside the number
			if (u8t >= ret)
			{
				//I write spaces to blank older numbers
				u8t1 = ' ';
     7d4:	60 e2       	ldi	r22, 0x20	; 32
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <_Z13lcd_print_u16hj+0x1be>
		{
			//If: I'm outside the number (yes, that's the condition,right adjustment is messy)
			if ((u8t +ret) < User::String::Config::DIGIT16)
			{
				//I write spaces to blank older numbers
				u8t1 = ' ';
     7d8:	60 e2       	ldi	r22, 0x20	; 32
				//print number, I have to write digit in order with this adjust
				u8t1 = str[ u8t +ret -User::String::Config::DIGIT16 ];
			}
		}	//End If: right alignment
		//I want to call a single print, I have calculated the argument based on the settings of the print
		lcd_print_char( pos +u8t, u8t1 );
     7da:	81 2f       	mov	r24, r17
     7dc:	8f 0d       	add	r24, r15
     7de:	0e 94 c1 02 	call	0x582	; 0x582 <_Z14lcd_print_charhh>
	//***********************************************************************

	//convert the number
	ret = User::String::num_to_str( num, User::String::Config::DIGIT16, str );
	//For: every digit
	for (u8t = 0;u8t < User::String::Config::DIGIT16; u8t++)
     7e2:	1f 5f       	subi	r17, 0xFF	; 255
     7e4:	d7 cf       	rjmp	.-82     	; 0x794 <_Z13lcd_print_u16hj+0x178>
	//***********************************************************************
	//	RETURN
	//***********************************************************************

	return;
}   //End function: lcd_print_u16
     7e6:	60 96       	adiw	r28, 0x10	; 16
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	08 95       	ret

000007f8 <_Z10init_clockv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Main clock switch
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_gm, CLKCTRL_CLKSEL_gp, (CLKCTRL_CLKSEL_t)CLKCTRL_CLKSEL_OSC20M_gc);
     7f8:	88 ed       	ldi	r24, 0xD8	; 216
     7fa:	84 bf       	out	0x34, r24	; 52
     7fc:	e0 e6       	ldi	r30, 0x60	; 96
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	90 81       	ld	r25, Z
     802:	9c 7f       	andi	r25, 0xFC	; 252
     804:	90 83       	st	Z, r25
	//Configure CLK_OUT pin as disabled
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKOUT_bm, CLKCTRL_CLKOUT_bp, 0);
     806:	84 bf       	out	0x34, r24	; 52
     808:	90 81       	ld	r25, Z
     80a:	9f 77       	andi	r25, 0x7F	; 127
     80c:	90 83       	st	Z, r25
	//Disable the main clock prescaler
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm, CLKCTRL_PEN_bm, 0);
     80e:	84 bf       	out	0x34, r24	; 52
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	9e 7f       	andi	r25, 0xFE	; 254
     814:	91 83       	std	Z+1, r25	; 0x01
	//Set the main clock prescaler to 2
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_gm, CLKCTRL_PDIV_gp, (CLKCTRL_PDIV_t)CLKCTRL_PDIV_2X_gc);
     816:	84 bf       	out	0x34, r24	; 52
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	91 7e       	andi	r25, 0xE1	; 225
     81c:	91 83       	std	Z+1, r25	; 0x01
	//Disable the clock multiplexer and prescaler protection
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKLOCK, CLKCTRL_LOCKEN_bm, CLKCTRL_LOCKEN_bp, 0);
     81e:	84 bf       	out	0x34, r24	; 52
     820:	92 81       	ldd	r25, Z+2	; 0x02
     822:	9e 7f       	andi	r25, 0xFE	; 254
     824:	92 83       	std	Z+2, r25	; 0x02

	CLKCTRL.OSC20MCTRLA |= CLKCTRL_RUNSTDBY_bm; //1<<1;
     826:	90 89       	ldd	r25, Z+16	; 0x10
     828:	92 60       	ori	r25, 0x02	; 2
     82a:	90 8b       	std	Z+16, r25	; 0x10
	CCP = CCP_IOREG_gc;
     82c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCALIBB |= CLKCTRL_LOCK_bm; //1<<7
     82e:	82 89       	ldd	r24, Z+18	; 0x12
     830:	80 68       	ori	r24, 0x80	; 128
     832:	82 8b       	std	Z+18, r24	; 0x12
     834:	08 95       	ret

00000836 <_Z8init_pinv>:
	//!	PA5				: 
	//!	PA6				: UC_BTN
	//!	PA7				: LCD PWR#
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_A_CONFIG(	PIN_H,	PIN_R,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_R,	PIN_H );
     836:	e0 e0       	ldi	r30, 0x00	; 0
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	81 e8       	ldi	r24, 0x81	; 129
     83c:	80 83       	st	Z, r24
     83e:	84 83       	std	Z+4, r24	; 0x04
     840:	12 86       	std	Z+10, r1	; 0x0a
     842:	10 8a       	std	Z+16, r1	; 0x10
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	81 8b       	std	Z+17, r24	; 0x11
     848:	12 8a       	std	Z+18, r1	; 0x12
     84a:	13 8a       	std	Z+19, r1	; 0x13
     84c:	14 8a       	std	Z+20, r1	; 0x14
     84e:	15 8a       	std	Z+21, r1	; 0x15
     850:	86 8b       	std	Z+22, r24	; 0x16
     852:	17 8a       	std	Z+23, r1	; 0x17
	//!	PB5,			: LCD RS
	//!	PB6				:
	//!	PB7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_B_CONFIG(	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
     854:	e0 e2       	ldi	r30, 0x20	; 32
     856:	f4 e0       	ldi	r31, 0x04	; 4
     858:	8f e3       	ldi	r24, 0x3F	; 63
     85a:	80 83       	st	Z, r24
     85c:	14 82       	std	Z+4, r1	; 0x04
     85e:	12 86       	std	Z+10, r1	; 0x0a
     860:	10 8a       	std	Z+16, r1	; 0x10
     862:	11 8a       	std	Z+17, r1	; 0x11
     864:	12 8a       	std	Z+18, r1	; 0x12
     866:	13 8a       	std	Z+19, r1	; 0x13
     868:	14 8a       	std	Z+20, r1	; 0x14
     86a:	15 8a       	std	Z+21, r1	; 0x15
     86c:	16 8a       	std	Z+22, r1	; 0x16
     86e:	17 8a       	std	Z+23, r1	; 0x17
	//!	PC5				: UC_LED1 (BLUE)
	//!	PC6				:
	//!	PC7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_C_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
     870:	e0 e4       	ldi	r30, 0x40	; 64
     872:	f4 e0       	ldi	r31, 0x04	; 4
     874:	80 e3       	ldi	r24, 0x30	; 48
     876:	80 83       	st	Z, r24
     878:	14 82       	std	Z+4, r1	; 0x04
     87a:	12 86       	std	Z+10, r1	; 0x0a
     87c:	10 8a       	std	Z+16, r1	; 0x10
     87e:	11 8a       	std	Z+17, r1	; 0x11
     880:	12 8a       	std	Z+18, r1	; 0x12
     882:	13 8a       	std	Z+19, r1	; 0x13
     884:	14 8a       	std	Z+20, r1	; 0x14
     886:	15 8a       	std	Z+21, r1	; 0x15
     888:	16 8a       	std	Z+22, r1	; 0x16
     88a:	17 8a       	std	Z+23, r1	; 0x17
	//!	PD5				:
	//!	PD6				: 
	//!	PD7				:	UC_SERVO_POWER#	| false = allow power to flow from the regulator channel 2 to the servo connectors
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_D_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_H );
     88c:	e0 e6       	ldi	r30, 0x60	; 96
     88e:	f4 e0       	ldi	r31, 0x04	; 4
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	80 83       	st	Z, r24
     894:	84 83       	std	Z+4, r24	; 0x04
     896:	12 86       	std	Z+10, r1	; 0x0a
     898:	10 8a       	std	Z+16, r1	; 0x10
     89a:	11 8a       	std	Z+17, r1	; 0x11
     89c:	12 8a       	std	Z+18, r1	; 0x12
     89e:	13 8a       	std	Z+19, r1	; 0x13
     8a0:	14 8a       	std	Z+20, r1	; 0x14
     8a2:	15 8a       	std	Z+21, r1	; 0x15
     8a4:	16 8a       	std	Z+22, r1	; 0x16
     8a6:	17 8a       	std	Z+23, r1	; 0x17
	//!	PE5				: 
	//!	PE6				: 
	//!	PE7				: 
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_E_CONFIG(	PIN_L,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
     8a8:	e0 e8       	ldi	r30, 0x80	; 128
     8aa:	f4 e0       	ldi	r31, 0x04	; 4
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 83       	st	Z, r24
     8b0:	14 82       	std	Z+4, r1	; 0x04
     8b2:	12 86       	std	Z+10, r1	; 0x0a
     8b4:	10 8a       	std	Z+16, r1	; 0x10
     8b6:	11 8a       	std	Z+17, r1	; 0x11
     8b8:	12 8a       	std	Z+18, r1	; 0x12
     8ba:	13 8a       	std	Z+19, r1	; 0x13
     8bc:	14 8a       	std	Z+20, r1	; 0x14
     8be:	15 8a       	std	Z+21, r1	; 0x15
     8c0:	16 8a       	std	Z+22, r1	; 0x16
     8c2:	17 8a       	std	Z+23, r1	; 0x17
	//!	PF5				: 
	//!	PF6				:
	//!	PF7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_F_CONFIG(	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
     8c4:	e0 ea       	ldi	r30, 0xA0	; 160
     8c6:	f4 e0       	ldi	r31, 0x04	; 4
     8c8:	8f e0       	ldi	r24, 0x0F	; 15
     8ca:	80 83       	st	Z, r24
     8cc:	14 82       	std	Z+4, r1	; 0x04
     8ce:	12 86       	std	Z+10, r1	; 0x0a
     8d0:	10 8a       	std	Z+16, r1	; 0x10
     8d2:	11 8a       	std	Z+17, r1	; 0x11
     8d4:	12 8a       	std	Z+18, r1	; 0x12
     8d6:	13 8a       	std	Z+19, r1	; 0x13
     8d8:	14 8a       	std	Z+20, r1	; 0x14
     8da:	15 8a       	std	Z+21, r1	; 0x15
     8dc:	16 8a       	std	Z+22, r1	; 0x16
     8de:	17 8a       	std	Z+23, r1	; 0x17
     8e0:	08 95       	ret

000008e2 <_Z8init_rtcv>:
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrla_tmp		= RTC.CTRLA;
     8e2:	e0 e4       	ldi	r30, 0x40	; 64
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	90 81       	ld	r25, Z
	uint8_t intctrl_tmp		= RTC.INTCTRL;
     8e8:	42 81       	ldd	r20, Z+2	; 0x02
	uint8_t dgbctrl_tmp		= RTC.DBGCTRL;
     8ea:	55 81       	ldd	r21, Z+5	; 0x05
	uint8_t clksel_tmp		= RTC.CLKSEL;
     8ec:	37 81       	ldd	r19, Z+7	; 0x07
	uint8_t pitctrla_tmp	= RTC.PITCTRLA;
     8ee:	80 89       	ldd	r24, Z+16	; 0x10
	uint8_t pitintctrl_tmp	= RTC.PITINTCTRL;
     8f0:	22 89       	ldd	r18, Z+18	; 0x12
	//! RTC Clock Source
	//----------------------------------------------------------------
	//	Clock source for the RTC timer. Select only one

	//Internal 32KHz oscillator
	SET_MASKED_BIT( clksel_tmp, RTC_CLKSEL_gm, RTC_CLKSEL_INT32K_gc );
     8f2:	3c 7f       	andi	r19, 0xFC	; 252
     8f4:	97 78       	andi	r25, 0x87	; 135
	//----------------------------------------------------------------
	//! RTC Clock Prescaler
	//----------------------------------------------------------------
	//	Set prescaler. Only activate one

	SET_MASKED_BIT( ctrla_tmp, RTC_PRESCALER_gm, RTC_PRESCALER_DIV1_gc );
     8f6:	91 68       	ori	r25, 0x81	; 129
	//----------------------------------------------------------------
	//! RTC Periodic Interrupt period
	//----------------------------------------------------------------

	//! Enable Periodic Interrupt timer
	SET_BIT( pitctrla_tmp, RTC_PITEN_bp );
     8f8:	81 60       	ori	r24, 0x01	; 1
	//! Period for the periodic interrupt. Activate only one
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_OFF_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC4_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC8_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC16_gc );
	SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC32_gc );
     8fa:	87 78       	andi	r24, 0x87	; 135
     8fc:	80 62       	ori	r24, 0x20	; 32
	//! Enable overflow interrupt
	//SET_BIT( intctrl_tmp, RTC_OVF_bp );
	//! Enable Compare Match interrupt
	//SET_BIT( intctrl_tmp, RTC_CMP_bp );
	//! Enable Periodic Interrupt timer
	SET_BIT( pitintctrl_tmp, RTC_PI_bp );
     8fe:	21 60       	ori	r18, 0x01	; 1
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Calibration PPM of the RTC counter. Meant to be done in software against more precise clock sources.
	RTC.CALIB = (uint8_t)0x00;
     900:	16 82       	std	Z+6, r1	; 0x06

	//Wait for the ***
	//while (IS_BIT_ONE(RTC.STATUS, RTC_PERBUSY_bp));
	RTC.PER = (uint16_t)0;
     902:	12 86       	std	Z+10, r1	; 0x0a
     904:	13 86       	std	Z+11, r1	; 0x0b
	//Compare register for compare interrupt
	RTC.CMP = (uint16_t)0;
     906:	14 86       	std	Z+12, r1	; 0x0c
     908:	15 86       	std	Z+13, r1	; 0x0d

	//! Registers write back
	//Configuration registers
	RTC.DBGCTRL = dgbctrl_tmp;
     90a:	55 83       	std	Z+5, r21	; 0x05
	RTC.CLKSEL = clksel_tmp;
     90c:	37 83       	std	Z+7, r19	; 0x07
	RTC.PITCTRLA = pitctrla_tmp;
     90e:	80 8b       	std	Z+16, r24	; 0x10
	//Write this register last as it activates the timer
	RTC.CTRLA = ctrla_tmp;
     910:	90 83       	st	Z, r25
	//Activate interrupts
	RTC.INTCTRL = intctrl_tmp;
     912:	42 83       	std	Z+2, r20	; 0x02
	RTC.PITINTCTRL = pitintctrl_tmp;
     914:	22 8b       	std	Z+18, r18	; 0x12
     916:	08 95       	ret

00000918 <_Z4initv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Initialize clock systems
	init_clock();
     918:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z10init_clockv>
	
	//initialize pin configuration
	init_pin();
     91c:	0e 94 1b 04 	call	0x836	; 0x836 <_Z8init_pinv>
	
	//Initialize RTC timer as Periodic interrupt source: RTC_PIT_vect
	init_rtc();
     920:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z8init_rtcv>
     924:	08 95       	ret

00000926 <__vector_4>:
//! @details
//! \n Periodic interrupt generated by the RTC from it's independent clock source
/***************************************************************************/

ISR( RTC_PIT_vect )
{	
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	2f 93       	push	r18
     932:	3f 93       	push	r19
     934:	4f 93       	push	r20
     936:	5f 93       	push	r21
     938:	6f 93       	push	r22
     93a:	7f 93       	push	r23
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
     940:	af 93       	push	r26
     942:	bf 93       	push	r27
     944:	ef 93       	push	r30
     946:	ff 93       	push	r31
	//	VARS
	//----------------------------------------------------------------
	//Local prescaler
	
	//if: tick is not issued
	if (g_isr_flags.fast_tick == false)
     948:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     94c:	80 fd       	sbrc	r24, 0
     94e:	06 c0       	rjmp	.+12     	; 0x95c <__vector_4+0x36>
	{
		//Issue a tick
		g_isr_flags.fast_tick = true;
     950:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     954:	81 60       	ori	r24, 0x01	; 1
     956:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <g_isr_flags>
     95a:	03 c0       	rjmp	.+6      	; 0x962 <__vector_4+0x3c>
	//if: slow tick is already issued
	else
	{
		//ERR OVERRUN
		//The main application could not keep up with the previous slow tick. Raise the alarm
		report_error( Error_code::ERR_OVERRUN_FAST_TICK );
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z12report_error11_Error_code>
	//	Slow tick meant to handle slow services like LEDs
	
	//Prescaler
	static uint16_t pre_slow = 0;	
	//If: Tick
	if (pre_slow == 0)
     962:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <_ZZ10__vector_4E8pre_slow>
     966:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <_ZZ10__vector_4E8pre_slow+0x1>
     96a:	89 2b       	or	r24, r25
     96c:	69 f4       	brne	.+26     	; 0x988 <__vector_4+0x62>
	{
		//if: tick is not issued
		if (g_isr_flags.slow_tick == false)
     96e:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     972:	81 fd       	sbrc	r24, 1
     974:	06 c0       	rjmp	.+12     	; 0x982 <__vector_4+0x5c>
		{
			//Issue a tick
			g_isr_flags.slow_tick = true;	
     976:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     97a:	82 60       	ori	r24, 0x02	; 2
     97c:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <g_isr_flags>
     980:	03 c0       	rjmp	.+6      	; 0x988 <__vector_4+0x62>
		//if: tick is already issued
		else
		{
			//ERR OVERRUN
			//The main application could not keep up with the previous slow tick. Raise the alarm
			report_error( Error_code::ERR_OVERRUN_SLOW_TICK );
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z12report_error11_Error_code>
		}
		
	}
	//Increment, reset if counter is top before increment
	pre_slow = AT_TOP_INC( pre_slow, Prescaler::TOP_SLOW_TICK-1 );
     988:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <_ZZ10__vector_4E8pre_slow>
     98c:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <_ZZ10__vector_4E8pre_slow+0x1>
     990:	87 3e       	cpi	r24, 0xE7	; 231
     992:	23 e0       	ldi	r18, 0x03	; 3
     994:	92 07       	cpc	r25, r18
     996:	11 f0       	breq	.+4      	; 0x99c <__vector_4+0x76>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__vector_4+0x7a>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <_ZZ10__vector_4E8pre_slow>
     9a4:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <_ZZ10__vector_4E8pre_slow+0x1>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	RTC.PITINTFLAGS = RTC_PI_bm;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <__vector_17>:
//! @details
//! \n initialize clock systems
/***************************************************************************/

ISR( USART0_RXC_vect )
{
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	
	//Execute the UART handler RX
	bool u1_fail = gcl_uart0.isr_rx_exe();
     9f2:	84 e1       	ldi	r24, 0x14	; 20
     9f4:	99 e2       	ldi	r25, 0x29	; 41
     9f6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN4User4Uart10isr_rx_exeEv>
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
}	//End ISR: USART0_RXC_vect
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <__vector_7>:
//! \n	>Last Servo Done: set PER to the time needed to do 20ms
//! \n	>Other Servo: Set OCR of said servo
/***************************************************************************/

ISR( TCA0_OVF_vect )
{
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	4f 93       	push	r20
     a2c:	5f 93       	push	r21
     a2e:	6f 93       	push	r22
     a30:	7f 93       	push	r23
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	af 93       	push	r26
     a38:	bf 93       	push	r27
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------
	
	//Execute the servo driver ISR
	gc_servo.hal_timer_isr();
     a3e:	81 e3       	ldi	r24, 0x31	; 49
     a40:	98 e2       	ldi	r25, 0x28	; 40
     a42:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN9OrangeBot5Servo13hal_timer_isrEv>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
}
     a4c:	ff 91       	pop	r31
     a4e:	ef 91       	pop	r30
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti

00000a6e <__vector_22>:
//! \n	Result from ADC

/***************************************************************************/

ISR( ADC0_RESRDY_vect )
{
     a6e:	1f 92       	push	r1
     a70:	0f 92       	push	r0
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	0f 92       	push	r0
     a76:	11 24       	eor	r1, r1
     a78:	2f 93       	push	r18
     a7a:	3f 93       	push	r19
     a7c:	4f 93       	push	r20
     a7e:	5f 93       	push	r21
     a80:	6f 93       	push	r22
     a82:	7f 93       	push	r23
     a84:	8f 93       	push	r24
     a86:	9f 93       	push	r25
     a88:	af 93       	push	r26
     a8a:	bf 93       	push	r27
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------
	
	//Fetch conversion result
	uint16_t u16_res = ADC0.RES;
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d6 e0       	ldi	r29, 0x06	; 6
     a98:	68 89       	ldd	r22, Y+16	; 0x10
     a9a:	79 89       	ldd	r23, Y+17	; 0x11
	//Ask the driver to handle the result and set up ADC for next conversion if needed
	gcl_adc.isr_call( u16_res );
     a9c:	83 e5       	ldi	r24, 0x53	; 83
     a9e:	99 e2       	ldi	r25, 0x29	; 41
     aa0:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN4User3Adc8isr_callEj>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag. writing one clears the flag, writing zero has no effect.
	ADC0.INTFLAGS = ADC_RESRDY_bm;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	8b 87       	std	Y+11, r24	; 0x0b
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <_Z41__static_initialization_and_destruction_0ii>:
//! @return bool | false = OK | true = FAIL
//! @details
/***************************************************************************/

void function_template( void )
{
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
     ad8:	8b 01       	movw	r16, r22
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	99 f4       	brne	.+38     	; 0xb04 <_Z41__static_initialization_and_destruction_0ii+0x36>
     ade:	6f 3f       	cpi	r22, 0xFF	; 255
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	81 f4       	brne	.+32     	; 0xb04 <_Z41__static_initialization_and_destruction_0ii+0x36>
     ae4:	83 e5       	ldi	r24, 0x53	; 83
     ae6:	99 e2       	ldi	r25, 0x29	; 41
     ae8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN4User3AdcC1Ev>
     aec:	84 e1       	ldi	r24, 0x14	; 20
     aee:	99 e2       	ldi	r25, 0x29	; 41
     af0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <_ZN4User4UartC1Ev>
     af4:	8f e9       	ldi	r24, 0x9F	; 159
     af6:	98 e2       	ldi	r25, 0x28	; 40
     af8:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN9Orangebot9UniparserC1Ev>
     afc:	81 e3       	ldi	r24, 0x31	; 49
     afe:	98 e2       	ldi	r25, 0x28	; 40
     b00:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN9OrangeBot5ServoC1Ev>
     b04:	cd 2b       	or	r28, r29
     b06:	99 f4       	brne	.+38     	; 0xb2e <_Z41__static_initialization_and_destruction_0ii+0x60>
     b08:	0f 3f       	cpi	r16, 0xFF	; 255
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	81 f4       	brne	.+32     	; 0xb2e <_Z41__static_initialization_and_destruction_0ii+0x60>
     b0e:	81 e3       	ldi	r24, 0x31	; 49
     b10:	98 e2       	ldi	r25, 0x28	; 40
     b12:	0e 94 6f 07 	call	0xede	; 0xede <_ZN9OrangeBot5ServoD1Ev>
     b16:	8f e9       	ldi	r24, 0x9F	; 159
     b18:	98 e2       	ldi	r25, 0x28	; 40
     b1a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <_ZN9Orangebot9UniparserD1Ev>
     b1e:	84 e1       	ldi	r24, 0x14	; 20
     b20:	99 e2       	ldi	r25, 0x29	; 41
     b22:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN4User4UartD1Ev>
     b26:	83 e5       	ldi	r24, 0x53	; 83
     b28:	99 e2       	ldi	r25, 0x29	; 41
     b2a:	0e 94 84 00 	call	0x108	; 0x108 <_ZN4User3AdcD1Ev>
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <_Z12report_error11_Error_code>:
     b38:	90 91 57 29 	lds	r25, 0x2957	; 0x802957 <ge_error_code>
     b3c:	91 11       	cpse	r25, r1
     b3e:	80 93 57 29 	sts	0x2957, r24	; 0x802957 <ge_error_code>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret

00000b46 <main>:
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	c4 57       	subi	r28, 0x74	; 116
     b50:	d1 09       	sbc	r29, r1
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0e 94 8c 04 	call	0x918	; 0x918 <_Z4initv>
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN4User3AdcC1Ev>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	80 93 53 29 	sts	0x2953, r24	; 0x802953 <gcl_adc>
     b6a:	90 93 54 29 	sts	0x2954, r25	; 0x802954 <gcl_adc+0x1>
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	80 93 55 29 	sts	0x2955, r24	; 0x802955 <gcl_adc+0x2>
     b76:	90 93 56 29 	sts	0x2956, r25	; 0x802956 <gcl_adc+0x3>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 84 00 	call	0x108	; 0x108 <_ZN4User3AdcD1Ev>
     b82:	ce 01       	movw	r24, r28
     b84:	05 96       	adiw	r24, 0x05	; 5
     b86:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <_ZN4User4UartC1Ev>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	fe 01       	movw	r30, r28
     b8e:	35 96       	adiw	r30, 0x05	; 5
     b90:	a4 e1       	ldi	r26, 0x14	; 20
     b92:	b9 e2       	ldi	r27, 0x29	; 41
     b94:	01 90       	ld	r0, Z+
     b96:	0d 92       	st	X+, r0
     b98:	8a 95       	dec	r24
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0x4e>
     b9c:	ce 01       	movw	r24, r28
     b9e:	05 96       	adiw	r24, 0x05	; 5
     ba0:	0e 94 cf 0c 	call	0x199e	; 0x199e <_ZN4User4UartD1Ev>
     ba4:	8f e9       	ldi	r24, 0x9F	; 159
     ba6:	98 e2       	ldi	r25, 0x28	; 40
     ba8:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z20init_parser_commandsRN9Orangebot9UniparserE>
     bac:	88 23       	and	r24, r24
     bae:	19 f0       	breq	.+6      	; 0xbb6 <main+0x70>
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z12report_error11_Error_code>
     bb6:	ce 01       	movw	r24, r28
     bb8:	05 96       	adiw	r24, 0x05	; 5
     bba:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN9OrangeBot5ServoC1Ev>
     bbe:	8e e6       	ldi	r24, 0x6E	; 110
     bc0:	fe 01       	movw	r30, r28
     bc2:	35 96       	adiw	r30, 0x05	; 5
     bc4:	a1 e3       	ldi	r26, 0x31	; 49
     bc6:	b8 e2       	ldi	r27, 0x28	; 40
     bc8:	01 90       	ld	r0, Z+
     bca:	0d 92       	st	X+, r0
     bcc:	8a 95       	dec	r24
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <main+0x82>
     bd0:	ce 01       	movw	r24, r28
     bd2:	05 96       	adiw	r24, 0x05	; 5
     bd4:	0e 94 6f 07 	call	0xede	; 0xede <_ZN9OrangeBot5ServoD1Ev>
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	81 e3       	ldi	r24, 0x31	; 49
     bdc:	98 e2       	ldi	r25, 0x28	; 40
     bde:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN9OrangeBot5Servo5powerEb>
     be2:	78 94       	sei
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 45 1b 	call	0x368a	; 0x368a <srand>
     bec:	e0 e0       	ldi	r30, 0x00	; 0
     bee:	f4 e0       	ldi	r31, 0x04	; 4
     bf0:	84 81       	ldd	r24, Z+4	; 0x04
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	84 83       	std	Z+4, r24	; 0x04
     bf6:	2f e7       	ldi	r18, 0x7F	; 127
     bf8:	34 e8       	ldi	r19, 0x84	; 132
     bfa:	8e e1       	ldi	r24, 0x1E	; 30
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	30 40       	sbci	r19, 0x00	; 0
     c00:	80 40       	sbci	r24, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <main+0xb6>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <main+0xc0>
     c06:	00 00       	nop
     c08:	84 81       	ldd	r24, Z+4	; 0x04
     c0a:	8f 77       	andi	r24, 0x7F	; 127
     c0c:	84 83       	std	Z+4, r24	; 0x04
     c0e:	9f e7       	ldi	r25, 0x7F	; 127
     c10:	24 e8       	ldi	r18, 0x84	; 132
     c12:	3e e1       	ldi	r19, 0x1E	; 30
     c14:	91 50       	subi	r25, 0x01	; 1
     c16:	20 40       	sbci	r18, 0x00	; 0
     c18:	30 40       	sbci	r19, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <main+0xce>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0xd8>
     c1e:	00 00       	nop
     c20:	0e 94 1b 01 	call	0x236	; 0x236 <_Z8lcd_initv>
     c24:	62 e4       	ldi	r22, 0x42	; 66
     c26:	77 e7       	ldi	r23, 0x77	; 119
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z13lcd_print_strhPKc>
     c2e:	67 e4       	ldi	r22, 0x47	; 71
     c30:	77 e7       	ldi	r23, 0x77	; 119
     c32:	80 e1       	ldi	r24, 0x10	; 16
     c34:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z13lcd_print_strhPKc>
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     c40:	80 ff       	sbrs	r24, 0
     c42:	24 c0       	rjmp	.+72     	; 0xc8c <main+0x146>
     c44:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <g_isr_flags>
     c4e:	e0 e4       	ldi	r30, 0x40	; 64
     c50:	f4 e0       	ldi	r31, 0x04	; 4
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f4408>
     c58:	98 2f       	mov	r25, r24
     c5a:	90 74       	andi	r25, 0x40	; 64
     c5c:	89 2f       	mov	r24, r25
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	08 2e       	mov	r0, r24
     c62:	89 2f       	mov	r24, r25
     c64:	00 0c       	add	r0, r0
     c66:	88 1f       	adc	r24, r24
     c68:	99 0b       	sbc	r25, r25
     c6a:	00 0c       	add	r0, r0
     c6c:	88 1f       	adc	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	82 95       	swap	r24
     c76:	92 95       	swap	r25
     c78:	90 7f       	andi	r25, 0xF0	; 240
     c7a:	98 27       	eor	r25, r24
     c7c:	80 7f       	andi	r24, 0xF0	; 240
     c7e:	98 27       	eor	r25, r24
     c80:	92 2f       	mov	r25, r18
     c82:	9f 7d       	andi	r25, 0xDF	; 223
     c84:	89 2b       	or	r24, r25
     c86:	84 83       	std	Z+4, r24	; 0x04
     c88:	0e 94 41 01 	call	0x282	; 0x282 <_Z10lcd_updatev>
     c8c:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     c90:	81 ff       	sbrs	r24, 1
     c92:	72 c0       	rjmp	.+228    	; 0xd78 <main+0x232>
     c94:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <g_isr_flags>
     c98:	8d 7f       	andi	r24, 0xFD	; 253
     c9a:	80 93 58 29 	sts	0x2958, r24	; 0x802958 <g_isr_flags>
     c9e:	80 91 59 29 	lds	r24, 0x2959	; 0x802959 <g_uart_timeout_cnt>
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	80 93 59 29 	sts	0x2959, r24	; 0x802959 <g_uart_timeout_cnt>
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	90 f0       	brcs	.+36     	; 0xcd0 <main+0x18a>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	81 e3       	ldi	r24, 0x31	; 49
     cb8:	98 e2       	ldi	r25, 0x28	; 40
     cba:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN9OrangeBot5Servo9set_servoEhij>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	81 e3       	ldi	r24, 0x31	; 49
     cca:	98 e2       	ldi	r25, 0x28	; 40
     ccc:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN9OrangeBot5Servo9set_servoEhij>
     cd0:	80 e1       	ldi	r24, 0x10	; 16
     cd2:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7f4447>
     cd6:	0f 5f       	subi	r16, 0xFF	; 255
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	e0 e0       	ldi	r30, 0x00	; 0
     cdc:	f6 e0       	ldi	r31, 0x06	; 6
     cde:	80 85       	ldd	r24, Z+8	; 0x08
     ce0:	81 60       	ori	r24, 0x01	; 1
     ce2:	80 87       	std	Z+8, r24	; 0x08
     ce4:	be 01       	movw	r22, r28
     ce6:	6d 58       	subi	r22, 0x8D	; 141
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	83 e5       	ldi	r24, 0x53	; 83
     cec:	99 e2       	ldi	r25, 0x29	; 41
     cee:	0e 94 85 00 	call	0x10a	; 0x10a <_ZN4User3Adc10get_resultERj>
     cf2:	81 11       	cpse	r24, r1
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <main+0x1be>
     cf6:	e5 96       	adiw	r28, 0x35	; 53
     cf8:	6e ad       	ldd	r22, Y+62	; 0x3e
     cfa:	7f ad       	ldd	r23, Y+63	; 0x3f
     cfc:	e5 97       	sbiw	r28, 0x35	; 53
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z13lcd_print_u16hj>
     d04:	98 01       	movw	r18, r16
     d06:	ad ec       	ldi	r26, 0xCD	; 205
     d08:	bc ec       	ldi	r27, 0xCC	; 204
     d0a:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__umulhisi3>
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	bc 01       	movw	r22, r24
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	86 0f       	add	r24, r22
     d2e:	97 1f       	adc	r25, r23
     d30:	28 1b       	sub	r18, r24
     d32:	39 0b       	sbc	r19, r25
     d34:	60 e3       	ldi	r22, 0x30	; 48
     d36:	62 0f       	add	r22, r18
     d38:	84 e1       	ldi	r24, 0x14	; 20
     d3a:	99 e2       	ldi	r25, 0x29	; 41
     d3c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     d40:	be 01       	movw	r22, r28
     d42:	6b 5f       	subi	r22, 0xFB	; 251
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	84 e1       	ldi	r24, 0x14	; 20
     d48:	99 e2       	ldi	r25, 0x29	; 41
     d4a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN4User4Uart14get_counter_txERj>
     d4e:	81 11       	cpse	r24, r1
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <main+0x216>
     d52:	6d 81       	ldd	r22, Y+5	; 0x05
     d54:	7e 81       	ldd	r23, Y+6	; 0x06
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z13lcd_print_u16hj>
     d5c:	be 01       	movw	r22, r28
     d5e:	6b 5f       	subi	r22, 0xFB	; 251
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	84 e1       	ldi	r24, 0x14	; 20
     d64:	99 e2       	ldi	r25, 0x29	; 41
     d66:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN4User4Uart14get_counter_rxERj>
     d6a:	81 11       	cpse	r24, r1
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <main+0x232>
     d6e:	6d 81       	ldd	r22, Y+5	; 0x05
     d70:	7e 81       	ldd	r23, Y+6	; 0x06
     d72:	83 e1       	ldi	r24, 0x13	; 19
     d74:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z13lcd_print_u16hj>
     d78:	be 01       	movw	r22, r28
     d7a:	6b 5f       	subi	r22, 0xFB	; 251
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	84 e1       	ldi	r24, 0x14	; 20
     d80:	99 e2       	ldi	r25, 0x29	; 41
     d82:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN4User4Uart7receiveERh>
     d86:	81 11       	cpse	r24, r1
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <main+0x24e>
     d8a:	6d 81       	ldd	r22, Y+5	; 0x05
     d8c:	8f e9       	ldi	r24, 0x9F	; 159
     d8e:	98 e2       	ldi	r25, 0x28	; 40
     d90:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN9Orangebot9Uniparser5parseEh>
     d94:	84 e1       	ldi	r24, 0x14	; 20
     d96:	99 e2       	ldi	r25, 0x29	; 41
     d98:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN4User4Uart6updateEv>
     d9c:	4f cf       	rjmp	.-354    	; 0xc3c <main+0xf6>

00000d9e <_GLOBAL__sub_I_g_isr_flags>:
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return;
}	//End function:
     d9e:	6f ef       	ldi	r22, 0xFF	; 255
     da0:	7f ef       	ldi	r23, 0xFF	; 255
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 67 05 	call	0xace	; 0xace <_Z41__static_initialization_and_destruction_0ii>
     daa:	08 95       	ret

00000dac <_GLOBAL__sub_D_g_isr_flags>:
     dac:	6f ef       	ldi	r22, 0xFF	; 255
     dae:	7f ef       	ldi	r23, 0xFF	; 255
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 67 05 	call	0xace	; 0xace <_Z41__static_initialization_and_destruction_0ii>
     db8:	08 95       	ret

00000dba <_Z12ping_handlerv>:
	"bst	%D2, 7	\n\t"
	"bld	%D0, 7	"
	: "=r" (__x)
	: "0" (__x), "r" (__y) );
    return __x;
}
     dba:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <g_uart_timeout_cnt>
     dbe:	60 e5       	ldi	r22, 0x50	; 80
     dc0:	84 e1       	ldi	r24, 0x14	; 20
     dc2:	99 e2       	ldi	r25, 0x29	; 41
     dc4:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	84 e1       	ldi	r24, 0x14	; 20
     dcc:	99 e2       	ldi	r25, 0x29	; 41
     dce:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     dd2:	08 95       	ret

00000dd4 <_Z22send_signature_handlerv>:
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <_Z22send_signature_handlerv+0xc>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <_Z22send_signature_handlerv+0xe>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <g_uart_timeout_cnt>
     dea:	60 e2       	ldi	r22, 0x20	; 32
     dec:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <g_board_sign>
     df0:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <g_board_sign+0x1>
     df4:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN4User9String_uc10str_lengthEPhh>
     df8:	08 2f       	mov	r16, r24
     dfa:	81 32       	cpi	r24, 0x21	; 33
     dfc:	20 f0       	brcs	.+8      	; 0xe06 <_Z22send_signature_handlerv+0x32>
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z12report_error11_Error_code>
     e04:	35 c0       	rjmp	.+106    	; 0xe70 <_Z22send_signature_handlerv+0x9c>
     e06:	be 01       	movw	r22, r28
     e08:	6f 5f       	subi	r22, 0xFF	; 255
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	0e 94 8e 0c 	call	0x191c	; 0x191c <_ZN4User9String_uc9to_stringIhEEhT_Ph>
     e10:	f8 2e       	mov	r15, r24
     e12:	66 e4       	ldi	r22, 0x46	; 70
     e14:	84 e1       	ldi	r24, 0x14	; 20
     e16:	99 e2       	ldi	r25, 0x29	; 41
     e18:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	1f 15       	cp	r17, r15
     e20:	68 f4       	brcc	.+26     	; 0xe3c <_Z22send_signature_handlerv+0x68>
     e22:	e1 e0       	ldi	r30, 0x01	; 1
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ec 0f       	add	r30, r28
     e28:	fd 1f       	adc	r31, r29
     e2a:	e1 0f       	add	r30, r17
     e2c:	f1 1d       	adc	r31, r1
     e2e:	60 81       	ld	r22, Z
     e30:	84 e1       	ldi	r24, 0x14	; 20
     e32:	99 e2       	ldi	r25, 0x29	; 41
     e34:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     e38:	1f 5f       	subi	r17, 0xFF	; 255
     e3a:	f1 cf       	rjmp	.-30     	; 0xe1e <_Z22send_signature_handlerv+0x4a>
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	84 e1       	ldi	r24, 0x14	; 20
     e40:	99 e2       	ldi	r25, 0x29	; 41
     e42:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	10 17       	cp	r17, r16
     e4a:	68 f4       	brcc	.+26     	; 0xe66 <_Z22send_signature_handlerv+0x92>
     e4c:	e0 91 04 28 	lds	r30, 0x2804	; 0x802804 <g_board_sign>
     e50:	f0 91 05 28 	lds	r31, 0x2805	; 0x802805 <g_board_sign+0x1>
     e54:	e1 0f       	add	r30, r17
     e56:	f1 1d       	adc	r31, r1
     e58:	60 81       	ld	r22, Z
     e5a:	84 e1       	ldi	r24, 0x14	; 20
     e5c:	99 e2       	ldi	r25, 0x29	; 41
     e5e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     e62:	1f 5f       	subi	r17, 0xFF	; 255
     e64:	f1 cf       	rjmp	.-30     	; 0xe48 <_Z22send_signature_handlerv+0x74>
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	84 e1       	ldi	r24, 0x14	; 20
     e6a:	99 e2       	ldi	r25, 0x29	; 41
     e6c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN4User4Uart4sendEh>
     e70:	24 96       	adiw	r28, 0x04	; 4
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	08 95       	ret

00000e82 <_Z13set_servo_ppmhii>:
     e82:	9a 01       	movw	r18, r20
     e84:	10 92 59 29 	sts	0x2959, r1	; 0x802959 <g_uart_timeout_cnt>
     e88:	ab 01       	movw	r20, r22
     e8a:	68 2f       	mov	r22, r24
     e8c:	81 e3       	ldi	r24, 0x31	; 49
     e8e:	98 e2       	ldi	r25, 0x28	; 40
     e90:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN9OrangeBot5Servo9set_servoEhij>
     e94:	88 23       	and	r24, r24
     e96:	19 f0       	breq	.+6      	; 0xe9e <_Z13set_servo_ppmhii+0x1c>
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z12report_error11_Error_code>
     e9e:	08 95       	ret

00000ea0 <_Z20init_parser_commandsRN9Orangebot9UniparserE>:
//! @brief
//! @details
/***************************************************************************/

bool init_parser_commands( Orangebot::Uniparser &parser_tmp )
{
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	8c 01       	movw	r16, r24
	//	BODY
	//----------------------------------------------------------------

	//! Register commands and handler for the universal parser class. A masterpiece :')
	//Register ping command. It's used to reset the communication timeout
	f_ret = parser_tmp.add_cmd( "P", (void *)&ping_handler );
     ea8:	4d ed       	ldi	r20, 0xDD	; 221
     eaa:	56 e0       	ldi	r21, 0x06	; 6
     eac:	6c e4       	ldi	r22, 0x4C	; 76
     eae:	77 e7       	ldi	r23, 0x77	; 119
     eb0:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>
     eb4:	c8 2f       	mov	r28, r24
	//Register the Find command. Board answers with board signature
	f_ret |= parser_tmp.add_cmd( "F", (void *)&send_signature_handler );
     eb6:	4a ee       	ldi	r20, 0xEA	; 234
     eb8:	56 e0       	ldi	r21, 0x06	; 6
     eba:	6e e4       	ldi	r22, 0x4E	; 78
     ebc:	77 e7       	ldi	r23, 0x77	; 119
     ebe:	c8 01       	movw	r24, r16
     ec0:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>
     ec4:	c8 2b       	or	r28, r24
	//Platform set PPM command
	f_ret |= parser_tmp.add_cmd( "PPM%u:%S:%S", (void *)&set_servo_ppm );
     ec6:	41 e4       	ldi	r20, 0x41	; 65
     ec8:	57 e0       	ldi	r21, 0x07	; 7
     eca:	60 e5       	ldi	r22, 0x50	; 80
     ecc:	77 e7       	ldi	r23, 0x77	; 119
     ece:	c8 01       	movw	r24, r16
     ed0:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return f_ret;
}	//End function: init_parser_commands | Orangebot::Uniparser &
     ed4:	8c 2b       	or	r24, r28
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <_ZN9OrangeBot5ServoD1Ev>:
    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return true;    //FAIL
}   //end private method: error_recovery | void |
     ede:	08 95       	ret

00000ee0 <_ZN9OrangeBot5Servo11hal_init_ioEv>:
     ee0:	e0 e6       	ldi	r30, 0x60	; 96
     ee2:	f4 e0       	ldi	r31, 0x04	; 4
     ee4:	80 81       	ld	r24, Z
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	80 83       	st	Z, r24
     eea:	e0 e8       	ldi	r30, 0x80	; 128
     eec:	f4 e0       	ldi	r31, 0x04	; 4
     eee:	80 81       	ld	r24, Z
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 83       	st	Z, r24
     ef4:	80 81       	ld	r24, Z
     ef6:	82 60       	ori	r24, 0x02	; 2
     ef8:	80 83       	st	Z, r24
     efa:	80 81       	ld	r24, Z
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	80 83       	st	Z, r24
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	80 83       	st	Z, r24
     f06:	e0 ea       	ldi	r30, 0xA0	; 160
     f08:	f4 e0       	ldi	r31, 0x04	; 4
     f0a:	80 81       	ld	r24, Z
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 83       	st	Z, r24
     f10:	80 81       	ld	r24, Z
     f12:	82 60       	ori	r24, 0x02	; 2
     f14:	80 83       	st	Z, r24
     f16:	80 81       	ld	r24, Z
     f18:	84 60       	ori	r24, 0x04	; 4
     f1a:	80 83       	st	Z, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	88 60       	ori	r24, 0x08	; 8
     f20:	80 83       	st	Z, r24
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <_ZN9OrangeBot5Servo25hal_init_ta0_timeout_modeEj>:
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	e0 e0       	ldi	r30, 0x00	; 0
     f2e:	fa e0       	ldi	r31, 0x0A	; 10
     f30:	80 81       	ld	r24, Z
     f32:	31 81       	ldd	r19, Z+1	; 0x01
     f34:	12 81       	ldd	r17, Z+2	; 0x02
     f36:	d3 81       	ldd	r29, Z+3	; 0x03
     f38:	c5 81       	ldd	r28, Z+5	; 0x05
     f3a:	26 85       	ldd	r18, Z+14	; 0x0e
     f3c:	a0 ee       	ldi	r26, 0xE0	; 224
     f3e:	b5 e0       	ldi	r27, 0x05	; 5
     f40:	14 96       	adiw	r26, 0x04	; 4
     f42:	5c 91       	ld	r21, X
     f44:	14 97       	sbiw	r26, 0x04	; 4
     f46:	41 85       	ldd	r20, Z+9	; 0x09
     f48:	92 85       	ldd	r25, Z+10	; 0x0a
     f4a:	81 7f       	andi	r24, 0xF1	; 241
     f4c:	88 60       	ori	r24, 0x08	; 8
     f4e:	38 7f       	andi	r19, 0xF8	; 248
     f50:	91 60       	ori	r25, 0x01	; 1
     f52:	21 60       	ori	r18, 0x01	; 1
     f54:	31 83       	std	Z+1, r19	; 0x01
     f56:	12 83       	std	Z+2, r17	; 0x02
     f58:	d3 83       	std	Z+3, r29	; 0x03
     f5a:	c5 83       	std	Z+5, r28	; 0x05
     f5c:	26 87       	std	Z+14, r18	; 0x0e
     f5e:	14 96       	adiw	r26, 0x04	; 4
     f60:	5c 93       	st	X, r21
     f62:	66 a3       	std	Z+38, r22	; 0x26
     f64:	77 a3       	std	Z+39, r23	; 0x27
     f66:	10 a6       	std	Z+40, r1	; 0x28
     f68:	11 a6       	std	Z+41, r1	; 0x29
     f6a:	12 a6       	std	Z+42, r1	; 0x2a
     f6c:	13 a6       	std	Z+43, r1	; 0x2b
     f6e:	14 a6       	std	Z+44, r1	; 0x2c
     f70:	15 a6       	std	Z+45, r1	; 0x2d
     f72:	80 83       	st	Z, r24
     f74:	41 87       	std	Z+9, r20	; 0x09
     f76:	92 87       	std	Z+10, r25	; 0x0a
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	08 95       	ret

00000f82 <_ZN9OrangeBot5Servo12hal_delay_usEv>:
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	8a 95       	dec	r24
     f86:	f1 f7       	brne	.-4      	; 0xf84 <_ZN9OrangeBot5Servo12hal_delay_usEv+0x2>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <_ZN9OrangeBot5Servo12hal_delay_usEv+0x8>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	08 95       	ret

00000f8e <_ZN9OrangeBot5Servo9hal_powerEb>:
     f8e:	61 11       	cpse	r22, r1
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <_ZN9OrangeBot5Servo9hal_powerEb+0x10>
     f92:	e0 e6       	ldi	r30, 0x60	; 96
     f94:	f4 e0       	ldi	r31, 0x04	; 4
     f96:	84 81       	ldd	r24, Z+4	; 0x04
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	84 83       	std	Z+4, r24	; 0x04
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <_ZN9OrangeBot5Servo9hal_powerEb+0x1a>
     f9e:	e0 e6       	ldi	r30, 0x60	; 96
     fa0:	f4 e0       	ldi	r31, 0x04	; 4
     fa2:	84 81       	ldd	r24, Z+4	; 0x04
     fa4:	8f 77       	andi	r24, 0x7F	; 127
     fa6:	84 83       	std	Z+4, r24	; 0x04
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret

00000fac <_ZN9OrangeBot5Servo11hal_run_isrEb>:
     fac:	61 11       	cpse	r22, r1
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <_ZN9OrangeBot5Servo11hal_run_isrEb+0x10>
     fb0:	e0 e0       	ldi	r30, 0x00	; 0
     fb2:	fa e0       	ldi	r31, 0x0A	; 10
     fb4:	80 81       	ld	r24, Z
     fb6:	8e 7f       	andi	r24, 0xFE	; 254
     fb8:	80 83       	st	Z, r24
     fba:	09 c0       	rjmp	.+18     	; 0xfce <_ZN9OrangeBot5Servo11hal_run_isrEb+0x22>
     fbc:	e0 e0       	ldi	r30, 0x00	; 0
     fbe:	fa e0       	ldi	r31, 0x0A	; 10
     fc0:	87 ea       	ldi	r24, 0xA7	; 167
     fc2:	91 e6       	ldi	r25, 0x61	; 97
     fc4:	86 a3       	std	Z+38, r24	; 0x26
     fc6:	97 a3       	std	Z+39, r25	; 0x27
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	80 83       	st	Z, r24
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	08 95       	ret

00000fd2 <_ZN9OrangeBot5Servo15init_class_varsEv>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	2d 97       	sbiw	r28, 0x0d	; 13
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	fc 01       	movw	r30, r24
     fe2:	10 82       	st	Z, r1
     fe4:	e7 59       	subi	r30, 0x97	; 151
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	10 82       	st	Z, r1
     fea:	11 82       	std	Z+1, r1	; 0x01
     fec:	19 82       	std	Y+1, r1	; 0x01
     fee:	1a 82       	std	Y+2, r1	; 0x02
     ff0:	1b 82       	std	Y+3, r1	; 0x03
     ff2:	1c 82       	std	Y+4, r1	; 0x04
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	2d 83       	std	Y+5, r18	; 0x05
     ff8:	2e 83       	std	Y+6, r18	; 0x06
     ffa:	18 86       	std	Y+8, r1	; 0x08
     ffc:	1f 82       	std	Y+7, r1	; 0x07
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	28 30       	cpi	r18, 0x08	; 8
    1002:	a0 f4       	brcc	.+40     	; 0x102c <_ZN9OrangeBot5Servo15init_class_varsEv+0x5a>
    1004:	a2 2f       	mov	r26, r18
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	aa 0f       	add	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	aa 0f       	add	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	aa 0f       	add	r26, r26
    1012:	bb 1f       	adc	r27, r27
    1014:	a8 0f       	add	r26, r24
    1016:	b9 1f       	adc	r27, r25
    1018:	11 96       	adiw	r26, 0x01	; 1
    101a:	38 e0       	ldi	r19, 0x08	; 8
    101c:	fe 01       	movw	r30, r28
    101e:	31 96       	adiw	r30, 0x01	; 1
    1020:	01 90       	ld	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	3a 95       	dec	r19
    1026:	e1 f7       	brne	.-8      	; 0x1020 <_ZN9OrangeBot5Servo15init_class_varsEv+0x4e>
    1028:	2f 5f       	subi	r18, 0xFF	; 255
    102a:	ea cf       	rjmp	.-44     	; 0x1000 <_ZN9OrangeBot5Servo15init_class_varsEv+0x2e>
    102c:	19 86       	std	Y+9, r1	; 0x09
    102e:	1a 86       	std	Y+10, r1	; 0x0a
    1030:	1b 86       	std	Y+11, r1	; 0x0b
    1032:	2c ed       	ldi	r18, 0xDC	; 220
    1034:	35 e0       	ldi	r19, 0x05	; 5
    1036:	2c 87       	std	Y+12, r18	; 0x0c
    1038:	3d 87       	std	Y+13, r19	; 0x0d
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	48 30       	cpi	r20, 0x08	; 8
    103e:	b0 f4       	brcc	.+44     	; 0x106c <_ZN9OrangeBot5Servo15init_class_varsEv+0x9a>
    1040:	24 2f       	mov	r18, r20
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	d9 01       	movw	r26, r18
    1046:	aa 0f       	add	r26, r26
    1048:	bb 1f       	adc	r27, r27
    104a:	aa 0f       	add	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	a2 0f       	add	r26, r18
    1050:	b3 1f       	adc	r27, r19
    1052:	a8 0f       	add	r26, r24
    1054:	b9 1f       	adc	r27, r25
    1056:	af 5b       	subi	r26, 0xBF	; 191
    1058:	bf 4f       	sbci	r27, 0xFF	; 255
    105a:	25 e0       	ldi	r18, 0x05	; 5
    105c:	fe 01       	movw	r30, r28
    105e:	39 96       	adiw	r30, 0x09	; 9
    1060:	01 90       	ld	r0, Z+
    1062:	0d 92       	st	X+, r0
    1064:	2a 95       	dec	r18
    1066:	e1 f7       	brne	.-8      	; 0x1060 <_ZN9OrangeBot5Servo15init_class_varsEv+0x8e>
    1068:	4f 5f       	subi	r20, 0xFF	; 255
    106a:	e8 cf       	rjmp	.-48     	; 0x103c <_ZN9OrangeBot5Servo15init_class_varsEv+0x6a>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	2d 96       	adiw	r28, 0x0d	; 13
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>:
    107a:	fc 01       	movw	r30, r24
    107c:	e5 59       	subi	r30, 0x95	; 149
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	20 81       	ld	r18, Z
    1082:	21 11       	cpse	r18, r1
    1084:	04 c0       	rjmp	.+8      	; 0x108e <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj+0x14>
    1086:	60 83       	st	Z, r22
    1088:	31 96       	adiw	r30, 0x01	; 1
    108a:	40 83       	st	Z, r20
    108c:	51 83       	std	Z+1, r21	; 0x01
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	08 95       	ret

00001092 <_ZN9OrangeBot5Servo9set_servoEhij>:
    1092:	68 30       	cpi	r22, 0x08	; 8
    1094:	38 f0       	brcs	.+14     	; 0x10a4 <_ZN9OrangeBot5Servo9set_servoEhij+0x12>
    1096:	44 ed       	ldi	r20, 0xD4	; 212
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	67 e0       	ldi	r22, 0x07	; 7
    109c:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	08 95       	ret
    10a4:	fa 01       	movw	r30, r20
    10a6:	e0 57       	subi	r30, 0x70	; 112
    10a8:	fe 4f       	sbci	r31, 0xFE	; 254
    10aa:	e1 32       	cpi	r30, 0x21	; 33
    10ac:	f3 40       	sbci	r31, 0x03	; 3
    10ae:	38 f0       	brcs	.+14     	; 0x10be <_ZN9OrangeBot5Servo9set_servoEhij+0x2c>
    10b0:	4a ed       	ldi	r20, 0xDA	; 218
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	67 e0       	ldi	r22, 0x07	; 7
    10b6:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	fb 01       	movw	r30, r22
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	e8 0f       	add	r30, r24
    10d0:	f9 1f       	adc	r31, r25
    10d2:	01 80       	ldd	r0, Z+1	; 0x01
    10d4:	f2 81       	ldd	r31, Z+2	; 0x02
    10d6:	e0 2d       	mov	r30, r0
    10d8:	4e 17       	cp	r20, r30
    10da:	5f 07       	cpc	r21, r31
    10dc:	69 f0       	breq	.+26     	; 0x10f8 <_ZN9OrangeBot5Servo9set_servoEhij+0x66>
    10de:	fb 01       	movw	r30, r22
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	e8 0f       	add	r30, r24
    10ee:	f9 1f       	adc	r31, r25
    10f0:	41 83       	std	Z+1, r20	; 0x01
    10f2:	52 83       	std	Z+2, r21	; 0x02
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	45 83       	std	Z+5, r20	; 0x05
    10f8:	fb 01       	movw	r30, r22
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e8 0f       	add	r30, r24
    1108:	f9 1f       	adc	r31, r25
    110a:	43 81       	ldd	r20, Z+3	; 0x03
    110c:	54 81       	ldd	r21, Z+4	; 0x04
    110e:	42 17       	cp	r20, r18
    1110:	53 07       	cpc	r21, r19
    1112:	79 f0       	breq	.+30     	; 0x1132 <_ZN9OrangeBot5Servo9set_servoEhij+0xa0>
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	fc 01       	movw	r30, r24
    1122:	e6 0f       	add	r30, r22
    1124:	f7 1f       	adc	r31, r23
    1126:	23 83       	std	Z+3, r18	; 0x03
    1128:	34 83       	std	Z+4, r19	; 0x04
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	86 83       	std	Z+6, r24	; 0x06
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	08 95       	ret
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	08 95       	ret

00001136 <_ZN9OrangeBot5Servo4initEv>:
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	8c 01       	movw	r16, r24
    113e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN9OrangeBot5Servo15init_class_varsEv>
    1142:	c8 2f       	mov	r28, r24
    1144:	88 23       	and	r24, r24
    1146:	31 f0       	breq	.+12     	; 0x1154 <_ZN9OrangeBot5Servo4initEv+0x1e>
    1148:	49 e1       	ldi	r20, 0x19	; 25
    114a:	51 e0       	ldi	r21, 0x01	; 1
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN9OrangeBot5Servo11hal_init_ioEv>
    115a:	c8 2b       	or	r28, r24
    115c:	31 f0       	breq	.+12     	; 0x116a <_ZN9OrangeBot5Servo4initEv+0x34>
    115e:	40 e2       	ldi	r20, 0x20	; 32
    1160:	51 e0       	ldi	r21, 0x01	; 1
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	c8 01       	movw	r24, r16
    1166:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	c8 01       	movw	r24, r16
    1170:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN9OrangeBot5Servo25hal_init_ta0_timeout_modeEj>
    1174:	c8 2b       	or	r28, r24
    1176:	31 f0       	breq	.+12     	; 0x1184 <_ZN9OrangeBot5Servo4initEv+0x4e>
    1178:	47 e2       	ldi	r20, 0x27	; 39
    117a:	51 e0       	ldi	r21, 0x01	; 1
    117c:	63 e0       	ldi	r22, 0x03	; 3
    117e:	c8 01       	movw	r24, r16
    1180:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1184:	8c 2f       	mov	r24, r28
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret

0000118e <_ZN9OrangeBot5ServoC1Ev>:
    118e:	0e 94 9b 08 	call	0x1136	; 0x1136 <_ZN9OrangeBot5Servo4initEv>
    1192:	08 95       	ret

00001194 <_ZN9OrangeBot5Servo12hal_servo_ioEhb>:
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	06 2f       	mov	r16, r22
    119a:	10 e0       	ldi	r17, 0x00	; 0
    119c:	08 30       	cpi	r16, 0x08	; 8
    119e:	11 05       	cpc	r17, r1
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0x10>
    11a2:	63 c0       	rjmp	.+198    	; 0x126a <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xd6>
    11a4:	f8 01       	movw	r30, r16
    11a6:	e0 5b       	subi	r30, 0xB0	; 176
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__tablejump2__>
    11ae:	e0 e8       	ldi	r30, 0x80	; 128
    11b0:	f4 e0       	ldi	r31, 0x04	; 4
    11b2:	84 81       	ldd	r24, Z+4	; 0x04
    11b4:	8e 7f       	andi	r24, 0xFE	; 254
    11b6:	48 2b       	or	r20, r24
    11b8:	44 83       	std	Z+4, r20	; 0x04
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	5c c0       	rjmp	.+184    	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    11be:	e0 e8       	ldi	r30, 0x80	; 128
    11c0:	f4 e0       	ldi	r31, 0x04	; 4
    11c2:	84 81       	ldd	r24, Z+4	; 0x04
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	8d 7f       	andi	r24, 0xFD	; 253
    11cc:	48 2b       	or	r20, r24
    11ce:	44 83       	std	Z+4, r20	; 0x04
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	51 c0       	rjmp	.+162    	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    11d4:	e0 e8       	ldi	r30, 0x80	; 128
    11d6:	f4 e0       	ldi	r31, 0x04	; 4
    11d8:	84 81       	ldd	r24, Z+4	; 0x04
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	44 0f       	add	r20, r20
    11de:	55 1f       	adc	r21, r21
    11e0:	44 0f       	add	r20, r20
    11e2:	55 1f       	adc	r21, r21
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	48 2b       	or	r20, r24
    11e8:	44 83       	std	Z+4, r20	; 0x04
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	44 c0       	rjmp	.+136    	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	f4 e0       	ldi	r31, 0x04	; 4
    11f2:	84 81       	ldd	r24, Z+4	; 0x04
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	44 0f       	add	r20, r20
    11f8:	55 1f       	adc	r21, r21
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	87 7f       	andi	r24, 0xF7	; 247
    1204:	48 2b       	or	r20, r24
    1206:	44 83       	std	Z+4, r20	; 0x04
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	35 c0       	rjmp	.+106    	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    120c:	e0 ea       	ldi	r30, 0xA0	; 160
    120e:	f4 e0       	ldi	r31, 0x04	; 4
    1210:	84 81       	ldd	r24, Z+4	; 0x04
    1212:	8e 7f       	andi	r24, 0xFE	; 254
    1214:	48 2b       	or	r20, r24
    1216:	44 83       	std	Z+4, r20	; 0x04
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	2d c0       	rjmp	.+90     	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    121c:	e0 ea       	ldi	r30, 0xA0	; 160
    121e:	f4 e0       	ldi	r31, 0x04	; 4
    1220:	84 81       	ldd	r24, Z+4	; 0x04
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	44 0f       	add	r20, r20
    1226:	55 1f       	adc	r21, r21
    1228:	8d 7f       	andi	r24, 0xFD	; 253
    122a:	48 2b       	or	r20, r24
    122c:	44 83       	std	Z+4, r20	; 0x04
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	22 c0       	rjmp	.+68     	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1232:	e0 ea       	ldi	r30, 0xA0	; 160
    1234:	f4 e0       	ldi	r31, 0x04	; 4
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	44 0f       	add	r20, r20
    123c:	55 1f       	adc	r21, r21
    123e:	44 0f       	add	r20, r20
    1240:	55 1f       	adc	r21, r21
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	48 2b       	or	r20, r24
    1246:	44 83       	std	Z+4, r20	; 0x04
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	15 c0       	rjmp	.+42     	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    124c:	e0 ea       	ldi	r30, 0xA0	; 160
    124e:	f4 e0       	ldi	r31, 0x04	; 4
    1250:	84 81       	ldd	r24, Z+4	; 0x04
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	44 0f       	add	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	44 0f       	add	r20, r20
    125a:	55 1f       	adc	r21, r21
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	48 2b       	or	r20, r24
    1264:	44 83       	std	Z+4, r20	; 0x04
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    126a:	44 e9       	ldi	r20, 0x94	; 148
    126c:	51 e0       	ldi	r21, 0x01	; 1
    126e:	64 e0       	ldi	r22, 0x04	; 4
    1270:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj>:
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	9b 01       	movw	r18, r22
    1284:	a8 ee       	ldi	r26, 0xE8	; 232
    1286:	b3 e0       	ldi	r27, 0x03	; 3
    1288:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__umulhisi3>
    128c:	20 e2       	ldi	r18, 0x20	; 32
    128e:	33 e0       	ldi	r19, 0x03	; 3
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__udivmodsi4>
    1298:	2e 3f       	cpi	r18, 0xFE	; 254
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	38 07       	cpc	r19, r24
    129e:	41 05       	cpc	r20, r1
    12a0:	51 05       	cpc	r21, r1
    12a2:	48 f0       	brcs	.+18     	; 0x12b6 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj+0x3a>
    12a4:	ce 01       	movw	r24, r28
    12a6:	4c e6       	ldi	r20, 0x6C	; 108
    12a8:	53 e0       	ldi	r21, 0x03	; 3
    12aa:	66 e0       	ldi	r22, 0x06	; 6
    12ac:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	9f ef       	ldi	r25, 0xFF	; 255
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj+0x3c>
    12b6:	c9 01       	movw	r24, r18
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <_ZN9OrangeBot5Servo19hal_timer_set_delayEj>:
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	ec 01       	movw	r28, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	8c 54       	subi	r24, 0x4C	; 76
    12cc:	94 40       	sbci	r25, 0x04	; 4
    12ce:	85 3d       	cpi	r24, 0xD5	; 213
    12d0:	99 44       	sbci	r25, 0x49	; 73
    12d2:	40 f0       	brcs	.+16     	; 0x12e4 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x26>
    12d4:	40 e9       	ldi	r20, 0x90	; 144
    12d6:	53 e0       	ldi	r21, 0x03	; 3
    12d8:	67 e0       	ldi	r22, 0x07	; 7
    12da:	ce 01       	movw	r24, r28
    12dc:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	2c c0       	rjmp	.+88     	; 0x133c <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    12e4:	e0 e0       	ldi	r30, 0x00	; 0
    12e6:	fa e0       	ldi	r31, 0x0A	; 10
    12e8:	80 81       	ld	r24, Z
    12ea:	8e 7f       	andi	r24, 0xFE	; 254
    12ec:	80 83       	st	Z, r24
    12ee:	00 a1       	ldd	r16, Z+32	; 0x20
    12f0:	11 a1       	ldd	r17, Z+33	; 0x21
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 3e 09 	call	0x127c	; 0x127c <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj>
    12f8:	9c 01       	movw	r18, r24
    12fa:	21 50       	subi	r18, 0x01	; 1
    12fc:	31 09       	sbc	r19, r1
    12fe:	2e 3f       	cpi	r18, 0xFE	; 254
    1300:	4f ef       	ldi	r20, 0xFF	; 255
    1302:	34 07       	cpc	r19, r20
    1304:	40 f0       	brcs	.+16     	; 0x1316 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x58>
    1306:	41 ea       	ldi	r20, 0xA1	; 161
    1308:	53 e0       	ldi	r21, 0x03	; 3
    130a:	66 e0       	ldi	r22, 0x06	; 6
    130c:	ce 01       	movw	r24, r28
    130e:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	13 c0       	rjmp	.+38     	; 0x133c <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    1316:	08 17       	cp	r16, r24
    1318:	19 07       	cpc	r17, r25
    131a:	40 f0       	brcs	.+16     	; 0x132c <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x6e>
    131c:	48 ea       	ldi	r20, 0xA8	; 168
    131e:	53 e0       	ldi	r21, 0x03	; 3
    1320:	65 e0       	ldi	r22, 0x05	; 5
    1322:	ce 01       	movw	r24, r28
    1324:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	08 c0       	rjmp	.+16     	; 0x133c <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    132c:	e0 e0       	ldi	r30, 0x00	; 0
    132e:	fa e0       	ldi	r31, 0x0A	; 10
    1330:	26 a3       	std	Z+38, r18	; 0x26
    1332:	37 a3       	std	Z+39, r19	; 0x27
    1334:	80 81       	ld	r24, Z
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	80 83       	st	Z, r24
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <_ZN9OrangeBot5Servo10soft_startEhhhh>:
//!	\n	Blocking hardwired version of the soft start method using delay and direct control of IOs
//!	\n	@TODO: I can use TCA0 to emit pulses to EVOUTD in PWM mode for the soft start
/***************************************************************************/

bool Servo::soft_start( uint8_t iu8_ton, uint8_t iu8_toff, uint8_t iu8_treduce, uint8_t iu8_repeat )
{
    1346:	bf 92       	push	r11
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	7c 01       	movw	r14, r24
    135a:	16 2f       	mov	r17, r22
    135c:	d4 2f       	mov	r29, r20
    135e:	c2 2e       	mov	r12, r18
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	bool u1_continue = true;
    1360:	bb 24       	eor	r11, r11
    1362:	b3 94       	inc	r11
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While not done
	while (u1_continue == true)
    1364:	bb 20       	and	r11, r11
    1366:	49 f1       	breq	.+82     	; 0x13ba <_ZN9OrangeBot5Servo10soft_startEhhhh+0x74>
	{
		//if: there is room to reduce Toff
		if (iu8_toff > iu8_treduce)
    1368:	cd 16       	cp	r12, r29
    136a:	08 f5       	brcc	.+66     	; 0x13ae <_ZN9OrangeBot5Servo10soft_startEhhhh+0x68>
    136c:	d1 2c       	mov	r13, r1
		{
			//For each repeat
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
    136e:	d0 16       	cp	r13, r16
    1370:	d8 f4       	brcc	.+54     	; 0x13a8 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x62>
			{
				//Power on
				CLEAR_BIT( PORTD.OUT, SERVO_PWR_PIN );
    1372:	e0 e6       	ldi	r30, 0x60	; 96
    1374:	f4 e0       	ldi	r31, 0x04	; 4
    1376:	84 81       	ldd	r24, Z+4	; 0x04
    1378:	8f 77       	andi	r24, 0x7F	; 127
    137a:	84 83       	std	Z+4, r24	; 0x04
				
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_ton; u8_tmp_b++)
    137c:	c0 e0       	ldi	r28, 0x00	; 0
    137e:	c1 17       	cp	r28, r17
    1380:	28 f4       	brcc	.+10     	; 0x138c <_ZN9OrangeBot5Servo10soft_startEhhhh+0x46>
				{
					this->hal_delay_us();
    1382:	c7 01       	movw	r24, r14
    1384:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN9OrangeBot5Servo12hal_delay_usEv>
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
			{
				//Power on
				CLEAR_BIT( PORTD.OUT, SERVO_PWR_PIN );
				
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_ton; u8_tmp_b++)
    1388:	cf 5f       	subi	r28, 0xFF	; 255
    138a:	f9 cf       	rjmp	.-14     	; 0x137e <_ZN9OrangeBot5Servo10soft_startEhhhh+0x38>
				{
					this->hal_delay_us();
				}
				
				//Power Off
				this -> hal_power( false );
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	c7 01       	movw	r24, r14
    1390:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN9OrangeBot5Servo9hal_powerEb>
				
				//Wait
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_toff; u8_tmp_b++)
    1394:	c0 e0       	ldi	r28, 0x00	; 0
    1396:	cd 17       	cp	r28, r29
    1398:	28 f4       	brcc	.+10     	; 0x13a4 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x5e>
				{
					this->hal_delay_us();
    139a:	c7 01       	movw	r24, r14
    139c:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN9OrangeBot5Servo12hal_delay_usEv>
				
				//Power Off
				this -> hal_power( false );
				
				//Wait
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_toff; u8_tmp_b++)
    13a0:	cf 5f       	subi	r28, 0xFF	; 255
    13a2:	f9 cf       	rjmp	.-14     	; 0x1396 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x50>
	{
		//if: there is room to reduce Toff
		if (iu8_toff > iu8_treduce)
		{
			//For each repeat
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
    13a4:	d3 94       	inc	r13
    13a6:	e3 cf       	rjmp	.-58     	; 0x136e <_ZN9OrangeBot5Servo10soft_startEhhhh+0x28>
					this->hal_delay_us();
				}
			}
			
			//Increase Ton
			iu8_ton = iu8_ton+iu8_treduce;
    13a8:	1c 0d       	add	r17, r12
			//Reduce Toff
			iu8_toff = iu8_toff-iu8_treduce;
    13aa:	dc 19       	sub	r29, r12
    13ac:	db cf       	rjmp	.-74     	; 0x1364 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x1e>
		}
		//if: Reached Toff = 0
		else
		{
			//Power on
			this -> hal_power( true );
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	c7 01       	movw	r24, r14
    13b2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN9OrangeBot5Servo9hal_powerEb>
			//Break cycle
			u1_continue = false;
    13b6:	b1 2c       	mov	r11, r1
    13b8:	d5 cf       	rjmp	.-86     	; 0x1364 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x1e>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return false;	//OK
}	//End private method: soft_start | uint8_t | uint8_t | uint8_t | uint8_t
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	08 95       	ret

000013d0 <_ZN9OrangeBot5Servo5powerEb>:
//! \n	power the servomotors
//! \n	starts the ISR driver to scan the servos
/***************************************************************************/

bool Servo::power( bool iu1_powered )
{
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ec 01       	movw	r28, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//SERVO OFF
	if (iu1_powered == false)
    13da:	61 11       	cpse	r22, r1
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <_ZN9OrangeBot5Servo5powerEb+0x1e>
	{
		//Turn off SERVO bank
		u1_ret = this -> hal_power( false );
    13de:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN9OrangeBot5Servo9hal_powerEb>
    13e2:	18 2f       	mov	r17, r24
		//Stop the ISR
		this ->hal_run_isr( false );
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN9OrangeBot5Servo11hal_run_isrEb>
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <_ZN9OrangeBot5Servo5powerEb+0x34>
	}
	//SERVO ON
	else
	{
		//Use a blocking soft start delay based routine
		u1_ret = this -> soft_start( Config::SOFT_START_TON, Config::SOFT_START_TOFF, Config::SOFT_START_TREDUCE, Config::SOFT_START_REPEAT );
    13ee:	02 e0       	ldi	r16, 0x02	; 2
    13f0:	21 e0       	ldi	r18, 0x01	; 1
    13f2:	44 e6       	ldi	r20, 0x64	; 100
    13f4:	6a e0       	ldi	r22, 0x0A	; 10
    13f6:	0e 94 a3 09 	call	0x1346	; 0x1346 <_ZN9OrangeBot5Servo10soft_startEhhhh>
    13fa:	18 2f       	mov	r17, r24
		//Start the ISR
		this -> hal_run_isr( true );
    13fc:	61 e0       	ldi	r22, 0x01	; 1
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN9OrangeBot5Servo11hal_run_isrEb>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Success: %d", u1_ret); //Trace Return
	return u1_ret;	//Propagate Error
}   //end public method: power | void
    1404:	81 2f       	mov	r24, r17
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <_ZN9OrangeBot5Servo14clear_servo_ioEv>:
//! @details
//! \n Clear all servo IO lines
/***************************************************************************/

bool Servo::clear_servo_io( void )
{
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	8c 01       	movw	r16, r24
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    141a:	c0 e0       	ldi	r28, 0x00	; 0
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
    141c:	d0 e0       	ldi	r29, 0x00	; 0
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    141e:	c8 30       	cpi	r28, 0x08	; 8
    1420:	40 f4       	brcc	.+16     	; 0x1432 <_ZN9OrangeBot5Servo14clear_servo_ioEv+0x22>
	{
		//Try and clear that servo IO and accumulate error
		u1_ret |= this -> hal_servo_io( u8_cnt, false );
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	6c 2f       	mov	r22, r28
    1426:	c8 01       	movw	r24, r16
    1428:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    142c:	d8 2b       	or	r29, r24
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    142e:	cf 5f       	subi	r28, 0xFF	; 255
    1430:	f6 cf       	rjmp	.-20     	; 0x141e <_ZN9OrangeBot5Servo14clear_servo_ioEv+0xe>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("fail? %d\n", u1_ret); //Trace Return
	return u1_ret;	//Propagate error
}   //end private method: clear_servo_io | void
    1432:	8d 2f       	mov	r24, r29
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <_ZN9OrangeBot5Servo14emergency_stopEv>:
//! @details
//! \n Stop driver. Clear IO lines. Reinitialize class vars.
/***************************************************************************/

bool Servo::emergency_stop( void )
{
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	8c 01       	movw	r16, r24
	///--------------------------------------------------------------------------

	//Initialize error to OK
	bool u1_ret = false;
	//Stop timer
	u1_ret |= this -> hal_run_isr( false );
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN9OrangeBot5Servo11hal_run_isrEb>
    144c:	c8 2f       	mov	r28, r24
	//Clear servo IOs
	u1_ret |= this -> clear_servo_io();
    144e:	c8 01       	movw	r24, r16
    1450:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN9OrangeBot5Servo14clear_servo_ioEv>
    1454:	c8 2b       	or	r28, r24
	//Reinitialize class vars (except error)
	u1_ret |= this -> init_class_vars();
    1456:	c8 01       	movw	r24, r16
    1458:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN9OrangeBot5Servo15init_class_varsEv>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Fail? %d\n", u1_ret); //Trace Return
	return u1_ret;	//Propagate error
}   //end private method: emergency_stop | void
    145c:	8c 2b       	or	r24, r28
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj>:
//! @details
//! \n The driver uses command position and speed, and actual delay, to compute next delay
/***************************************************************************/

bool Servo::compute_servo_delay( uint8_t iu8_index, uint16_t &ou16_delay )
{
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	8a 01       	movw	r16, r20
	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//If Servo index is OOB
	if ((Config::PEDANTIC_CHECKS == true) && ((iu8_index < 0) || (iu8_index >= Config::NUM_SERVOS)))
    1474:	68 30       	cpi	r22, 0x08	; 8
    1476:	68 f0       	brcs	.+26     	; 0x1492 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2c>
	{
		this -> report_error( Error_code::ERR_INPUT_OOB, __LINE__ );
    1478:	45 e1       	ldi	r20, 0x15	; 21
    147a:	55 e0       	ldi	r21, 0x05	; 5
    147c:	67 e0       	ldi	r22, 0x07	; 7
    147e:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
		ou16_delay = Config::HAL_TIMER_MAX_CNT;
    1482:	8f ef       	ldi	r24, 0xFF	; 255
    1484:	9f ef       	ldi	r25, 0xFF	; 255
    1486:	f8 01       	movw	r30, r16
    1488:	80 83       	st	Z, r24
    148a:	91 83       	std	Z+1, r25	; 0x01
		return true;
    148c:	ff 24       	eor	r15, r15
    148e:	f3 94       	inc	r15
    1490:	9c c1       	rjmp	.+824    	; 0x17ca <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
	///	COMMAND -> STATUS
	///--------------------------------------------------------------------------
	//	The driver check if command has changed and saves the vars inside the timer status vars

	//If command position changed
	if (gast_command[iu8_index].u1_position_changed == true)
    1492:	46 2f       	mov	r20, r22
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	fa 01       	movw	r30, r20
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	e8 0f       	add	r30, r24
    14a6:	f9 1f       	adc	r31, r25
    14a8:	f5 80       	ldd	r15, Z+5	; 0x05
    14aa:	ff 20       	and	r15, r15
    14ac:	b1 f1       	breq	.+108    	; 0x151a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0xb4>
	{
		//Fetch position
		int16_t s16_tmp = gast_command[iu8_index].s16_position;
    14ae:	fa 01       	movw	r30, r20
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	e8 0f       	add	r30, r24
    14be:	f9 1f       	adc	r31, r25
    14c0:	81 81       	ldd	r24, Z+1	; 0x01
    14c2:	92 81       	ldd	r25, Z+2	; 0x02
		if ((Config::PEDANTIC_CHECKS == true) && ( (s16_tmp < -(int16_t)Config::SERVO_PPM_MAX_COMMAND) || (s16_tmp > (int16_t)Config::SERVO_PPM_MAX_COMMAND) ))
    14c4:	9c 01       	movw	r18, r24
    14c6:	20 57       	subi	r18, 0x70	; 112
    14c8:	3e 4f       	sbci	r19, 0xFE	; 254
    14ca:	21 32       	cpi	r18, 0x21	; 33
    14cc:	33 40       	sbci	r19, 0x03	; 3
    14ce:	60 f0       	brcs	.+24     	; 0x14e8 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x82>
		{
			//Algorithmic error. The class should make sure that user can't write bollocks inside the position
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    14d0:	47 e2       	ldi	r20, 0x27	; 39
    14d2:	55 e0       	ldi	r21, 0x05	; 5
    14d4:	68 e0       	ldi	r22, 0x08	; 8
    14d6:	ce 01       	movw	r24, r28
    14d8:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			ou16_delay = Config::HAL_TIMER_MAX_CNT;
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f ef       	ldi	r25, 0xFF	; 255
    14e0:	f8 01       	movw	r30, r16
    14e2:	80 83       	st	Z, r24
    14e4:	91 83       	std	Z+1, r25	; 0x01
			return true;
    14e6:	71 c1       	rjmp	.+738    	; 0x17ca <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
		}
		//The target delay is the delay to achieve zero position plus the deviation
		gast_timer[iu8_index].u16_target = Config::SERVO_PPM_ZERO +s16_tmp;
    14e8:	84 52       	subi	r24, 0x24	; 36
    14ea:	9a 4f       	sbci	r25, 0xFA	; 250
    14ec:	fa 01       	movw	r30, r20
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	e4 0f       	add	r30, r20
    14f8:	f5 1f       	adc	r31, r21
    14fa:	ec 0f       	add	r30, r28
    14fc:	fd 1f       	adc	r31, r29
    14fe:	ef 5b       	subi	r30, 0xBF	; 191
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 83       	st	Z, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
		//status and command are synced
		gast_command[iu8_index].u1_position_changed = false;
    1506:	fa 01       	movw	r30, r20
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	ec 0f       	add	r30, r28
    1516:	fd 1f       	adc	r31, r29
    1518:	15 82       	std	Z+5, r1	; 0x05
	}

	//Latch speed limit in microseconds per 20ms
	uint8_t u8_speed = 0;
	//If command speed changed
	if (gast_command[iu8_index].u1_speed_changed == true)
    151a:	fa 01       	movw	r30, r20
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	ec 0f       	add	r30, r28
    152a:	fd 1f       	adc	r31, r29
    152c:	f6 80       	ldd	r15, Z+6	; 0x06
    152e:	ff 20       	and	r15, r15
    1530:	09 f4       	brne	.+2      	; 0x1534 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0xce>
    1532:	4c c0       	rjmp	.+152    	; 0x15cc <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x166>
	{
		//Fetch position
		uint16_t u16_tmp = gast_command[iu8_index].u16_speed;
    1534:	fa 01       	movw	r30, r20
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	ec 0f       	add	r30, r28
    1544:	fd 1f       	adc	r31, r29
    1546:	23 81       	ldd	r18, Z+3	; 0x03
    1548:	34 81       	ldd	r19, Z+4	; 0x04
		//If speed limiter is disabled
		if (u16_tmp == 0)
    154a:	21 15       	cp	r18, r1
    154c:	31 05       	cpc	r19, r1
    154e:	71 f4       	brne	.+28     	; 0x156c <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x106>
		{
			//Update internal timer status
			gast_timer[iu8_index].u8_speed = 0;	
    1550:	fa 01       	movw	r30, r20
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	e4 0f       	add	r30, r20
    155c:	f5 1f       	adc	r31, r21
    155e:	ec 0f       	add	r30, r28
    1560:	fd 1f       	adc	r31, r29
    1562:	ed 5b       	subi	r30, 0xBD	; 189
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	10 82       	st	Z, r1
		//status and command are synced
		gast_command[iu8_index].u1_position_changed = false;
	}

	//Latch speed limit in microseconds per 20ms
	uint8_t u8_speed = 0;
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	25 c0       	rjmp	.+74     	; 0x15b6 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x150>
		}
		//if speed limiter is active
		else
		{
			//The target speed is the speed multiplied by the number of PPM cycles in a second
			u16_tmp /= Config::SERVO_PPM_FREQUENCY;
    156c:	36 95       	lsr	r19
    156e:	27 95       	ror	r18
    1570:	ab e7       	ldi	r26, 0x7B	; 123
    1572:	b4 e1       	ldi	r27, 0x14	; 20
    1574:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__umulhisi3>
    1578:	96 95       	lsr	r25
    157a:	87 95       	ror	r24
			if (u16_tmp > 255)
    157c:	8f 3f       	cpi	r24, 0xFF	; 255
    157e:	91 05       	cpc	r25, r1
    1580:	69 f0       	breq	.+26     	; 0x159c <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x136>
    1582:	60 f0       	brcs	.+24     	; 0x159c <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x136>
			{
				this -> report_error( Error_code::ERR_OVERFLOW, __LINE__ );
    1584:	45 e4       	ldi	r20, 0x45	; 69
    1586:	55 e0       	ldi	r21, 0x05	; 5
    1588:	66 e0       	ldi	r22, 0x06	; 6
    158a:	ce 01       	movw	r24, r28
    158c:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
				ou16_delay = Config::HAL_TIMER_MAX_CNT;
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	9f ef       	ldi	r25, 0xFF	; 255
    1594:	f8 01       	movw	r30, r16
    1596:	80 83       	st	Z, r24
    1598:	91 83       	std	Z+1, r25	; 0x01
				return true;
    159a:	17 c1       	rjmp	.+558    	; 0x17ca <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
			}
			u8_speed = u16_tmp;
    159c:	68 2f       	mov	r22, r24
			//Update internal timer status
			gast_timer[iu8_index].u8_speed = u8_speed;
    159e:	fa 01       	movw	r30, r20
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	e4 0f       	add	r30, r20
    15aa:	f5 1f       	adc	r31, r21
    15ac:	ec 0f       	add	r30, r28
    15ae:	fd 1f       	adc	r31, r29
    15b0:	ed 5b       	subi	r30, 0xBD	; 189
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 83       	st	Z, r24
		}
		//status and command are synced
		gast_command[iu8_index].u1_speed_changed = false;
    15b6:	fa 01       	movw	r30, r20
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	ec 0f       	add	r30, r28
    15c6:	fd 1f       	adc	r31, r29
    15c8:	16 82       	std	Z+6, r1	; 0x06
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x17e>
	}
	//If speed has not changed
	else
	{
		//Fetch speed
		u8_speed = gast_timer[iu8_index].u8_speed;
    15cc:	fa 01       	movw	r30, r20
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	e4 0f       	add	r30, r20
    15d8:	f5 1f       	adc	r31, r21
    15da:	ec 0f       	add	r30, r28
    15dc:	fd 1f       	adc	r31, r29
    15de:	ed 5b       	subi	r30, 0xBD	; 189
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	60 81       	ld	r22, Z
	///--------------------------------------------------------------------------

	//Initialize return delay to invalid
	uint16_t u16_delay = Config::HAL_TIMER_MAX_CNT;
	//Fetch target
	uint16_t u16_target = gast_timer[iu8_index].u16_target;
    15e4:	ca 01       	movw	r24, r20
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	84 0f       	add	r24, r20
    15f0:	95 1f       	adc	r25, r21
    15f2:	8c 0f       	add	r24, r28
    15f4:	9d 1f       	adc	r25, r29
    15f6:	fc 01       	movw	r30, r24
    15f8:	ef 5b       	subi	r30, 0xBF	; 191
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
	//Fetch actual
	uint16_t u16_actual = gast_timer[iu8_index].u16_actual;
    1600:	33 96       	adiw	r30, 0x03	; 3
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
	//If: speed limit is inactive
	if (u8_speed == 0)
    1606:	61 11       	cpse	r22, r1
    1608:	3d c0       	rjmp	.+122    	; 0x1684 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x21e>
	{
		//if already locked
		if (u16_target == u16_actual)
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	b9 f4       	brne	.+46     	; 0x163e <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x1d8>
		{
			//Already locked
			gast_command[iu8_index].u1_idle = true;
    1610:	fa 01       	movw	r30, r20
    1612:	31 96       	adiw	r30, 0x01	; 1
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	ec 0f       	add	r30, r28
    1622:	fd 1f       	adc	r31, r29
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
			gast_command[iu8_index].u1_lock = true;	
    1628:	44 0f       	add	r20, r20
    162a:	55 1f       	adc	r21, r21
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	44 0f       	add	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	fe 01       	movw	r30, r28
    1636:	e4 0f       	add	r30, r20
    1638:	f5 1f       	adc	r31, r21
    163a:	87 83       	std	Z+7, r24	; 0x07
    163c:	ae c0       	rjmp	.+348    	; 0x179a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
		}
		//Needs to move
		else
		{
			//Not locked
			gast_command[iu8_index].u1_idle = false;
    163e:	fa 01       	movw	r30, r20
    1640:	31 96       	adiw	r30, 0x01	; 1
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ec 0f       	add	r30, r28
    1650:	fd 1f       	adc	r31, r29
    1652:	10 82       	st	Z, r1
			gast_command[iu8_index].u1_lock = false;
    1654:	fa 01       	movw	r30, r20
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	ec 0f       	add	r30, r28
    1664:	fd 1f       	adc	r31, r29
    1666:	17 82       	std	Z+7, r1	; 0x07
			//Update actual
			gast_timer[iu8_index].u16_actual = u16_target;
    1668:	fa 01       	movw	r30, r20
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	e4 0f       	add	r30, r20
    1674:	f5 1f       	adc	r31, r21
    1676:	ec 0f       	add	r30, r28
    1678:	fd 1f       	adc	r31, r29
    167a:	ec 5b       	subi	r30, 0xBC	; 188
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	20 83       	st	Z, r18
    1680:	31 83       	std	Z+1, r19	; 0x01
    1682:	8b c0       	rjmp	.+278    	; 0x179a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
	}
	//if: speed limit active
	else
	{
		//if already locked
		if (u16_target == u16_actual)
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	c1 f4       	brne	.+48     	; 0x16ba <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x254>
		{
			//Already locked
			gast_command[iu8_index].u1_idle = true;
    168a:	fa 01       	movw	r30, r20
    168c:	31 96       	adiw	r30, 0x01	; 1
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	ec 0f       	add	r30, r28
    169c:	fd 1f       	adc	r31, r29
    169e:	21 e0       	ldi	r18, 0x01	; 1
    16a0:	20 83       	st	Z, r18
			gast_command[iu8_index].u1_lock = true;
    16a2:	44 0f       	add	r20, r20
    16a4:	55 1f       	adc	r21, r21
    16a6:	44 0f       	add	r20, r20
    16a8:	55 1f       	adc	r21, r21
    16aa:	44 0f       	add	r20, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	fe 01       	movw	r30, r28
    16b0:	e4 0f       	add	r30, r20
    16b2:	f5 1f       	adc	r31, r21
    16b4:	27 83       	std	Z+7, r18	; 0x07
			//Delay of the servo to be returned to caller
			u16_delay = u16_actual;
    16b6:	9c 01       	movw	r18, r24
    16b8:	70 c0       	rjmp	.+224    	; 0x179a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
		}
		//if: Needs to move
		else
		{
			//Compute absolute difference
			uint16_t u16_delta = ((u16_target > u16_actual)?(u16_target-u16_actual):(u16_actual-u16_target));
    16ba:	82 17       	cp	r24, r18
    16bc:	93 07       	cpc	r25, r19
    16be:	20 f4       	brcc	.+8      	; 0x16c8 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x262>
    16c0:	f9 01       	movw	r30, r18
    16c2:	e8 1b       	sub	r30, r24
    16c4:	f9 0b       	sbc	r31, r25
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x268>
    16c8:	fc 01       	movw	r30, r24
    16ca:	e2 1b       	sub	r30, r18
    16cc:	f3 0b       	sbc	r31, r19
			//If: I need to move less than my allowed speed limit
			if (u16_delta < u8_speed)
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	e6 17       	cp	r30, r22
    16d2:	f7 07       	cpc	r31, r23
    16d4:	20 f5       	brcc	.+72     	; 0x171e <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2b8>
			{
				//I'm locked but not IDLE
				gast_command[iu8_index].u1_lock = true;
    16d6:	fa 01       	movw	r30, r20
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	ec 0f       	add	r30, r28
    16e6:	fd 1f       	adc	r31, r29
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	87 83       	std	Z+7, r24	; 0x07
				gast_command[iu8_index].u1_idle = false;
    16ec:	fa 01       	movw	r30, r20
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	ec 0f       	add	r30, r28
    16fe:	fd 1f       	adc	r31, r29
    1700:	10 82       	st	Z, r1
				//Update actual
				gast_timer[iu8_index].u16_actual = u16_target;
    1702:	fa 01       	movw	r30, r20
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	e4 0f       	add	r30, r20
    170e:	f5 1f       	adc	r31, r21
    1710:	ec 0f       	add	r30, r28
    1712:	fd 1f       	adc	r31, r29
    1714:	ec 5b       	subi	r30, 0xBC	; 188
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	20 83       	st	Z, r18
    171a:	31 83       	std	Z+1, r19	; 0x01
    171c:	3e c0       	rjmp	.+124    	; 0x179a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
			}
			//if: I need to move more than the speed limit
			else
			{
				//I'm moving in a speed limited way
				gast_command[iu8_index].u1_lock = false;
    171e:	fa 01       	movw	r30, r20
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	ec 0f       	add	r30, r28
    172e:	fd 1f       	adc	r31, r29
    1730:	17 82       	std	Z+7, r1	; 0x07
				gast_command[iu8_index].u1_idle = false;
    1732:	fa 01       	movw	r30, r20
    1734:	31 96       	adiw	r30, 0x01	; 1
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	ec 0f       	add	r30, r28
    1744:	fd 1f       	adc	r31, r29
    1746:	10 82       	st	Z, r1
				//If: moving positive
				if (u16_target > u16_actual)
    1748:	82 17       	cp	r24, r18
    174a:	93 07       	cpc	r25, r19
    174c:	20 f4       	brcc	.+8      	; 0x1756 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2f0>
				{
					//Move the maximum allowed speed in the positive direction	
					u16_actual += u8_speed;
    174e:	9c 01       	movw	r18, r24
    1750:	26 0f       	add	r18, r22
    1752:	37 1f       	adc	r19, r23
    1754:	15 c0       	rjmp	.+42     	; 0x1780 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x31a>
					
				}
				//If: moving negative
				else if (u16_target < u16_actual)
    1756:	28 17       	cp	r18, r24
    1758:	39 07       	cpc	r19, r25
    175a:	20 f4       	brcc	.+8      	; 0x1764 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2fe>
				{
					//Move the maximum allowed speed in the positive direction
					u16_actual -= u8_speed;
    175c:	9c 01       	movw	r18, r24
    175e:	26 1b       	sub	r18, r22
    1760:	37 0b       	sbc	r19, r23
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x31a>
				}
				else
				{
					this -> report_error( Error_code::ERR_ALGORITHM, __LINE__ );
    1764:	48 ea       	ldi	r20, 0xA8	; 168
    1766:	55 e0       	ldi	r21, 0x05	; 5
    1768:	68 e0       	ldi	r22, 0x08	; 8
    176a:	ce 01       	movw	r24, r28
    176c:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
					ou16_delay = Config::HAL_TIMER_MAX_CNT;
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	f8 01       	movw	r30, r16
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
					return true;
    177a:	ff 24       	eor	r15, r15
    177c:	f3 94       	inc	r15
    177e:	25 c0       	rjmp	.+74     	; 0x17ca <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
				}
				//Update actual
				gast_timer[iu8_index].u16_actual = u16_actual;
    1780:	fa 01       	movw	r30, r20
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	e4 0f       	add	r30, r20
    178c:	f5 1f       	adc	r31, r21
    178e:	ec 0f       	add	r30, r28
    1790:	fd 1f       	adc	r31, r29
    1792:	ec 5b       	subi	r30, 0xBC	; 188
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	20 83       	st	Z, r18
    1798:	31 83       	std	Z+1, r19	; 0x01
				//Delay of the servo to be returned to caller
				u16_delay = u16_actual;
			} //end if: I need to move more than the speed limit
		}  //end if: Needs to move
	} //end if: speed limit active
	if ((Config::PEDANTIC_CHECKS == true) && ((u16_delay < Config::SERVO_PPM_MIN_PULSE) || (u16_delay> Config::SERVO_PPM_MAX_PULSE)) )
    179a:	c9 01       	movw	r24, r18
    179c:	8c 54       	subi	r24, 0x4C	; 76
    179e:	94 40       	sbci	r25, 0x04	; 4
    17a0:	81 32       	cpi	r24, 0x21	; 33
    17a2:	93 40       	sbci	r25, 0x03	; 3
    17a4:	70 f0       	brcs	.+28     	; 0x17c2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x35c>
	{
		this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    17a6:	45 eb       	ldi	r20, 0xB5	; 181
    17a8:	55 e0       	ldi	r21, 0x05	; 5
    17aa:	68 e0       	ldi	r22, 0x08	; 8
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
		ou16_delay = Config::HAL_TIMER_MAX_CNT;
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	f8 01       	movw	r30, r16
    17b8:	80 83       	st	Z, r24
    17ba:	91 83       	std	Z+1, r25	; 0x01
		return true;
    17bc:	ff 24       	eor	r15, r15
    17be:	f3 94       	inc	r15
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Delay %d\n", u16_delay); //Trace Return
	ou16_delay = u16_delay;
    17c2:	f8 01       	movw	r30, r16
    17c4:	20 83       	st	Z, r18
    17c6:	31 83       	std	Z+1, r19	; 0x01
	return false;	//OK
    17c8:	f1 2c       	mov	r15, r1
}   //end private method: compute_servo_delay | uint8_t | uint16_t |
    17ca:	8f 2d       	mov	r24, r15
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	08 95       	ret

000017d8 <_ZN9OrangeBot5Servo13hal_timer_isrEv>:
//! \n Toggles the servo pin and compute the next OCR
//! \n Re-arms or Stop the timer
/***************************************************************************/

bool Servo::hal_timer_isr( void )
{
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x12>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	7c 01       	movw	r14, r24
	///	SERVO IOs
	///--------------------------------------------------------------------------
	//	Emit the correct IO lines

	//Fetch scan index
	uint8_t u8_index = this -> gu8_index;
    17f0:	fc 01       	movw	r30, r24
    17f2:	10 81       	ld	r17, Z
	//First Servo: SET servo line
	if (u8_index == 0)
    17f4:	11 11       	cpse	r17, r1
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <__DATA_REGION_LENGTH__+0x2>
	{
		u1_ret = this -> hal_servo_io( u8_index, true );
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	61 2f       	mov	r22, r17
    17fc:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1800:	16 c0       	rjmp	.+44     	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
	}
	//Inner servos
	else if ((u8_index > 0) && (u8_index < Config::NUM_SERVOS))
    1802:	6f ef       	ldi	r22, 0xFF	; 255
    1804:	61 0f       	add	r22, r17
    1806:	67 30       	cpi	r22, 0x07	; 7
    1808:	58 f4       	brcc	.+22     	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
	{
		//Clear previous servo line
		u1_ret = this -> hal_servo_io( u8_index-1, false );
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1810:	08 2f       	mov	r16, r24
		//SET current servo line
		u1_ret |= this -> hal_servo_io( u8_index, true );
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	61 2f       	mov	r22, r17
    1816:	c7 01       	movw	r24, r14
    1818:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    181c:	80 2b       	or	r24, r16
    181e:	07 c0       	rjmp	.+14     	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
	}
	//Last Servo: CLEAR servo line
	else if (u8_index == Config::NUM_SERVOS)
    1820:	18 30       	cpi	r17, 0x08	; 8
    1822:	21 f4       	brne	.+8      	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
	{
		//Clear previous servo line
		u1_ret = this -> hal_servo_io( u8_index -1, false );
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    182a:	01 c0       	rjmp	.+2      	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
	}
	//Algorithmic Error
	else
	{
		//FAIL
		u1_ret = true;
    182c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	//If Fail
	if (u1_ret == true)
    182e:	88 23       	and	r24, r24
    1830:	21 f0       	breq	.+8      	; 0x183a <__DATA_REGION_LENGTH__+0x3a>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    1832:	c7 01       	movw	r24, r14
    1834:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    1838:	58 c0       	rjmp	.+176    	; 0x18ea <__DATA_REGION_LENGTH__+0xea>
	//	Compute and program the delay for the next cycle
	
	//Temp delay in microseconds. HAL takes care of programming a delay in timer units
	uint16_t u16_delay;
	//Latch accumulator
	uint16_t u16_accumulator = gu16_timer_sum;
    183a:	f7 01       	movw	r30, r14
    183c:	e7 59       	subi	r30, 0x97	; 151
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	c0 80       	ld	r12, Z
    1842:	d1 80       	ldd	r13, Z+1	; 0x01
	//Compute Delay for servos
	if (u8_index < Config::NUM_SERVOS)
    1844:	18 30       	cpi	r17, 0x08	; 8
    1846:	d0 f4       	brcc	.+52     	; 0x187c <__DATA_REGION_LENGTH__+0x7c>
	{
		//Driver takes care of updating from user command, maintaining servo status and computing what the next delay is to be
		u1_ret = this -> compute_servo_delay( u8_index, u16_delay );
    1848:	ae 01       	movw	r20, r28
    184a:	4f 5f       	subi	r20, 0xFF	; 255
    184c:	5f 4f       	sbci	r21, 0xFF	; 255
    184e:	61 2f       	mov	r22, r17
    1850:	c7 01       	movw	r24, r14
    1852:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj>
		if ((Config::PEDANTIC_CHECKS == true) && ((u16_delay < Config::SERVO_PPM_MIN_PULSE) || (u16_delay > Config::SERVO_PPM_MAX_PULSE)) )
    1856:	29 81       	ldd	r18, Y+1	; 0x01
    1858:	3a 81       	ldd	r19, Y+2	; 0x02
    185a:	a9 01       	movw	r20, r18
    185c:	4c 54       	subi	r20, 0x4C	; 76
    185e:	54 40       	sbci	r21, 0x04	; 4
    1860:	41 32       	cpi	r20, 0x21	; 33
    1862:	53 40       	sbci	r21, 0x03	; 3
    1864:	40 f0       	brcs	.+16     	; 0x1876 <__DATA_REGION_LENGTH__+0x76>
		{
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    1866:	4d ee       	ldi	r20, 0xED	; 237
    1868:	51 e0       	ldi	r21, 0x01	; 1
    186a:	68 e0       	ldi	r22, 0x08	; 8
    186c:	c7 01       	movw	r24, r14
    186e:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			return true;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	3a c0       	rjmp	.+116    	; 0x18ea <__DATA_REGION_LENGTH__+0xea>
		}
		//Accumulate delay inside accumulator
		u16_accumulator += u16_delay;
    1876:	c2 0e       	add	r12, r18
    1878:	d3 1e       	adc	r13, r19
    187a:	19 c0       	rjmp	.+50     	; 0x18ae <__DATA_REGION_LENGTH__+0xae>
	}
	//Compute final delay and clear accumulator
	else if (u8_index == Config::NUM_SERVOS)
    187c:	18 30       	cpi	r17, 0x08	; 8
    187e:	b1 f4       	brne	.+44     	; 0x18ac <__DATA_REGION_LENGTH__+0xac>
	{
		//If: the servo scan time exceed the PPM period
		if (u16_accumulator >= Config::SERVO_PPM_PERIOD)
    1880:	90 e2       	ldi	r25, 0x20	; 32
    1882:	c9 16       	cp	r12, r25
    1884:	9e e4       	ldi	r25, 0x4E	; 78
    1886:	d9 06       	cpc	r13, r25
    1888:	40 f0       	brcs	.+16     	; 0x189a <__DATA_REGION_LENGTH__+0x9a>
		{
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    188a:	49 ef       	ldi	r20, 0xF9	; 249
    188c:	51 e0       	ldi	r21, 0x01	; 1
    188e:	68 e0       	ldi	r22, 0x08	; 8
    1890:	c7 01       	movw	r24, r14
    1892:	0e 94 3d 08 	call	0x107a	; 0x107a <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			u1_ret = true;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0a c0       	rjmp	.+20     	; 0x18ae <__DATA_REGION_LENGTH__+0xae>
		}
		//If: scan time is good
		else
		{
			//Final delay is meant to achieve the PPM period
			u16_delay = Config::SERVO_PPM_PERIOD -u16_accumulator;
    189a:	20 e2       	ldi	r18, 0x20	; 32
    189c:	3e e4       	ldi	r19, 0x4E	; 78
    189e:	2c 19       	sub	r18, r12
    18a0:	3d 09       	sbc	r19, r13
    18a2:	29 83       	std	Y+1, r18	; 0x01
    18a4:	3a 83       	std	Y+2, r19	; 0x02
			//Reset the accumulator for the next cycle
			u16_accumulator = 0;	
    18a6:	c1 2c       	mov	r12, r1
    18a8:	d1 2c       	mov	r13, r1
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <__DATA_REGION_LENGTH__+0xae>
	}
	//Algorithmic error
	else
	{
		//Fail
		u1_ret = true;	
    18ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	//If fail
	if (u1_ret == true)
    18ae:	88 23       	and	r24, r24
    18b0:	21 f0       	breq	.+8      	; 0x18ba <__DATA_REGION_LENGTH__+0xba>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    18b2:	c7 01       	movw	r24, r14
    18b4:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    18b8:	18 c0       	rjmp	.+48     	; 0x18ea <__DATA_REGION_LENGTH__+0xea>
	}
	
	//Program the timer with the desired delay. ISR will be called again when said delay has elapsed
	u1_ret = this -> hal_timer_set_delay( u16_delay );
    18ba:	69 81       	ldd	r22, Y+1	; 0x01
    18bc:	7a 81       	ldd	r23, Y+2	; 0x02
    18be:	c7 01       	movw	r24, r14
    18c0:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN9OrangeBot5Servo19hal_timer_set_delayEj>
	//Fail
	if (u1_ret == true)
    18c4:	88 23       	and	r24, r24
    18c6:	21 f0       	breq	.+8      	; 0x18d0 <__DATA_REGION_LENGTH__+0xd0>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    18c8:	c7 01       	movw	r24, r14
    18ca:	0e 94 1f 0a 	call	0x143e	; 0x143e <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <__DATA_REGION_LENGTH__+0xea>
	}
	//Success
	else
	{
		//Write back accumulator
		gu16_timer_sum = u16_accumulator;
    18d0:	f7 01       	movw	r30, r14
    18d2:	e7 59       	subi	r30, 0x97	; 151
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	c0 82       	st	Z, r12
    18d8:	d1 82       	std	Z+1, r13	; 0x01
	}
	//Next scan. TOP is the last number counted before reset
	u8_index = AT_TOP_INC( u8_index, Config::NUM_SERVOS );
    18da:	18 30       	cpi	r17, 0x08	; 8
    18dc:	11 f0       	breq	.+4      	; 0x18e2 <__DATA_REGION_LENGTH__+0xe2>
    18de:	1f 5f       	subi	r17, 0xFF	; 255
    18e0:	01 c0       	rjmp	.+2      	; 0x18e4 <__DATA_REGION_LENGTH__+0xe4>
    18e2:	10 e0       	ldi	r17, 0x00	; 0
	//Update the scan index
	this -> gu8_index = u8_index;
    18e4:	f7 01       	movw	r30, r14
    18e6:	10 83       	st	Z, r17

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	return false;	//OK
    18e8:	80 e0       	ldi	r24, 0x00	; 0
}   //end public method: hal_timer_isr
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <_ZN4User9String_uc10str_lengthEPhh>:
//! @details
//!	Compute length of a string
/***************************************************************************/

uint8_t String_uc::str_length( uint8_t *str, uint8_t max_length )
{
    1900:	ac 01       	movw	r20, r24
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//counter
	uint8_t t = 0;
    1902:	80 e0       	ldi	r24, 0x00	; 0
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While string is not over
	while ((t < max_length) && (str[t]!='\0'))
    1904:	86 17       	cp	r24, r22
    1906:	40 f4       	brcc	.+16     	; 0x1918 <_ZN4User9String_uc10str_lengthEPhh+0x18>
    1908:	fa 01       	movw	r30, r20
    190a:	e8 0f       	add	r30, r24
    190c:	f1 1d       	adc	r31, r1
    190e:	20 81       	ld	r18, Z
    1910:	22 23       	and	r18, r18
    1912:	11 f0       	breq	.+4      	; 0x1918 <_ZN4User9String_uc10str_lengthEPhh+0x18>
	{
		//Scan next character
		t++;
    1914:	8f 5f       	subi	r24, 0xFF	; 255
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While string is not over
	while ((t < max_length) && (str[t]!='\0'))
    1916:	f6 cf       	rjmp	.-20     	; 0x1904 <_ZN4User9String_uc10str_lengthEPhh+0x4>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	return t;
} //End function: str_len | uint8_t, uint8_t *
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	08 95       	ret

0000191c <_ZN4User9String_uc9to_stringIhEEhT_Ph>:
//! enum User::String_uc::Size:: hold all relevant sizes user need
/***************************************************************************/

template <>
uint8_t String_uc::to_string( uint8_t value, uint8_t *str )
{
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	00 d0       	rcall	.+0      	; 0x1922 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6>
    1922:	1f 92       	push	r1
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	58 2f       	mov	r21, r24
    192a:	db 01       	movw	r26, r22
	uint8_t base[] =
	{
		100,
		10,
		1
	};
    192c:	84 e6       	ldi	r24, 0x64	; 100
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	8a e0       	ldi	r24, 0x0A	; 10
    1932:	8a 83       	std	Y+2, r24	; 0x02
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	8b 83       	std	Y+3, r24	; 0x03
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//index to the string
	uint8_t index = 0;
    1938:	30 e0       	ldi	r19, 0x00	; 0
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//For all bases
	for (t = 0;t < String_uc::Size::DIGIT_U8; t++)
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	23 30       	cpi	r18, 0x03	; 3
    193e:	28 f5       	brcc	.+74     	; 0x198a <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6e>
	{
		//If the base is bigger or equal than the number (division is meaningful)
		if (base[t] <= value)
    1940:	e1 e0       	ldi	r30, 0x01	; 1
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	ec 0f       	add	r30, r28
    1946:	fd 1f       	adc	r31, r29
    1948:	e2 0f       	add	r30, r18
    194a:	f1 1d       	adc	r31, r1
    194c:	40 81       	ld	r20, Z
    194e:	54 17       	cp	r21, r20
    1950:	80 f0       	brcs	.+32     	; 0x1972 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x56>
		{
			//Divide number by base, get the digit
			value_tmp = value/base[t];
    1952:	85 2f       	mov	r24, r21
    1954:	64 2f       	mov	r22, r20
    1956:	0e 94 92 1a 	call	0x3524	; 0x3524 <__udivmodqi4>
			//Write the digit
			str[ index ] = '0' +value_tmp;
    195a:	fd 01       	movw	r30, r26
    195c:	e3 0f       	add	r30, r19
    195e:	f1 1d       	adc	r31, r1
    1960:	90 e3       	ldi	r25, 0x30	; 48
    1962:	98 0f       	add	r25, r24
    1964:	90 83       	st	Z, r25
			//Update the number
			value = value - base[t] * value_tmp;
    1966:	48 9f       	mul	r20, r24
    1968:	50 19       	sub	r21, r0
    196a:	11 24       	eor	r1, r1
			//I have found a meaningful digit
			flag = false;
			//Jump to the next digit
			index++;
    196c:	3f 5f       	subi	r19, 0xFF	; 255
			//Write the digit
			str[ index ] = '0' +value_tmp;
			//Update the number
			value = value - base[t] * value_tmp;
			//I have found a meaningful digit
			flag = false;
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	0a c0       	rjmp	.+20     	; 0x1986 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6a>
			//Jump to the next digit
			index++;
		}
		//If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
		else if ( (flag == true) && (t != (String_uc::Size::DIGIT_U8 -1)) )
    1972:	88 23       	and	r24, r24
    1974:	11 f0       	breq	.+4      	; 0x197a <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x5e>
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 f4       	brne	.+12     	; 0x1986 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6a>
		}
		//If: I have a meaningful zero
		else
		{
			//It's a zero
			str[ index ] = '0';
    197a:	fd 01       	movw	r30, r26
    197c:	e3 0f       	add	r30, r19
    197e:	f1 1d       	adc	r31, r1
    1980:	90 e3       	ldi	r25, 0x30	; 48
    1982:	90 83       	st	Z, r25
			//Jump to the next digit
			index++;
    1984:	3f 5f       	subi	r19, 0xFF	; 255
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//For all bases
	for (t = 0;t < String_uc::Size::DIGIT_U8; t++)
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	d9 cf       	rjmp	.-78     	; 0x193c <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x20>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Append the terminator
	str[ index ] = '\0';
    198a:	a3 0f       	add	r26, r19
    198c:	b1 1d       	adc	r27, r1
    198e:	1c 92       	st	X, r1

	//Trace Return
	DRETURN_ARG( "length: %d | return string: >%s<\n", index, str );
	return index;	//OK
}	//end method: to_string<uint8_t> | uint8_t, uint8_t *
    1990:	83 2f       	mov	r24, r19
    1992:	23 96       	adiw	r28, 0x03	; 3
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <_ZN4User4UartD1Ev>:
//! @return no return
//!	@details
//! Empty destructor
/***************************************************************************/

Uart::~Uart( void )
    199e:	08 95       	ret

000019a0 <_ZN4User4Uart4sendEh>:
//!	@details
//! \n	Load a data inside the UART TX buffer
/***************************************************************************/

bool Uart::send( uint8_t iu8_data )
{
    19a0:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//UART DEMO
	AT_BUF_PUSH( this -> rpi_tx_buf, iu8_data );
    19a2:	a5 85       	ldd	r26, Z+13	; 0x0d
    19a4:	b6 85       	ldd	r27, Z+14	; 0x0e
    19a6:	84 85       	ldd	r24, Z+12	; 0x0c
    19a8:	a8 0f       	add	r26, r24
    19aa:	b1 1d       	adc	r27, r1
    19ac:	6c 93       	st	X, r22
    19ae:	24 85       	ldd	r18, Z+12	; 0x0c
    19b0:	42 2f       	mov	r20, r18
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	82 85       	ldd	r24, Z+10	; 0x0a
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	48 17       	cp	r20, r24
    19bc:	59 07       	cpc	r21, r25
    19be:	1c f4       	brge	.+6      	; 0x19c6 <_ZN4User4Uart4sendEh+0x26>
    19c0:	2f 5f       	subi	r18, 0xFF	; 255
    19c2:	24 87       	std	Z+12, r18	; 0x0c
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <_ZN4User4Uart4sendEh+0x28>
    19c6:	14 86       	std	Z+12, r1	; 0x0c
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace return
	return false;	//OK
}	//end public setter: send | uint8_t |
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	08 95       	ret

000019cc <_ZN4User4Uart14get_counter_txERj>:
	DENTER();	//Trace Enter
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	uint16_t u16_cnt = this -> gu16_tx_cnt;
    19cc:	fc 01       	movw	r30, r24
    19ce:	83 81       	ldd	r24, Z+3	; 0x03
    19d0:	94 81       	ldd	r25, Z+4	; 0x04
	oru16_cnt = u16_cnt;
    19d2:	fb 01       	movw	r30, r22
    19d4:	80 83       	st	Z, r24
    19d6:	91 83       	std	Z+1, r25	; 0x01
	DRETURN_ARG("TX: %d\n", u16_cnt );	//Trace return
	return false;	//OK
}	//end public getter: get_counter_tx | uint16_t & |
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	08 95       	ret

000019dc <_ZN4User4Uart14get_counter_rxERj>:
	DENTER();	//Trace Enter
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	uint16_t u16_cnt = this -> gu16_rx_cnt;
    19dc:	fc 01       	movw	r30, r24
    19de:	81 81       	ldd	r24, Z+1	; 0x01
    19e0:	92 81       	ldd	r25, Z+2	; 0x02
	oru16_cnt = u16_cnt;
    19e2:	fb 01       	movw	r30, r22
    19e4:	80 83       	st	Z, r24
    19e6:	91 83       	std	Z+1, r25	; 0x01
	DRETURN_ARG("RX: %d\n", u16_cnt );	//Trace return
	return false;	//OK
}	//end public getter: get_counter_rx | uint16_t & |
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	08 95       	ret

000019ec <_ZN4User4Uart7receiveERh>:
//!	@details
//! \n	try to receive a data. if no data has been received, fails
/***************************************************************************/

bool Uart::receive( uint8_t &oru8_data )
{
    19ec:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	//If no rx data
	if (AT_BUF_EMPTY( this -> rpi_rx_buf ) == true)
    19ee:	87 81       	ldd	r24, Z+7	; 0x07
    19f0:	26 81       	ldd	r18, Z+6	; 0x06
    19f2:	82 13       	cpse	r24, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <_ZN4User4Uart7receiveERh+0xe>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <_ZN4User4Uart7receiveERh+0x10>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	81 11       	cpse	r24, r1
    19fe:	19 c0       	rjmp	.+50     	; 0x1a32 <_ZN4User4Uart7receiveERh+0x46>
		u1_ret = true;
	}
	else
	{
		//Profile
		this -> gu16_rx_cnt++;
    1a00:	81 81       	ldd	r24, Z+1	; 0x01
    1a02:	92 81       	ldd	r25, Z+2	; 0x02
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	81 83       	std	Z+1, r24	; 0x01
    1a08:	92 83       	std	Z+2, r25	; 0x02
		//Fetch data
		u8_data = AT_BUF_PEEK( this -> rpi_rx_buf );
    1a0a:	a0 85       	ldd	r26, Z+8	; 0x08
    1a0c:	b1 85       	ldd	r27, Z+9	; 0x09
    1a0e:	42 2f       	mov	r20, r18
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	a4 0f       	add	r26, r20
    1a14:	b5 1f       	adc	r27, r21
    1a16:	3c 91       	ld	r19, X
		AT_BUF_KICK( this -> rpi_rx_buf );
    1a18:	85 81       	ldd	r24, Z+5	; 0x05
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	48 17       	cp	r20, r24
    1a20:	59 07       	cpc	r21, r25
    1a22:	24 f4       	brge	.+8      	; 0x1a2c <_ZN4User4Uart7receiveERh+0x40>
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	26 83       	std	Z+6, r18	; 0x06
		u1_ret = false;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <_ZN4User4Uart7receiveERh+0x4a>
	{
		//Profile
		this -> gu16_rx_cnt++;
		//Fetch data
		u8_data = AT_BUF_PEEK( this -> rpi_rx_buf );
		AT_BUF_KICK( this -> rpi_rx_buf );
    1a2c:	16 82       	std	Z+6, r1	; 0x06
		u1_ret = false;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <_ZN4User4Uart7receiveERh+0x4a>
	
	//If no rx data
	if (AT_BUF_EMPTY( this -> rpi_rx_buf ) == true)
	{
		//No data
		u8_data = 0x00;
    1a32:	30 e0       	ldi	r19, 0x00	; 0
		u1_ret = true;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
		u8_data = AT_BUF_PEEK( this -> rpi_rx_buf );
		AT_BUF_KICK( this -> rpi_rx_buf );
		u1_ret = false;
	}
	//Propagate
	oru8_data = u8_data;
    1a36:	fb 01       	movw	r30, r22
    1a38:	30 83       	st	Z, r19
	DRETURN_ARG("RX: %d %c\n", u1_ret, u8_data );	//Trace return
	return u1_ret;	//OK
}	//end public getter: receive | uint8_t & |
    1a3a:	08 95       	ret

00001a3c <_ZN4User4Uart10isr_rx_exeEv>:
//!	@details
//! Method
/***************************************************************************/

bool Uart::isr_rx_exe( void )
{
    1a3c:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Fetch the data and clear the interrupt flag
	uint8_t rx_data_tmp = USART0.RXDATAL;
    1a3e:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	//If: RX buffer overflow
	if (AT_BUF_NUMELEM( this -> rpi_rx_buf )>=(Config::RX_BUFFER_SIZE-1))
    1a42:	87 81       	ldd	r24, Z+7	; 0x07
    1a44:	96 81       	ldd	r25, Z+6	; 0x06
    1a46:	89 17       	cp	r24, r25
    1a48:	50 f0       	brcs	.+20     	; 0x1a5e <_ZN4User4Uart10isr_rx_exeEv+0x22>
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	29 1b       	sub	r18, r25
    1a50:	31 09       	sbc	r19, r1
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	2f 31       	cpi	r18, 0x1F	; 31
    1a56:	31 05       	cpc	r19, r1
    1a58:	74 f4       	brge	.+28     	; 0x1a76 <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0c c0       	rjmp	.+24     	; 0x1a76 <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    1a5e:	55 81       	ldd	r21, Z+5	; 0x05
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	25 0f       	add	r18, r21
    1a66:	31 1d       	adc	r19, r1
    1a68:	29 1b       	sub	r18, r25
    1a6a:	31 09       	sbc	r19, r1
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	2f 31       	cpi	r18, 0x1F	; 31
    1a70:	31 05       	cpc	r19, r1
    1a72:	0c f4       	brge	.+2      	; 0x1a76 <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	99 23       	and	r25, r25
    1a78:	19 f0       	breq	.+6      	; 0x1a80 <_ZN4User4Uart10isr_rx_exeEv+0x44>
	{
		//TODO: This is an error
		AT_BUF_FLUSH( this -> rpi_rx_buf );
    1a7a:	17 82       	std	Z+7, r1	; 0x07
    1a7c:	16 82       	std	Z+6, r1	; 0x06
    1a7e:	12 c0       	rjmp	.+36     	; 0x1aa4 <_ZN4User4Uart10isr_rx_exeEv+0x68>
	}
	//if: there is space in the RX buffer
	else
	{
		//Push byte into RX buffer for processing
		AT_BUF_PUSH( this -> rpi_rx_buf, rx_data_tmp );
    1a80:	a0 85       	ldd	r26, Z+8	; 0x08
    1a82:	b1 85       	ldd	r27, Z+9	; 0x09
    1a84:	a8 0f       	add	r26, r24
    1a86:	b1 1d       	adc	r27, r1
    1a88:	4c 93       	st	X, r20
    1a8a:	27 81       	ldd	r18, Z+7	; 0x07
    1a8c:	42 2f       	mov	r20, r18
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	85 81       	ldd	r24, Z+5	; 0x05
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	48 17       	cp	r20, r24
    1a98:	59 07       	cpc	r21, r25
    1a9a:	1c f4       	brge	.+6      	; 0x1aa2 <_ZN4User4Uart10isr_rx_exeEv+0x66>
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	27 83       	std	Z+7, r18	; 0x07
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <_ZN4User4Uart10isr_rx_exeEv+0x68>
    1aa2:	17 82       	std	Z+7, r1	; 0x07
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end public method: isr_rx_exe | void |
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	08 95       	ret

00001aa8 <_ZN4User4Uart6updateEv>:
//!	@details
//! Background uart driver method. Meant to be executed periodically by the user
/***************************************************************************/

bool Uart::update( void )
{
    1aa8:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//if: RPI TX buffer is not empty and the RPI TX HW buffer is ready to transmit
	if ( (AT_BUF_NUMELEM( this -> rpi_tx_buf ) > 0) && (IS_BIT_ONE(USART0.STATUS, USART_DREIF_bp)))
    1aaa:	24 85       	ldd	r18, Z+12	; 0x0c
    1aac:	83 85       	ldd	r24, Z+11	; 0x0b
    1aae:	28 17       	cp	r18, r24
    1ab0:	40 f0       	brcs	.+16     	; 0x1ac2 <_ZN4User4Uart6updateEv+0x1a>
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	28 1b       	sub	r18, r24
    1ab6:	31 09       	sbc	r19, r1
    1ab8:	12 16       	cp	r1, r18
    1aba:	13 06       	cpc	r1, r19
    1abc:	5c f0       	brlt	.+22     	; 0x1ad4 <_ZN4User4Uart6updateEv+0x2c>
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	12 c0       	rjmp	.+36     	; 0x1ae6 <_ZN4User4Uart6updateEv+0x3e>
    1ac2:	92 85       	ldd	r25, Z+10	; 0x0a
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	29 0f       	add	r18, r25
    1ac8:	31 1d       	adc	r19, r1
    1aca:	28 1b       	sub	r18, r24
    1acc:	31 09       	sbc	r19, r1
    1ace:	12 16       	cp	r1, r18
    1ad0:	13 06       	cpc	r1, r19
    1ad2:	34 f4       	brge	.+12     	; 0x1ae0 <_ZN4User4Uart6updateEv+0x38>
    1ad4:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    1ad8:	95 fd       	sbrc	r25, 5
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <_ZN4User4Uart6updateEv+0x3c>
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <_ZN4User4Uart6updateEv+0x3e>
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <_ZN4User4Uart6updateEv+0x3e>
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	99 23       	and	r25, r25
    1ae8:	c9 f0       	breq	.+50     	; 0x1b1c <_ZN4User4Uart6updateEv+0x74>
	{
		//Get the byte to be filtered out
		uint8_t tx_tmp = AT_BUF_PEEK( this -> rpi_tx_buf );
    1aea:	a5 85       	ldd	r26, Z+13	; 0x0d
    1aec:	b6 85       	ldd	r27, Z+14	; 0x0e
    1aee:	48 2f       	mov	r20, r24
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	a4 0f       	add	r26, r20
    1af4:	b5 1f       	adc	r27, r21
    1af6:	9c 91       	ld	r25, X
		AT_BUF_KICK( this -> rpi_tx_buf );
    1af8:	22 85       	ldd	r18, Z+10	; 0x0a
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	21 50       	subi	r18, 0x01	; 1
    1afe:	31 09       	sbc	r19, r1
    1b00:	42 17       	cp	r20, r18
    1b02:	53 07       	cpc	r21, r19
    1b04:	1c f4       	brge	.+6      	; 0x1b0c <_ZN4User4Uart6updateEv+0x64>
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	83 87       	std	Z+11, r24	; 0x0b
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <_ZN4User4Uart6updateEv+0x66>
    1b0c:	13 86       	std	Z+11, r1	; 0x0b
		//Send data through the UART
		USART0.TXDATAL = tx_tmp;
    1b0e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		//Profile
		this -> gu16_tx_cnt++;
    1b12:	83 81       	ldd	r24, Z+3	; 0x03
    1b14:	94 81       	ldd	r25, Z+4	; 0x04
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	83 83       	std	Z+3, r24	; 0x03
    1b1a:	94 83       	std	Z+4, r25	; 0x04
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end : update | void |
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	08 95       	ret

00001b20 <_ZN4User4Uart9init_uartER12USART_structj>:
//!	256.0K		||	625		| 20MHz			| Fast		| 265.0KHz
//!	------------------------------------------------------------------------
/***************************************************************************/

bool Uart::init_uart( USART_t &ist_uart, uint16_t iu16_baud )
{
    1b20:	fb 01       	movw	r30, r22
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrl_a		= ist_uart.CTRLA;
    1b22:	25 81       	ldd	r18, Z+5	; 0x05
	uint8_t ctrl_b		= ist_uart.CTRLB;
    1b24:	96 81       	ldd	r25, Z+6	; 0x06
	uint8_t ctrl_c		= ist_uart.CTRLC;
    1b26:	87 81       	ldd	r24, Z+7	; 0x07
	uint8_t dbgctrl_tmp	= ist_uart.DBGCTRL;
    1b28:	63 85       	ldd	r22, Z+11	; 0x0b
	uint8_t ctrl_ev		= ist_uart.EVCTRL;
    1b2a:	34 85       	ldd	r19, Z+12	; 0x0c
    1b2c:	8f 73       	andi	r24, 0x3F	; 63
	//UART will keep running when in debug
	//SET_BIT( dbgctrl_tmp, USART_DBGRUN_bp);
	
	//! UART operation mode
	//Asynchronous UART Mode
	SET_MASKED_BIT( ctrl_c, USART_CMODE_gm, USART_CMODE_ASYNCHRONOUS_gc );
    1b2e:	88 60       	ori	r24, 0x08	; 8
	//Master SPI Mode
	//SET_MASKED_BIT( ctrl_c, USART_CMODE_gm, USART_CMODE_MSPI_gc );
	
	//! 485 Mode
	//Disable 485 Mode
	SET_MASKED_BIT( ctrl_a, USART_RS485_gm, USART_RS485_OFF_gc );
    1b30:	2c 7f       	andi	r18, 0xFC	; 252
    1b32:	99 7f       	andi	r25, 0xF9	; 249
	//Internal 485 mode
	//SET_MASKED_BIT( ctrl_a, USART_RS485_gm, USART_RS485_INT_gc );
	
	//!	RX Mode
	//Normal mode
	SET_MASKED_BIT( ctrl_b, USART_RXMODE_gm, USART_RXMODE_NORMAL_gc );
    1b34:	90 6c       	ori	r25, 0xC0	; 192
	//6 bit
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_6BIT_gc );
	//7 bit
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_7BIT_gc );
	//8 bit
	SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_8BIT_gc );
    1b36:	88 7f       	andi	r24, 0xF8	; 248
    1b38:	83 60       	ori	r24, 0x03	; 3
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_9BITH_gc );
	
	
	//! Parity Mode
	//No parity bit
	SET_MASKED_BIT( ctrl_c, USART_PMODE_gm, USART_PMODE_DISABLED_gc );
    1b3a:	8f 7c       	andi	r24, 0xCF	; 207
	//Enable Data register empty interrupt
	//SET_BIT( ctrl_a, USART_DREIE_bp );
	//Enable TX Interrupt
	//SET_BIT( ctrl_a, USART_TXCIE_bp );
	//Enable RX Interrupt
	SET_BIT( ctrl_a, USART_RXCIE_bp );
    1b3c:	20 68       	ori	r18, 0x80	; 128
	//	WRITE BACK
	//----------------------------------------------------------------
	
	//! Baud rate register
	//Set the baud rate of the peripheral
	ist_uart.BAUD = iu16_baud;
    1b3e:	40 87       	std	Z+8, r20	; 0x08
    1b40:	51 87       	std	Z+9, r21	; 0x09
	
	//! Infrared mode
	//Infrared transmitter pulse length
	ist_uart.TXPLCTRL = 0;
    1b42:	15 86       	std	Z+13, r1	; 0x0d
	//Infrared receiver pulse length
	ist_uart.RXPLCTRL = 0;
    1b44:	16 86       	std	Z+14, r1	; 0x0e
	
	//Write back configuration registers
	ist_uart.DBGCTRL = dbgctrl_tmp;
    1b46:	63 87       	std	Z+11, r22	; 0x0b
	ist_uart.CTRLC = ctrl_c;
    1b48:	87 83       	std	Z+7, r24	; 0x07
	//Writing back this register enables interrupts
	ist_uart.EVCTRL = ctrl_ev;
    1b4a:	34 87       	std	Z+12, r19	; 0x0c
	ist_uart.CTRLA = ctrl_a;
    1b4c:	25 83       	std	Z+5, r18	; 0x05
	//Writing back his register will enables the UART
	ist_uart.CTRLB = ctrl_b;
    1b4e:	96 83       	std	Z+6, r25	; 0x06

	return false; //OK
}	//End: init_uart
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	08 95       	ret

00001b54 <_ZN4User4Uart4initEv>:
//!	@details
//! Method
/***************************************************************************/

bool Uart::init( void )
{
    1b54:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Reset profilers
	this -> gu16_rx_cnt = 0;
    1b56:	11 82       	std	Z+1, r1	; 0x01
    1b58:	12 82       	std	Z+2, r1	; 0x02
	this -> gu16_tx_cnt = 0;
    1b5a:	13 82       	std	Z+3, r1	; 0x03
    1b5c:	14 82       	std	Z+4, r1	; 0x04
	//attach vector to buffer
	AT_BUF_ATTACH( this -> rpi_rx_buf, this -> v0, Config::RX_BUFFER_SIZE);
    1b5e:	0f 96       	adiw	r24, 0x0f	; 15
    1b60:	80 87       	std	Z+8, r24	; 0x08
    1b62:	91 87       	std	Z+9, r25	; 0x09
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	85 83       	std	Z+5, r24	; 0x05
	AT_BUF_FLUSH( this -> rpi_rx_buf );
    1b68:	17 82       	std	Z+7, r1	; 0x07
    1b6a:	16 82       	std	Z+6, r1	; 0x06
	//attach vector to buffer
	AT_BUF_ATTACH( this -> rpi_tx_buf, this -> v1, Config::TX_BUFFER_SIZE);
    1b6c:	cf 01       	movw	r24, r30
    1b6e:	8f 96       	adiw	r24, 0x2f	; 47
    1b70:	85 87       	std	Z+13, r24	; 0x0d
    1b72:	96 87       	std	Z+14, r25	; 0x0e
    1b74:	80 e1       	ldi	r24, 0x10	; 16
    1b76:	82 87       	std	Z+10, r24	; 0x0a
	AT_BUF_FLUSH( this -> rpi_tx_buf );
    1b78:	14 86       	std	Z+12, r1	; 0x0c
    1b7a:	13 86       	std	Z+11, r1	; 0x0b
	//Activate USART0 @256Kb/s
	this->init_uart( USART0, 313 );
    1b7c:	49 e3       	ldi	r20, 0x39	; 57
    1b7e:	51 e0       	ldi	r21, 0x01	; 1
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	78 e0       	ldi	r23, 0x08	; 8
    1b84:	cf 01       	movw	r24, r30
    1b86:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN4User4Uart9init_uartER12USART_structj>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end method: init | void
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	08 95       	ret

00001b8e <_ZN4User4UartC1Ev>:
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class
	this -> init();
    1b8e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN4User4Uart4initEv>
    1b92:	08 95       	ret

00001b94 <_ZN9Orangebot9UniparserD1Ev>:
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
}	//end method: get_arg<int32_t> | uint8_t
    1b94:	08 95       	ret

00001b96 <_ZN9Orangebot9Uniparser14accumulate_argEh>:
//!	@details
//! decode an input character and accumulate it into the argument vector
/***************************************************************************/

bool Uniparser::accumulate_arg( uint8_t data )
{
    1b96:	cf 92       	push	r12
    1b98:	df 92       	push	r13
    1b9a:	ef 92       	push	r14
    1b9c:	ff 92       	push	r15
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	9c 01       	movw	r18, r24
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Fetch argument index
	uint8_t arg_index = this -> g_arg_fsm_status.arg_index;
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	eb 59       	subi	r30, 0x9B	; 155
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	90 81       	ld	r25, Z
    1bac:	e9 2f       	mov	r30, r25
    1bae:	e2 95       	swap	r30
    1bb0:	ef 70       	andi	r30, 0x0F	; 15
	//Fetch argument type index
	uint8_t arg_type_index = this -> g_arg_fsm_status.num_arg;
    1bb2:	96 95       	lsr	r25
    1bb4:	97 70       	andi	r25, 0x07	; 7
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d | Num args: %x\n", this -> g_err, __LINE__, arg_type_index );
		return true;	//fail
	}
	//Fetch argument type
	Arg_type arg_type = (Arg_type)this->g_arg_type[arg_type_index];
    1bb6:	d9 01       	movw	r26, r18
    1bb8:	a9 0f       	add	r26, r25
    1bba:	b1 1d       	adc	r27, r1
    1bbc:	aa 59       	subi	r26, 0x9A	; 154
    1bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc0:	8c 91       	ld	r24, X
	//	BODY
	//----------------------------------------------------------------

		//!Detect sign
	//if sign
	if (IS_SIGN(data))
    1bc2:	6b 32       	cpi	r22, 0x2B	; 43
    1bc4:	11 f0       	breq	.+4      	; 0x1bca <_ZN9Orangebot9Uniparser14accumulate_argEh+0x34>
    1bc6:	6d 32       	cpi	r22, 0x2D	; 45
    1bc8:	69 f4       	brne	.+26     	; 0x1be4 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x4e>
	{
		//If sign is minus, argument sign is true which means minus
		this -> g_arg_fsm_status.arg_sign = (data == '-');
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	6d 32       	cpi	r22, 0x2D	; 45
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x3c>
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	f9 01       	movw	r30, r18
    1bd4:	eb 59       	subi	r30, 0x9B	; 155
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	90 fb       	bst	r25, 0
    1bdc:	80 f9       	bld	r24, 0
    1bde:	80 83       	st	Z, r24
		DRETURN();
		//I'm done updating argument for now. Next round will come actual numbers.
		return false;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	57 c1       	rjmp	.+686    	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	}
		//!Decode numeric value


	//decode the argument descriptor
	switch (arg_type)
    1be4:	85 35       	cpi	r24, 0x55	; 85
    1be6:	09 f4       	brne	.+2      	; 0x1bea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x54>
    1be8:	53 c0       	rjmp	.+166    	; 0x1c90 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xfa>
    1bea:	38 f4       	brcc	.+14     	; 0x1bfa <_ZN9Orangebot9Uniparser14accumulate_argEh+0x64>
    1bec:	84 34       	cpi	r24, 0x44	; 68
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x5c>
    1bf0:	a5 c0       	rjmp	.+330    	; 0x1d3c <_ZN9Orangebot9Uniparser14accumulate_argEh+0x1a6>
    1bf2:	83 35       	cpi	r24, 0x53	; 83
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x62>
    1bf6:	74 c0       	rjmp	.+232    	; 0x1ce0 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x14a>
    1bf8:	3b c1       	rjmp	.+630    	; 0x1e70 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2da>
    1bfa:	83 37       	cpi	r24, 0x73	; 115
    1bfc:	51 f1       	breq	.+84     	; 0x1c52 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xbc>
    1bfe:	85 37       	cpi	r24, 0x75	; 117
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <_ZN9Orangebot9Uniparser14accumulate_argEh+0x74>
    1c02:	84 36       	cpi	r24, 0x64	; 100
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x72>
    1c06:	34 c1       	rjmp	.+616    	; 0x1e70 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2da>
    1c08:	e1 c0       	rjmp	.+450    	; 0x1dcc <_ZN9Orangebot9Uniparser14accumulate_argEh+0x236>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	uint8_t *arg_ptr = &this -> g_arg[arg_index];
    1c0a:	8e 2f       	mov	r24, r30
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1c0e:	f9 01       	movw	r30, r18
    1c10:	e8 0f       	add	r30, r24
    1c12:	f9 1f       	adc	r31, r25
    1c14:	e6 59       	subi	r30, 0x96	; 150
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	40 81       	ld	r20, Z
		case (Arg_type::ARG_U8):
		{
			//Fetch old argument
			uint8_t old = this -> get_arg<uint8_t>( arg_index );
			//Check runtime overflow
			if (old > 25)
    1c1a:	4a 31       	cpi	r20, 0x1A	; 26
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x8a>
    1c1e:	2e c1       	rjmp	.+604    	; 0x1e7c <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2e6>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1c20:	44 0f       	add	r20, r20
    1c22:	54 2f       	mov	r21, r20
    1c24:	55 0f       	add	r21, r21
    1c26:	55 0f       	add	r21, r21
    1c28:	45 0f       	add	r20, r21
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	eb 59       	subi	r30, 0x9B	; 155
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	50 81       	ld	r21, Z
    1c32:	50 fd       	sbrc	r21, 0
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <_ZN9Orangebot9Uniparser14accumulate_argEh+0xa6>
			{
				//Accumulate new digit
				old += data -'0';
    1c36:	64 0f       	add	r22, r20
    1c38:	60 53       	subi	r22, 0x30	; 48
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xac>
			}
			//if: number is negative
			else
			{
				//Accumulate new digit
				old -= data -'0';
    1c3c:	46 1b       	sub	r20, r22
    1c3e:	64 2f       	mov	r22, r20
    1c40:	60 5d       	subi	r22, 0xD0	; 208
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Save the numeric value of the argument
	this -> g_arg[ arg_index ] = (uint8_t)arg;
    1c42:	82 0f       	add	r24, r18
    1c44:	93 1f       	adc	r25, r19
    1c46:	fc 01       	movw	r30, r24
    1c48:	e6 59       	subi	r30, 0x96	; 150
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	60 83       	st	Z, r22
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	20 c1       	rjmp	.+576    	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	int8_t *arg_ptr = ARG_CAST( arg_index, int8_t);
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	e6 59       	subi	r30, 0x96	; 150
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1c5c:	90 81       	ld	r25, Z
		case (Arg_type::ARG_S8):
		{
			//Fetch old argument
			int8_t old = this -> get_arg<int8_t>( arg_index );
			//Check runtime overflow
			if ((old > 12) || (old < -12))
    1c5e:	8c e0       	ldi	r24, 0x0C	; 12
    1c60:	89 0f       	add	r24, r25
    1c62:	89 31       	cpi	r24, 0x19	; 25
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xd2>
    1c66:	0c c1       	rjmp	.+536    	; 0x1e80 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2ea>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1c68:	99 0f       	add	r25, r25
    1c6a:	89 2f       	mov	r24, r25
    1c6c:	88 0f       	add	r24, r24
    1c6e:	88 0f       	add	r24, r24
    1c70:	98 0f       	add	r25, r24
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1c72:	d9 01       	movw	r26, r18
    1c74:	ab 59       	subi	r26, 0x9B	; 155
    1c76:	bf 4f       	sbci	r27, 0xFF	; 255
    1c78:	8c 91       	ld	r24, X
    1c7a:	80 fd       	sbrc	r24, 0
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xee>
			{
				//Accumulate new digit
				old += data -'0';
    1c7e:	69 0f       	add	r22, r25
    1c80:	60 53       	subi	r22, 0x30	; 48
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <_ZN9Orangebot9Uniparser14accumulate_argEh+0xf4>
			}
			//if: number is negative
			else
			{
				//Accumulate new digit
				old -= data -'0';
    1c84:	96 1b       	sub	r25, r22
    1c86:	69 2f       	mov	r22, r25
    1c88:	60 5d       	subi	r22, 0xD0	; 208
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int8_t *arg_ptr = ARG_CAST( arg_index, int8_t );
	//Save the numeric value of the argument
	*arg_ptr = (int8_t)arg;
    1c8a:	60 83       	st	Z, r22
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	01 c1       	rjmp	.+514    	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	uint16_t *arg_ptr = ARG_CAST( arg_index, uint16_t);
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	e6 59       	subi	r30, 0x96	; 150
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	e2 0f       	add	r30, r18
    1c98:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
		case (Arg_type::ARG_U16):
		{
			//Fetch old argument
			uint16_t old = this -> get_arg<uint16_t>( arg_index );
			//Check runtime overflow
			if (old > 6553)
    1c9e:	8a 39       	cpi	r24, 0x9A	; 154
    1ca0:	49 e1       	ldi	r20, 0x19	; 25
    1ca2:	94 07       	cpc	r25, r20
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x112>
    1ca6:	ee c0       	rjmp	.+476    	; 0x1e84 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2ee>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1ca8:	ac 01       	movw	r20, r24
    1caa:	44 0f       	add	r20, r20
    1cac:	55 1f       	adc	r21, r21
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	84 0f       	add	r24, r20
    1cbc:	95 1f       	adc	r25, r21
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1cbe:	d9 01       	movw	r26, r18
    1cc0:	ab 59       	subi	r26, 0x9B	; 155
    1cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc4:	2c 91       	ld	r18, X
    1cc6:	20 fd       	sbrc	r18, 0
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x13c>
			{
				//Accumulate new digit
				old += data -'0';
    1cca:	86 0f       	add	r24, r22
    1ccc:	91 1d       	adc	r25, r1
    1cce:	c0 97       	sbiw	r24, 0x30	; 48
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x142>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1cd2:	86 1b       	sub	r24, r22
    1cd4:	91 09       	sbc	r25, r1
    1cd6:	c0 96       	adiw	r24, 0x30	; 48
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint16_t *arg_ptr = ARG_CAST( arg_index, uint16_t );
	//Save the numeric value of the argument
	*arg_ptr = (uint16_t)arg;
    1cd8:	80 83       	st	Z, r24
    1cda:	91 83       	std	Z+1, r25	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	d9 c0       	rjmp	.+434    	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	int16_t *arg_ptr = ARG_CAST( arg_index, int16_t);
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	e6 59       	subi	r30, 0x96	; 150
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	e2 0f       	add	r30, r18
    1ce8:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
		case (Arg_type::ARG_S16):
		{
			//Fetch old argument
			int16_t old = this -> get_arg<int16_t>( arg_index );
			//Check runtime overflow
			if ((old > 3276) || (old < -3276))
    1cee:	ac 01       	movw	r20, r24
    1cf0:	44 53       	subi	r20, 0x34	; 52
    1cf2:	53 4f       	sbci	r21, 0xF3	; 243
    1cf4:	49 39       	cpi	r20, 0x99	; 153
    1cf6:	59 41       	sbci	r21, 0x19	; 25
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <_ZN9Orangebot9Uniparser14accumulate_argEh+0x166>
    1cfa:	c6 c0       	rjmp	.+396    	; 0x1e88 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2f2>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	44 0f       	add	r20, r20
    1d00:	55 1f       	adc	r21, r21
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	84 0f       	add	r24, r20
    1d10:	95 1f       	adc	r25, r21
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1d12:	d9 01       	movw	r26, r18
    1d14:	ab 59       	subi	r26, 0x9B	; 155
    1d16:	bf 4f       	sbci	r27, 0xFF	; 255
    1d18:	2c 91       	ld	r18, X
    1d1a:	20 fd       	sbrc	r18, 0
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <_ZN9Orangebot9Uniparser14accumulate_argEh+0x194>
			{
				//Accumulate new digit
				old += data -'0';
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	60 53       	subi	r22, 0x30	; 48
    1d22:	71 09       	sbc	r23, r1
    1d24:	86 0f       	add	r24, r22
    1d26:	97 1f       	adc	r25, r23
    1d28:	05 c0       	rjmp	.+10     	; 0x1d34 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x19e>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	60 53       	subi	r22, 0x30	; 48
    1d2e:	71 09       	sbc	r23, r1
    1d30:	86 1b       	sub	r24, r22
    1d32:	97 0b       	sbc	r25, r23
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int16_t *arg_ptr = ARG_CAST( arg_index, int16_t );
	//Save the numeric value of the argument
	*arg_ptr = (int16_t)arg;
    1d34:	80 83       	st	Z, r24
    1d36:	91 83       	std	Z+1, r25	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	ab c0       	rjmp	.+342    	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	uint32_t *arg_ptr = ARG_CAST( arg_index, uint32_t);
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	e6 59       	subi	r30, 0x96	; 150
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	e2 0f       	add	r30, r18
    1d44:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1d46:	80 81       	ld	r24, Z
    1d48:	91 81       	ldd	r25, Z+1	; 0x01
    1d4a:	a2 81       	ldd	r26, Z+2	; 0x02
    1d4c:	b3 81       	ldd	r27, Z+3	; 0x03
		case (Arg_type::ARG_U32):
		{
			//Fetch old argument
			uint32_t old = this -> get_arg<uint32_t>( arg_index );
			//Check runtime overflow
			if (old > 429496729)
    1d4e:	8a 39       	cpi	r24, 0x9A	; 154
    1d50:	49 e9       	ldi	r20, 0x99	; 153
    1d52:	94 07       	cpc	r25, r20
    1d54:	a4 07       	cpc	r26, r20
    1d56:	49 e1       	ldi	r20, 0x19	; 25
    1d58:	b4 07       	cpc	r27, r20
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <_ZN9Orangebot9Uniparser14accumulate_argEh+0x1c8>
    1d5c:	97 c0       	rjmp	.+302    	; 0x1e8c <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2f6>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	aa 1f       	adc	r26, r26
    1d64:	bb 1f       	adc	r27, r27
    1d66:	6c 01       	movw	r12, r24
    1d68:	7d 01       	movw	r14, r26
    1d6a:	cc 0c       	add	r12, r12
    1d6c:	dd 1c       	adc	r13, r13
    1d6e:	ee 1c       	adc	r14, r14
    1d70:	ff 1c       	adc	r15, r15
    1d72:	cc 0c       	add	r12, r12
    1d74:	dd 1c       	adc	r13, r13
    1d76:	ee 1c       	adc	r14, r14
    1d78:	ff 1c       	adc	r15, r15
    1d7a:	8c 0d       	add	r24, r12
    1d7c:	9d 1d       	adc	r25, r13
    1d7e:	ae 1d       	adc	r26, r14
    1d80:	bf 1d       	adc	r27, r15
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1d82:	e9 01       	movw	r28, r18
    1d84:	cb 59       	subi	r28, 0x9B	; 155
    1d86:	df 4f       	sbci	r29, 0xFF	; 255
    1d88:	28 81       	ld	r18, Y
    1d8a:	20 fd       	sbrc	r18, 0
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x212>
			{
				//Accumulate new digit
				old += data -'0';
    1d8e:	46 2f       	mov	r20, r22
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	40 53       	subi	r20, 0x30	; 48
    1d94:	51 09       	sbc	r21, r1
    1d96:	05 2e       	mov	r0, r21
    1d98:	00 0c       	add	r0, r0
    1d9a:	66 0b       	sbc	r22, r22
    1d9c:	77 0b       	sbc	r23, r23
    1d9e:	84 0f       	add	r24, r20
    1da0:	95 1f       	adc	r25, r21
    1da2:	a6 1f       	adc	r26, r22
    1da4:	b7 1f       	adc	r27, r23
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x22a>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1da8:	46 2f       	mov	r20, r22
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	40 53       	subi	r20, 0x30	; 48
    1dae:	51 09       	sbc	r21, r1
    1db0:	05 2e       	mov	r0, r21
    1db2:	00 0c       	add	r0, r0
    1db4:	66 0b       	sbc	r22, r22
    1db6:	77 0b       	sbc	r23, r23
    1db8:	84 1b       	sub	r24, r20
    1dba:	95 0b       	sbc	r25, r21
    1dbc:	a6 0b       	sbc	r26, r22
    1dbe:	b7 0b       	sbc	r27, r23
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint32_t *arg_ptr = ARG_CAST( arg_index, uint32_t );
	//Save the numeric value of the argument
	*arg_ptr = (uint32_t)arg;
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	a2 83       	std	Z+2, r26	; 0x02
    1dc6:	b3 83       	std	Z+3, r27	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	63 c0       	rjmp	.+198    	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	int32_t *arg_ptr = ARG_CAST( arg_index, int32_t);
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	e6 59       	subi	r30, 0x96	; 150
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	e2 0f       	add	r30, r18
    1dd4:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	a2 81       	ldd	r26, Z+2	; 0x02
    1ddc:	b3 81       	ldd	r27, Z+3	; 0x03
		case (Arg_type::ARG_S32):
		{
			//Fetch old argument
			int32_t old = this -> get_arg<int32_t>( arg_index );
			//Check runtime overflow
			if ((old > 214748364) || (old < -214748364))
    1dde:	6c 01       	movw	r12, r24
    1de0:	7d 01       	movw	r14, r26
    1de2:	5c ec       	ldi	r21, 0xCC	; 204
    1de4:	c5 0e       	add	r12, r21
    1de6:	d5 1e       	adc	r13, r21
    1de8:	e5 1e       	adc	r14, r21
    1dea:	5c e0       	ldi	r21, 0x0C	; 12
    1dec:	f5 1e       	adc	r15, r21
    1dee:	79 e9       	ldi	r23, 0x99	; 153
    1df0:	c7 16       	cp	r12, r23
    1df2:	d7 06       	cpc	r13, r23
    1df4:	e7 06       	cpc	r14, r23
    1df6:	79 e1       	ldi	r23, 0x19	; 25
    1df8:	f7 06       	cpc	r15, r23
    1dfa:	08 f0       	brcs	.+2      	; 0x1dfe <_ZN9Orangebot9Uniparser14accumulate_argEh+0x268>
    1dfc:	49 c0       	rjmp	.+146    	; 0x1e90 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fa>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	aa 1f       	adc	r26, r26
    1e04:	bb 1f       	adc	r27, r27
    1e06:	6c 01       	movw	r12, r24
    1e08:	7d 01       	movw	r14, r26
    1e0a:	cc 0c       	add	r12, r12
    1e0c:	dd 1c       	adc	r13, r13
    1e0e:	ee 1c       	adc	r14, r14
    1e10:	ff 1c       	adc	r15, r15
    1e12:	cc 0c       	add	r12, r12
    1e14:	dd 1c       	adc	r13, r13
    1e16:	ee 1c       	adc	r14, r14
    1e18:	ff 1c       	adc	r15, r15
    1e1a:	c8 0e       	add	r12, r24
    1e1c:	d9 1e       	adc	r13, r25
    1e1e:	ea 1e       	adc	r14, r26
    1e20:	fb 1e       	adc	r15, r27
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1e22:	d9 01       	movw	r26, r18
    1e24:	ab 59       	subi	r26, 0x9B	; 155
    1e26:	bf 4f       	sbci	r27, 0xFF	; 255
    1e28:	8c 91       	ld	r24, X
    1e2a:	80 fd       	sbrc	r24, 0
    1e2c:	0c c0       	rjmp	.+24     	; 0x1e46 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2b0>
			{
				//Accumulate new digit
				old += data -'0';
    1e2e:	86 2f       	mov	r24, r22
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	c0 97       	sbiw	r24, 0x30	; 48
    1e34:	09 2e       	mov	r0, r25
    1e36:	00 0c       	add	r0, r0
    1e38:	aa 0b       	sbc	r26, r26
    1e3a:	bb 0b       	sbc	r27, r27
    1e3c:	8c 0d       	add	r24, r12
    1e3e:	9d 1d       	adc	r25, r13
    1e40:	ae 1d       	adc	r26, r14
    1e42:	bf 1d       	adc	r27, r15
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2ce>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1e46:	86 2f       	mov	r24, r22
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	c0 97       	sbiw	r24, 0x30	; 48
    1e4c:	09 2e       	mov	r0, r25
    1e4e:	00 0c       	add	r0, r0
    1e50:	aa 0b       	sbc	r26, r26
    1e52:	bb 0b       	sbc	r27, r27
    1e54:	a7 01       	movw	r20, r14
    1e56:	96 01       	movw	r18, r12
    1e58:	28 1b       	sub	r18, r24
    1e5a:	39 0b       	sbc	r19, r25
    1e5c:	4a 0b       	sbc	r20, r26
    1e5e:	5b 0b       	sbc	r21, r27
    1e60:	da 01       	movw	r26, r20
    1e62:	c9 01       	movw	r24, r18
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int32_t *arg_ptr = ARG_CAST( arg_index, int32_t );
	//Save the numeric value of the argument
	*arg_ptr = (int32_t)arg;
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	a2 83       	std	Z+2, r26	; 0x02
    1e6a:	b3 83       	std	Z+3, r27	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	11 c0       	rjmp	.+34     	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			break;
		}
		//Unrecognized argument descriptor in the dictionary
		default:
		{
			this -> g_err = Err_codes::ERR_GENERIC;
    1e70:	f9 01       	movw	r30, r18
    1e72:	ec 58       	subi	r30, 0x8C	; 140
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	80 83       	st	Z, r24
			DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
			return true;	//fail
    1e7a:	0b c0       	rjmp	.+22     	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			uint8_t old = this -> get_arg<uint8_t>( arg_index );
			//Check runtime overflow
			if (old > 25)
			{
				return true;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			int8_t old = this -> get_arg<int8_t>( arg_index );
			//Check runtime overflow
			if ((old > 12) || (old < -12))
			{
				return true;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	07 c0       	rjmp	.+14     	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			uint16_t old = this -> get_arg<uint16_t>( arg_index );
			//Check runtime overflow
			if (old > 6553)
			{
				return true;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			int16_t old = this -> get_arg<int16_t>( arg_index );
			//Check runtime overflow
			if ((old > 3276) || (old < -3276))
			{
				return true;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			uint32_t old = this -> get_arg<uint32_t>( arg_index );
			//Check runtime overflow
			if (old > 429496729)
			{
				return true;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			int32_t old = this -> get_arg<int32_t>( arg_index );
			//Check runtime overflow
			if ((old > 214748364) || (old < -214748364))
			{
				return true;
    1e90:	81 e0       	ldi	r24, 0x01	; 1

	//Trace Return vith return value
	DRETURN();

	return false; //OK
}	//end method: accumulate_arg | uint8_t
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	08 95       	ret

00001ea0 <_ZN9Orangebot9Uniparser9close_argEv>:
//!	@details
//! Argument has been fully decoded into argument string. Update argument descriptor FSM.
/***************************************************************************/

bool Uniparser::close_arg( void )
{
    1ea0:	ac 01       	movw	r20, r24
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Fetch argument index
	uint8_t arg_index = this -> g_arg_fsm_status.arg_index;
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	eb 59       	subi	r30, 0x9B	; 155
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	90 81       	ld	r25, Z
    1eaa:	29 2f       	mov	r18, r25
    1eac:	22 95       	swap	r18
    1eae:	2f 70       	andi	r18, 0x0F	; 15
	//Fetch argument type index
	uint8_t arg_type_index = this -> g_arg_fsm_status.num_arg;
    1eb0:	96 95       	lsr	r25
    1eb2:	97 70       	andi	r25, 0x07	; 7
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d | Num args: %x\n", this -> g_err, __LINE__, arg_type_index );
		return true;	//fail
	}
	//Fetch argument type
	Arg_type arg_type = (Arg_type)this->g_arg_type[arg_type_index];
    1eb4:	fa 01       	movw	r30, r20
    1eb6:	e9 0f       	add	r30, r25
    1eb8:	f1 1d       	adc	r31, r1
    1eba:	ea 59       	subi	r30, 0x9A	; 154
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
	//	BODY
	//----------------------------------------------------------------

		//! Advance the argument index to the first free byte in the argument vector
	//If: one byte argument
	if ((arg_type == Arg_type::ARG_U8) || (arg_type == Arg_type::ARG_S8))
    1ec0:	85 37       	cpi	r24, 0x75	; 117
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <_ZN9Orangebot9Uniparser9close_argEv+0x28>
    1ec4:	83 37       	cpi	r24, 0x73	; 115
    1ec6:	11 f4       	brne	.+4      	; 0x1ecc <_ZN9Orangebot9Uniparser9close_argEv+0x2c>
	{
		//Skip the argument descriptor and the argument itself
		arg_index += Arg_size::ARG_S8_SIZE;
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	0b c0       	rjmp	.+22     	; 0x1ee2 <_ZN9Orangebot9Uniparser9close_argEv+0x42>
	}
	//If: two bytes argument
	else if ((arg_type == Arg_type::ARG_U16) || (arg_type == Arg_type::ARG_S16))
    1ecc:	85 35       	cpi	r24, 0x55	; 85
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <_ZN9Orangebot9Uniparser9close_argEv+0x34>
    1ed0:	83 35       	cpi	r24, 0x53	; 83
    1ed2:	11 f4       	brne	.+4      	; 0x1ed8 <_ZN9Orangebot9Uniparser9close_argEv+0x38>
	{
		//Skip the argument descriptor and the argument itself
		arg_index += Arg_size::ARG_S16_SIZE;
    1ed4:	2e 5f       	subi	r18, 0xFE	; 254
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <_ZN9Orangebot9Uniparser9close_argEv+0x42>
	}
	//If: four bytes argument
	else if ((arg_type == Arg_type::ARG_U32) || (arg_type == Arg_type::ARG_S32))
    1ed8:	84 34       	cpi	r24, 0x44	; 68
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <_ZN9Orangebot9Uniparser9close_argEv+0x40>
    1edc:	84 36       	cpi	r24, 0x64	; 100
    1ede:	e9 f4       	brne	.+58     	; 0x1f1a <_ZN9Orangebot9Uniparser9close_argEv+0x7a>
	{
		//Skip the argument descriptor and the argument itself
		arg_index += Arg_size::ARG_S32_SIZE;
    1ee0:	2c 5f       	subi	r18, 0xFC	; 252
		//failure
		return true;
	}
		//! Check that index is valid
	//if: index is above bit width or exceed the argument vector size
	if ((arg_index > UNIPARSER_MAX_ARG_INDEX) || (arg_index > UNIPARSER_ARG_VECTOR_SIZE))
    1ee2:	29 30       	cpi	r18, 0x09	; 9
    1ee4:	40 f0       	brcs	.+16     	; 0x1ef6 <_ZN9Orangebot9Uniparser9close_argEv+0x56>
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//Prepare the argument descriptor. zero arguments are in store
	this -> g_arg_fsm_status.num_arg = 0;
    1ee6:	fa 01       	movw	r30, r20
    1ee8:	eb 59       	subi	r30, 0x9B	; 155
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
	//First free slot in the argument vector is the first byte
	this -> g_arg_fsm_status.arg_index = 0;
	//if sign is not specified, default argument sign is plus
	this -> g_arg_fsm_status.arg_sign = false;
    1eec:	10 82       	st	Z, r1
	{
		//Restart the argument decoder
		this -> init_arg_decoder();
		//
		DPRINT("ERR: Exceeded alloted argument vector size with index: %d\n", arg_index);
		this -> g_err = Err_codes::ERR_GENERIC;
    1eee:	3f 96       	adiw	r30, 0x0f	; 15
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	80 83       	st	Z, r24
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
    1ef4:	08 95       	ret
	}
	//Write back index
	this -> g_arg_fsm_status.arg_index = arg_index;
    1ef6:	fa 01       	movw	r30, r20
    1ef8:	eb 59       	subi	r30, 0x9B	; 155
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	22 95       	swap	r18
    1efe:	20 7f       	andi	r18, 0xF0	; 240
    1f00:	30 81       	ld	r19, Z
    1f02:	3f 70       	andi	r19, 0x0F	; 15
    1f04:	32 2b       	or	r19, r18
	//Update number of decoded arguments
	this -> g_arg_fsm_status.num_arg++;
    1f06:	9f 5f       	subi	r25, 0xFF	; 255
    1f08:	97 70       	andi	r25, 0x07	; 7
    1f0a:	29 2f       	mov	r18, r25
    1f0c:	22 0f       	add	r18, r18
    1f0e:	93 2f       	mov	r25, r19
    1f10:	91 7f       	andi	r25, 0xF1	; 241
    1f12:	92 2b       	or	r25, r18
    1f14:	90 83       	st	Z, r25
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	08 95       	ret
		return true;
	}
	else
	{
		//failure
		return true;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1

	//Trace Return vith return value
	DRETURN();

	return false; //OK
}	//end method: close_arg | void
    1f1c:	08 95       	ret

00001f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Save the error code
	this -> g_err = err_code;
    1f1e:	8c 58       	subi	r24, 0x8C	; 140
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	fc 01       	movw	r30, r24
    1f24:	60 83       	st	Z, r22
    1f26:	08 95       	ret

00001f28 <_ZN9Orangebot9Uniparser7chk_cmdEPKh>:
//! Check command syntax to prevent bad commands from being loaded in the dictionary
//! Saves runtime check for bad dictionary entries
/***************************************************************************/

bool Uniparser::chk_cmd( const uint8_t *cmd )
{
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	ec 01       	movw	r28, r24
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//If a null pointer function handler was given
	if (cmd == nullptr)
    1f2e:	61 15       	cp	r22, r1
    1f30:	71 05       	cpc	r23, r1
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x16>
	{
		this -> error_handler( Err_codes::SYNTAX_BAD_POINTER );
    1f34:	68 e0       	ldi	r22, 0x08	; 8
    1f36:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR%d: | Bad handler function pointer\n", Err_codes::SYNTAX_BAD_POINTER);
		return true; //FAIL
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	77 c0       	rjmp	.+238    	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//if: first char is not a letter
	if (!IS_LETTER( cmd[0] ))
    1f3e:	fb 01       	movw	r30, r22
    1f40:	80 81       	ld	r24, Z
    1f42:	9f e9       	ldi	r25, 0x9F	; 159
    1f44:	98 0f       	add	r25, r24
    1f46:	9a 31       	cpi	r25, 0x1A	; 26
    1f48:	48 f0       	brcs	.+18     	; 0x1f5c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x34>
    1f4a:	81 54       	subi	r24, 0x41	; 65
    1f4c:	8a 31       	cpi	r24, 0x1A	; 26
    1f4e:	50 f0       	brcs	.+20     	; 0x1f64 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x3c>
	{
		this -> error_handler( Err_codes::SYNTAX_FIRST_NOLETTER );
    1f50:	6e e0       	ldi	r22, 0x0E	; 14
    1f52:	ce 01       	movw	r24, r28
    1f54:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR%d | First character of a command must be a letter\n", Err_codes::SYNTAX_FIRST_NOLETTER);
		return true; //FAIL
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	68 c0       	rjmp	.+208    	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x42>
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	91 e0       	ldi	r25, 0x01	; 1
	}

	//Initialize counter
	t = 1;
	//While: parsing is not done
	while ((cmd[t] != '\0') && (t < UNIPARSER_MAX_CMD_LENGTH))
    1f6a:	29 2f       	mov	r18, r25
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	fb 01       	movw	r30, r22
    1f70:	e2 0f       	add	r30, r18
    1f72:	f3 1f       	adc	r31, r19
    1f74:	40 81       	ld	r20, Z
    1f76:	44 23       	and	r20, r20
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x54>
    1f7a:	4f c0       	rjmp	.+158    	; 0x201a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xf2>
    1f7c:	90 32       	cpi	r25, 0x20	; 32
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x5a>
    1f80:	4c c0       	rjmp	.+152    	; 0x201a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xf2>
	{
		//if: argument descriptor
		if (cmd[t] == '%')
    1f82:	45 32       	cpi	r20, 0x25	; 37
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x60>
    1f86:	47 c0       	rjmp	.+142    	; 0x2016 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xee>
		{
				//!Check number of arguments
			//i have an argument descriptor
			arg_type_cnt++;
    1f88:	5f 5f       	subi	r21, 0xFF	; 255
			//if: exceed number of arguments
			if (arg_type_cnt > UNIPARSER_MAX_ARGS)
    1f8a:	55 30       	cpi	r21, 0x05	; 5
    1f8c:	30 f0       	brcs	.+12     	; 0x1f9a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x72>
			{
				this -> error_handler( Err_codes::SYNTAX_TOO_MANY_ARGS );
    1f8e:	6a e0       	ldi	r22, 0x0A	; 10
    1f90:	ce 01       	movw	r24, r28
    1f92:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR%d in line %d | too many arguments in this command %d\n", Err_codes::SYNTAX_TOO_MANY_ARGS, __LINE__, arg_type_cnt);
				return true; //FAIL
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	49 c0       	rjmp	.+146    	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
			}
				//!Check back to back arguments
			//if: two arguments back to back
			if ( (t >= 2) && (cmd[t -2] == '%') )
    1f9a:	92 30       	cpi	r25, 0x02	; 2
    1f9c:	70 f0       	brcs	.+28     	; 0x1fba <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x92>
    1f9e:	22 50       	subi	r18, 0x02	; 2
    1fa0:	31 09       	sbc	r19, r1
    1fa2:	fb 01       	movw	r30, r22
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	85 32       	cpi	r24, 0x25	; 37
    1fac:	31 f4       	brne	.+12     	; 0x1fba <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x92>
			{
				this -> error_handler( Err_codes::SYNTAX_ARG_BACKTOBACK );
    1fae:	6b e0       	ldi	r22, 0x0B	; 11
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR%d in line %d | Two back to back arguments were given. Add a character in between them\n", Err_codes::SYNTAX_ARG_BACKTOBACK, __LINE__);
				return true;	//FAIL
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	39 c0       	rjmp	.+114    	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
			}

				//!Check total size of arguments
			//Skip the argument descriptor
			t++;
    1fba:	9f 5f       	subi	r25, 0xFF	; 255
			//Switch: argument type
			switch( cmd[t] )
    1fbc:	fb 01       	movw	r30, r22
    1fbe:	e9 0f       	add	r30, r25
    1fc0:	f1 1d       	adc	r31, r1
    1fc2:	20 81       	ld	r18, Z
    1fc4:	25 35       	cpi	r18, 0x55	; 85
    1fc6:	89 f0       	breq	.+34     	; 0x1fea <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xc2>
    1fc8:	28 f4       	brcc	.+10     	; 0x1fd4 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xac>
    1fca:	24 34       	cpi	r18, 0x44	; 68
    1fcc:	91 f0       	breq	.+36     	; 0x1ff2 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xca>
    1fce:	23 35       	cpi	r18, 0x53	; 83
    1fd0:	71 f0       	breq	.+28     	; 0x1fee <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xc6>
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xd2>
    1fd4:	23 37       	cpi	r18, 0x73	; 115
    1fd6:	39 f0       	breq	.+14     	; 0x1fe6 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xbe>
    1fd8:	25 37       	cpi	r18, 0x75	; 117
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xba>
    1fdc:	24 36       	cpi	r18, 0x64	; 100
    1fde:	69 f4       	brne	.+26     	; 0x1ffa <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xd2>
    1fe0:	0a c0       	rjmp	.+20     	; 0x1ff6 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xce>
			{
				//Decode type
				case Arg_type::ARG_U8:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_U8_SIZE;
    1fe2:	af 5f       	subi	r26, 0xFF	; 255
					break;
    1fe4:	10 c0       	rjmp	.+32     	; 0x2006 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_S8:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_S8_SIZE;
    1fe6:	af 5f       	subi	r26, 0xFF	; 255
					break;
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_U16:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_U16_SIZE;
    1fea:	ae 5f       	subi	r26, 0xFE	; 254
					break;
    1fec:	0c c0       	rjmp	.+24     	; 0x2006 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_S16:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_S16_SIZE;
    1fee:	ae 5f       	subi	r26, 0xFE	; 254
					break;
    1ff0:	0a c0       	rjmp	.+20     	; 0x2006 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_U32:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_U32_SIZE;
    1ff2:	ac 5f       	subi	r26, 0xFC	; 252
					break;
    1ff4:	08 c0       	rjmp	.+16     	; 0x2006 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_S32:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_S32_SIZE;
    1ff6:	ac 5f       	subi	r26, 0xFC	; 252
					break;
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				default:
				{
					this -> error_handler( Err_codes::SYNTAX_ARG_TYPE_INVALID );
    1ffa:	69 e0       	ldi	r22, 0x09	; 9
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR%d in line %d | Invalid argument descriptor %x\n", Err_codes::SYNTAX_ARG_TYPE_INVALID , __LINE__, cmd[t]);
					return true;	//FAIL
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	13 c0       	rjmp	.+38     	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
				}
			}	//End Switch: argument type
			//Check size
			if (arg_cnt > UNIPARSER_ARG_VECTOR_SIZE)
    2006:	a9 30       	cpi	r26, 0x09	; 9
    2008:	30 f0       	brcs	.+12     	; 0x2016 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xee>
			{
				this -> error_handler( Err_codes::SYNTAX_ARG_LENGTH );
    200a:	6c e0       	ldi	r22, 0x0C	; 12
    200c:	ce 01       	movw	r24, r28
    200e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR%d in line %d | Invalid argument descriptor %x\n", Err_codes::SYNTAX_ARG_LENGTH , __LINE__, cmd[t]);
				return true;	//FAIL
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	0b c0       	rjmp	.+22     	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
			}
		}	//End if: argument descriptor
		//Parse next byte
		t++;
    2016:	9f 5f       	subi	r25, 0xFF	; 255
	}

	//Initialize counter
	t = 1;
	//While: parsing is not done
	while ((cmd[t] != '\0') && (t < UNIPARSER_MAX_CMD_LENGTH))
    2018:	a8 cf       	rjmp	.-176    	; 0x1f6a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x42>
		}	//End if: argument descriptor
		//Parse next byte
		t++;
	}	//End While: parsing is not done
	//If command size has been exceeded
	if (t >= UNIPARSER_MAX_CMD_LENGTH)
    201a:	90 32       	cpi	r25, 0x20	; 32
    201c:	30 f0       	brcs	.+12     	; 0x202a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x102>
	{
		this -> error_handler( Err_codes::SYNTAX_LENGTH );
    201e:	6d e0       	ldi	r22, 0x0D	; 13
    2020:	ce 01       	movw	r24, r28
    2022:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR%d in line %d | Given command was too long %d\n", Err_codes::SYNTAX_LENGTH , __LINE__, t);
		return true;	//FAIL
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	01 c0       	rjmp	.+2      	; 0x202c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN();
	return false; //OK
    202a:	80 e0       	ldi	r24, 0x00	; 0
}	//end method: chk_cmd | const uint8_t *
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	08 95       	ret

00002032 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>:
//! Add a string and a function pointer to the parser
//!	@todo check that command is valid
/***************************************************************************/

bool Uniparser::add_cmd( const char *cmd, void *handler )
{
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//if: input is invalid
	if ((cmd == nullptr) || (handler == nullptr))
    203e:	61 15       	cp	r22, r1
    2040:	71 05       	cpc	r23, r1
    2042:	19 f0       	breq	.+6      	; 0x204a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x18>
    2044:	41 15       	cp	r20, r1
    2046:	51 05       	cpc	r21, r1
    2048:	39 f4       	brne	.+14     	; 0x2058 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x26>
	{
		this -> g_err = ERR_INVALID_CMD;
    204a:	fc 01       	movw	r30, r24
    204c:	ec 58       	subi	r30, 0x8C	; 140
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	25 e0       	ldi	r18, 0x05	; 5
    2052:	20 83       	st	Z, r18
		DRETURN_ARG("ERR%d: ERR_INVALID_CMD\n", this -> g_err);
		return true;	//fail
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	21 c0       	rjmp	.+66     	; 0x209a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x68>
		this -> g_err = ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
	}
	//if: maximum number of command has been reached
	if (this -> g_num_cmd >= (UNIPARSER_MAX_CMD-1))
    2058:	fc 01       	movw	r30, r24
    205a:	20 81       	ld	r18, Z
    205c:	23 31       	cpi	r18, 0x13	; 19
    205e:	30 f0       	brcs	.+12     	; 0x206c <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x3a>
	{
		this -> g_err = ERR_ADD_MAX_CMD;
    2060:	ec 58       	subi	r30, 0x8C	; 140
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	26 e0       	ldi	r18, 0x06	; 6
    2066:	20 83       	st	Z, r18
		DRETURN_ARG("ERR%d: ERR_ADD_MAX_CMD in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	17 c0       	rjmp	.+46     	; 0x209a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x68>
    206c:	7a 01       	movw	r14, r20
    206e:	8b 01       	movw	r16, r22
    2070:	ec 01       	movw	r28, r24
	}
	// check the validity of the string
	bool f_ret = this -> chk_cmd((const uint8_t *)cmd);
    2072:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_ZN9Orangebot9Uniparser7chk_cmdEPKh>
	//If: command had a syntax error
	if (f_ret == true)
    2076:	81 11       	cpse	r24, r1
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x66>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Fetch currently used command
	t = this -> g_num_cmd;
    207a:	88 81       	ld	r24, Y
	//Link command handler and command text
	this -> g_cmd_txt[t] = (uint8_t *)cmd;
    207c:	e8 2f       	mov	r30, r24
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ec 0f       	add	r30, r28
    2086:	fd 1f       	adc	r31, r29
    2088:	01 83       	std	Z+1, r16	; 0x01
    208a:	12 83       	std	Z+2, r17	; 0x02
	this -> g_cmd_handler[t] = handler;
    208c:	e5 ae       	std	Z+61, r14	; 0x3d
    208e:	f6 ae       	std	Z+62, r15	; 0x3e
	DPRINT("Command >%s< with handler >%p< has been added with index: %d\n", cmd, (void *)handler, t);
	//A command has been added
	this -> g_num_cmd = t +1;
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	88 83       	st	Y, r24
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN();
	return false;
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	01 c0       	rjmp	.+2      	; 0x209a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x68>
	bool f_ret = this -> chk_cmd((const uint8_t *)cmd);
	//If: command had a syntax error
	if (f_ret == true)
	{
		DRETURN_ARG("command didnt get past argument descriptor check\n");
		return true;	//FAIL
    2098:	81 e0       	ldi	r24, 0x01	; 1
	//	RETURN
	//----------------------------------------------------------------

	DRETURN();
	return false;
}	//end method: add_command | const char *, void *
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	08 95       	ret

000020a8 <_ZN9Orangebot9Uniparser7add_argEh>:
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
	}
	//Fetch index inside the command
	uint8_t cmd_index = this -> g_cmd_index[ cmd_id ];
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	fc 01       	movw	r30, r24
    20ac:	e6 0f       	add	r30, r22
    20ae:	f7 1f       	adc	r31, r23
    20b0:	21 a5       	ldd	r18, Z+41	; 0x29
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
	}
	//Point to the argument type
    cmd_index++;
    20b2:	2f 5f       	subi	r18, 0xFF	; 255
	//!	ARG Index points to first free slot in the argument vector
	//! I save argument type and initialize the content

		//! Initialize argument identifier
	//argument descriptor is held in the dictionary
	Arg_type arg_type = (Arg_type)this -> g_cmd_txt[cmd_id][cmd_index];
    20b4:	66 0f       	add	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	fc 01       	movw	r30, r24
    20ba:	e6 0f       	add	r30, r22
    20bc:	f7 1f       	adc	r31, r23
    20be:	01 80       	ldd	r0, Z+1	; 0x01
    20c0:	f2 81       	ldd	r31, Z+2	; 0x02
    20c2:	e0 2d       	mov	r30, r0
    20c4:	e2 0f       	add	r30, r18
    20c6:	f1 1d       	adc	r31, r1
    20c8:	30 81       	ld	r19, Z
	//Fetch index to the next free argument slot
	uint8_t arg_type_index = this -> g_arg_fsm_status.num_arg;
    20ca:	fc 01       	movw	r30, r24
    20cc:	eb 59       	subi	r30, 0x9B	; 155
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	20 81       	ld	r18, Z
    20d2:	26 95       	lsr	r18
    20d4:	27 70       	andi	r18, 0x07	; 7
	//Store argument type in the argument type vector
	this -> g_arg_type[ arg_type_index ] = arg_type;
    20d6:	dc 01       	movw	r26, r24
    20d8:	a2 0f       	add	r26, r18
    20da:	b1 1d       	adc	r27, r1
    20dc:	aa 59       	subi	r26, 0x9A	; 154
    20de:	bf 4f       	sbci	r27, 0xFF	; 255
    20e0:	3c 93       	st	X, r19
	//A new argument is being added. Reset the argument sign (@TODO: do this earlier)
	this -> g_arg_fsm_status.arg_sign = false;
    20e2:	20 81       	ld	r18, Z
    20e4:	2e 7f       	andi	r18, 0xFE	; 254
    20e6:	20 83       	st	Z, r18
	//fetch argument index
	uint8_t arg_index = this -> g_arg_fsm_status.arg_index;
    20e8:	22 95       	swap	r18
    20ea:	2f 70       	andi	r18, 0x0F	; 15
	DPRINT("argument of type >%c< added | Num arguments: %d | Arg index: %d | Arg sign %c \n", arg_type, this -> g_arg_fsm_status.num_arg, arg_index, (this -> g_arg_fsm_status.arg_sign)?('-'):('+') );

		//! Initialize argument content
	//switch: decode argument desriptor
	switch (arg_type)
    20ec:	35 35       	cpi	r19, 0x55	; 85
    20ee:	09 f1       	breq	.+66     	; 0x2132 <_ZN9Orangebot9Uniparser7add_argEh+0x8a>
    20f0:	28 f4       	brcc	.+10     	; 0x20fc <_ZN9Orangebot9Uniparser7add_argEh+0x54>
    20f2:	34 34       	cpi	r19, 0x44	; 68
    20f4:	91 f1       	breq	.+100    	; 0x215a <_ZN9Orangebot9Uniparser7add_argEh+0xb2>
    20f6:	33 35       	cpi	r19, 0x53	; 83
    20f8:	31 f1       	breq	.+76     	; 0x2146 <_ZN9Orangebot9Uniparser7add_argEh+0x9e>
    20fa:	47 c0       	rjmp	.+142    	; 0x218a <_ZN9Orangebot9Uniparser7add_argEh+0xe2>
    20fc:	33 37       	cpi	r19, 0x73	; 115
    20fe:	71 f0       	breq	.+28     	; 0x211c <_ZN9Orangebot9Uniparser7add_argEh+0x74>
    2100:	35 37       	cpi	r19, 0x75	; 117
    2102:	21 f0       	breq	.+8      	; 0x210c <_ZN9Orangebot9Uniparser7add_argEh+0x64>
    2104:	34 36       	cpi	r19, 0x64	; 100
    2106:	09 f0       	breq	.+2      	; 0x210a <_ZN9Orangebot9Uniparser7add_argEh+0x62>
    2108:	40 c0       	rjmp	.+128    	; 0x218a <_ZN9Orangebot9Uniparser7add_argEh+0xe2>
    210a:	33 c0       	rjmp	.+102    	; 0x2172 <_ZN9Orangebot9Uniparser7add_argEh+0xca>
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Save the numeric value of the argument
	this -> g_arg[ arg_index ] = (uint8_t)arg;
    210c:	fc 01       	movw	r30, r24
    210e:	e2 0f       	add	r30, r18
    2110:	f1 1d       	adc	r31, r1
    2112:	e6 59       	subi	r30, 0x96	; 150
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	10 82       	st	Z, r1
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    2118:	80 e0       	ldi	r24, 0x00	; 0
	{
		case Arg_type::ARG_U8:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<uint8_t>( arg_index, (uint8_t)0 );
			break;
    211a:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int8_t *arg_ptr = ARG_CAST( arg_index, int8_t );
    211c:	e2 2f       	mov	r30, r18
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	9f 01       	movw	r18, r30
    2122:	26 59       	subi	r18, 0x96	; 150
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	fc 01       	movw	r30, r24
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (int8_t)arg;
    212c:	10 82       	st	Z, r1
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    212e:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_S8:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<int8_t>( arg_index, (int8_t)0 );
			break;
    2130:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint16_t *arg_ptr = ARG_CAST( arg_index, uint16_t );
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	26 59       	subi	r18, 0x96	; 150
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	fc 01       	movw	r30, r24
    213a:	e2 0f       	add	r30, r18
    213c:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (uint16_t)arg;
    213e:	10 82       	st	Z, r1
    2140:	11 82       	std	Z+1, r1	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    2142:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_U16:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<uint16_t>( arg_index, (uint16_t)0 );
			break;
    2144:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int16_t *arg_ptr = ARG_CAST( arg_index, int16_t );
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	26 59       	subi	r18, 0x96	; 150
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (int16_t)arg;
    2152:	10 82       	st	Z, r1
    2154:	11 82       	std	Z+1, r1	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    2156:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_S16:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<int16_t>( arg_index, (int16_t)0 );
			break;
    2158:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint32_t *arg_ptr = ARG_CAST( arg_index, uint32_t );
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	26 59       	subi	r18, 0x96	; 150
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	fc 01       	movw	r30, r24
    2162:	e2 0f       	add	r30, r18
    2164:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (uint32_t)arg;
    2166:	10 82       	st	Z, r1
    2168:	11 82       	std	Z+1, r1	; 0x01
    216a:	12 82       	std	Z+2, r1	; 0x02
    216c:	13 82       	std	Z+3, r1	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    216e:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_U32:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<uint32_t>( arg_index, (uint32_t)0 );
			break;
    2170:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int32_t *arg_ptr = ARG_CAST( arg_index, int32_t );
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	26 59       	subi	r18, 0x96	; 150
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
    2178:	fc 01       	movw	r30, r24
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (int32_t)arg;
    217e:	10 82       	st	Z, r1
    2180:	11 82       	std	Z+1, r1	; 0x01
    2182:	12 82       	std	Z+2, r1	; 0x02
    2184:	13 82       	std	Z+3, r1	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    2186:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_S32:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<int32_t>( arg_index, (int32_t)0 );
			break;
    2188:	08 95       	ret
		}
		//if: type is not handled
		default:
		{
			this -> error_handler( Err_codes::ERR_UNHANDLED_ARG_TYPE );
    218a:	64 e0       	ldi	r22, 0x04	; 4
    218c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d\n", __LINE__, arg_type_index);
			return true; //FAIL
    2190:	81 e0       	ldi	r24, 0x01	; 1

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
}	//end method: add_arg | uint8_t
    2192:	08 95       	ret

00002194 <_ZN9Orangebot9Uniparser16execute_callbackEPv>:
//!	(arg type limit)
//! Calls work equally with signed or unsiged arguments
/***************************************************************************/

bool Uniparser::execute_callback( void *callback_ptr )
{
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	dc 01       	movw	r26, r24
    21a2:	fb 01       	movw	r30, r22
	///--------------------------------------------------------------------------

	//Argument index counter
	uint8_t arg_cnt = 0;
	//Number of arguments
	uint8_t arg_num_types = this -> g_arg_fsm_status.num_arg;
    21a4:	ec 01       	movw	r28, r24
    21a6:	cb 59       	subi	r28, 0x9B	; 155
    21a8:	df 4f       	sbci	r29, 0xFF	; 255
    21aa:	98 81       	ld	r25, Y
    21ac:	96 95       	lsr	r25
    21ae:	97 70       	andi	r25, 0x07	; 7
	//Count the index of the current argument type being decoded
	uint8_t arg_type_cnt = 0;
	//Link argument type vector
	Arg_type *arg_type = this -> g_arg_type;
    21b0:	21 96       	adiw	r28, 0x01	; 1
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//if: no arguments
	if (arg_num_types == 0)
    21b2:	91 11       	cpse	r25, r1
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x28>
		///--------------------------------------------------------------------------

		//Declare specialized function pointer and link it to the general registered function callback address
		FUNCTION_PTR_VAR( f_ptr, void ) = FUNCTION_PTR_CAST(void)callback_ptr;
		//Execute function from its specialized pointer
		FUNCTION_PTR_EXE_VOID( f_ptr );
    21b6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	7f c7       	rjmp	.+3838   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
		//Execute function from its specialized pointer
		FUNCTION_PTR_EXE_VOID( f_ptr );
		DPRINT("Executing void -> void: %p | Args: NONE \n", (void *)f_ptr );
	}
	//if: first argument is U8 or S8
	else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    21bc:	28 81       	ld	r18, Y
    21be:	25 37       	cpi	r18, 0x75	; 117
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x34>
    21c2:	23 37       	cpi	r18, 0x73	; 115
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x34>
    21c6:	2a c3       	rjmp	.+1620   	; 0x281c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x688>
		//Accumulate argument size
		arg_cnt += Arg_size::ARG_U8_SIZE;
		//I decoded an argument
		arg_type_cnt++;
		//If: it's the only argument
		if (arg_num_types == arg_type_cnt)
    21c8:	91 30       	cpi	r25, 0x01	; 1
    21ca:	31 f4       	brne	.+12     	; 0x21d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x44>
			///--------------------------------------------------------------------------

			//Declare specialized function pointer and link it to the general registered function callback address
			FUNCTION_PTR_VAR( f_ptr, uint8_t ) = FUNCTION_PTR_CAST( uint8_t )callback_ptr;
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
    21cc:	a6 59       	subi	r26, 0x96	; 150
    21ce:	bf 4f       	sbci	r27, 0xFF	; 255
    21d0:	8c 91       	ld	r24, X
    21d2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	71 c7       	rjmp	.+3810   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
			DPRINT("Executing uint8_t -> void: %p | Args: %d \n", (void *)f_ptr, (*arg_a_ptr) );
		}	//End If: it's the only argument
		//if: second argument is U8 or S8
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	85 37       	cpi	r24, 0x75	; 117
    21dc:	19 f0       	breq	.+6      	; 0x21e4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x50>
    21de:	83 37       	cpi	r24, 0x73	; 115
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x50>
    21e2:	35 c1       	rjmp	.+618    	; 0x244e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ba>
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U8_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    21e4:	92 30       	cpi	r25, 0x02	; 2
    21e6:	51 f4       	brne	.+20     	; 0x21fc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x68>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    21e8:	ed 01       	movw	r28, r26
    21ea:	c5 59       	subi	r28, 0x95	; 149
    21ec:	df 4f       	sbci	r29, 0xFF	; 255
    21ee:	68 81       	ld	r22, Y
    21f0:	a6 59       	subi	r26, 0x96	; 150
    21f2:	bf 4f       	sbci	r27, 0xFF	; 255
    21f4:	8c 91       	ld	r24, X
    21f6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	5f c7       	rjmp	.+3774   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint8_t, uint8_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	85 37       	cpi	r24, 0x75	; 117
    2200:	19 f0       	breq	.+6      	; 0x2208 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x74>
    2202:	83 37       	cpi	r24, 0x73	; 115
    2204:	09 f0       	breq	.+2      	; 0x2208 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x74>
    2206:	58 c0       	rjmp	.+176    	; 0x22b8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x124>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2208:	93 30       	cpi	r25, 0x03	; 3
    220a:	61 f4       	brne	.+24     	; 0x2224 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x90>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    220c:	ed 01       	movw	r28, r26
    220e:	c4 59       	subi	r28, 0x94	; 148
    2210:	df 4f       	sbci	r29, 0xFF	; 255
    2212:	48 81       	ld	r20, Y
    2214:	21 97       	sbiw	r28, 0x01	; 1
    2216:	68 81       	ld	r22, Y
    2218:	a6 59       	subi	r26, 0x96	; 150
    221a:	bf 4f       	sbci	r27, 0xFF	; 255
    221c:	8c 91       	ld	r24, X
    221e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	4b c7       	rjmp	.+3734   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	85 37       	cpi	r24, 0x75	; 117
    2228:	11 f0       	breq	.+4      	; 0x222e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9a>
    222a:	83 37       	cpi	r24, 0x73	; 115
    222c:	89 f4       	brne	.+34     	; 0x2250 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbc>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    222e:	94 30       	cpi	r25, 0x04	; 4
    2230:	09 f0       	breq	.+2      	; 0x2234 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa0>
    2232:	06 c7       	rjmp	.+3596   	; 0x3040 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeac>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2234:	ed 01       	movw	r28, r26
    2236:	c3 59       	subi	r28, 0x93	; 147
    2238:	df 4f       	sbci	r29, 0xFF	; 255
    223a:	28 81       	ld	r18, Y
    223c:	21 97       	sbiw	r28, 0x01	; 1
    223e:	48 81       	ld	r20, Y
    2240:	21 97       	sbiw	r28, 0x01	; 1
    2242:	68 81       	ld	r22, Y
    2244:	a6 59       	subi	r26, 0x96	; 150
    2246:	bf 4f       	sbci	r27, 0xFF	; 255
    2248:	8c 91       	ld	r24, X
    224a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	35 c7       	rjmp	.+3690   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2250:	85 35       	cpi	r24, 0x55	; 85
    2252:	11 f0       	breq	.+4      	; 0x2258 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc4>
    2254:	83 35       	cpi	r24, 0x53	; 83
    2256:	91 f4       	brne	.+36     	; 0x227c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe8>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2258:	ed 01       	movw	r28, r26
    225a:	c3 59       	subi	r28, 0x93	; 147
    225c:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    225e:	94 30       	cpi	r25, 0x04	; 4
    2260:	09 f0       	breq	.+2      	; 0x2264 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd0>
    2262:	f0 c6       	rjmp	.+3552   	; 0x3044 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeb0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2264:	28 81       	ld	r18, Y
    2266:	39 81       	ldd	r19, Y+1	; 0x01
    2268:	21 97       	sbiw	r28, 0x01	; 1
    226a:	48 81       	ld	r20, Y
    226c:	21 97       	sbiw	r28, 0x01	; 1
    226e:	68 81       	ld	r22, Y
    2270:	a6 59       	subi	r26, 0x96	; 150
    2272:	bf 4f       	sbci	r27, 0xFF	; 255
    2274:	8c 91       	ld	r24, X
    2276:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	1f c7       	rjmp	.+3646   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    227c:	84 34       	cpi	r24, 0x44	; 68
    227e:	11 f0       	breq	.+4      	; 0x2284 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf0>
    2280:	84 36       	cpi	r24, 0x64	; 100
    2282:	a1 f4       	brne	.+40     	; 0x22ac <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x118>
				{
					//Decode second argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    2284:	ed 01       	movw	r28, r26
    2286:	c3 59       	subi	r28, 0x93	; 147
    2288:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    228a:	94 30       	cpi	r25, 0x04	; 4
    228c:	09 f0       	breq	.+2      	; 0x2290 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xfc>
    228e:	dc c6       	rjmp	.+3512   	; 0x3048 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeb4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2290:	08 81       	ld	r16, Y
    2292:	19 81       	ldd	r17, Y+1	; 0x01
    2294:	2a 81       	ldd	r18, Y+2	; 0x02
    2296:	3b 81       	ldd	r19, Y+3	; 0x03
    2298:	21 97       	sbiw	r28, 0x01	; 1
    229a:	48 81       	ld	r20, Y
    229c:	21 97       	sbiw	r28, 0x01	; 1
    229e:	68 81       	ld	r22, Y
    22a0:	a6 59       	subi	r26, 0x96	; 150
    22a2:	bf 4f       	sbci	r27, 0xFF	; 255
    22a4:	8c 91       	ld	r24, X
    22a6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	07 c7       	rjmp	.+3598   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    22ac:	63 e0       	ldi	r22, 0x03	; 3
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	01 c7       	rjmp	.+3586   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    22b8:	85 35       	cpi	r24, 0x55	; 85
    22ba:	19 f0       	breq	.+6      	; 0x22c2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x12e>
    22bc:	83 35       	cpi	r24, 0x53	; 83
    22be:	09 f0       	breq	.+2      	; 0x22c2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x12e>
    22c0:	63 c0       	rjmp	.+198    	; 0x2388 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1f4>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    22c2:	ad 01       	movw	r20, r26
    22c4:	44 59       	subi	r20, 0x94	; 148
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    22c8:	93 30       	cpi	r25, 0x03	; 3
    22ca:	59 f4       	brne	.+22     	; 0x22e2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x14e>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    22cc:	ea 01       	movw	r28, r20
    22ce:	48 81       	ld	r20, Y
    22d0:	59 81       	ldd	r21, Y+1	; 0x01
    22d2:	21 97       	sbiw	r28, 0x01	; 1
    22d4:	68 81       	ld	r22, Y
    22d6:	a6 59       	subi	r26, 0x96	; 150
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	8c 91       	ld	r24, X
    22dc:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	ec c6       	rjmp	.+3544   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	85 37       	cpi	r24, 0x75	; 117
    22e6:	11 f0       	breq	.+4      	; 0x22ec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x158>
    22e8:	83 37       	cpi	r24, 0x73	; 115
    22ea:	a1 f4       	brne	.+40     	; 0x2314 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x180>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    22ec:	94 30       	cpi	r25, 0x04	; 4
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x15e>
    22f0:	ad c6       	rjmp	.+3418   	; 0x304c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeb8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    22f2:	ed 01       	movw	r28, r26
    22f4:	c2 59       	subi	r28, 0x92	; 146
    22f6:	df 4f       	sbci	r29, 0xFF	; 255
    22f8:	28 81       	ld	r18, Y
    22fa:	ea 01       	movw	r28, r20
    22fc:	48 81       	ld	r20, Y
    22fe:	59 81       	ldd	r21, Y+1	; 0x01
    2300:	ed 01       	movw	r28, r26
    2302:	c5 59       	subi	r28, 0x95	; 149
    2304:	df 4f       	sbci	r29, 0xFF	; 255
    2306:	68 81       	ld	r22, Y
    2308:	a6 59       	subi	r26, 0x96	; 150
    230a:	bf 4f       	sbci	r27, 0xFF	; 255
    230c:	8c 91       	ld	r24, X
    230e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	d3 c6       	rjmp	.+3494   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2314:	85 35       	cpi	r24, 0x55	; 85
    2316:	11 f0       	breq	.+4      	; 0x231c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x188>
    2318:	83 35       	cpi	r24, 0x53	; 83
    231a:	a9 f4       	brne	.+42     	; 0x2346 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1b2>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    231c:	ed 01       	movw	r28, r26
    231e:	c2 59       	subi	r28, 0x92	; 146
    2320:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2322:	94 30       	cpi	r25, 0x04	; 4
    2324:	09 f0       	breq	.+2      	; 0x2328 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x194>
    2326:	94 c6       	rjmp	.+3368   	; 0x3050 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xebc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2328:	28 81       	ld	r18, Y
    232a:	39 81       	ldd	r19, Y+1	; 0x01
    232c:	ea 01       	movw	r28, r20
    232e:	48 81       	ld	r20, Y
    2330:	59 81       	ldd	r21, Y+1	; 0x01
    2332:	ed 01       	movw	r28, r26
    2334:	c5 59       	subi	r28, 0x95	; 149
    2336:	df 4f       	sbci	r29, 0xFF	; 255
    2338:	68 81       	ld	r22, Y
    233a:	a6 59       	subi	r26, 0x96	; 150
    233c:	bf 4f       	sbci	r27, 0xFF	; 255
    233e:	8c 91       	ld	r24, X
    2340:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	ba c6       	rjmp	.+3444   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2346:	84 34       	cpi	r24, 0x44	; 68
    2348:	11 f0       	breq	.+4      	; 0x234e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1ba>
    234a:	84 36       	cpi	r24, 0x64	; 100
    234c:	b9 f4       	brne	.+46     	; 0x237c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1e8>
				{
					//Decode second argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    234e:	ed 01       	movw	r28, r26
    2350:	c2 59       	subi	r28, 0x92	; 146
    2352:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2354:	94 30       	cpi	r25, 0x04	; 4
    2356:	09 f0       	breq	.+2      	; 0x235a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1c6>
    2358:	7d c6       	rjmp	.+3322   	; 0x3054 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xec0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    235a:	08 81       	ld	r16, Y
    235c:	19 81       	ldd	r17, Y+1	; 0x01
    235e:	2a 81       	ldd	r18, Y+2	; 0x02
    2360:	3b 81       	ldd	r19, Y+3	; 0x03
    2362:	ea 01       	movw	r28, r20
    2364:	48 81       	ld	r20, Y
    2366:	59 81       	ldd	r21, Y+1	; 0x01
    2368:	ed 01       	movw	r28, r26
    236a:	c5 59       	subi	r28, 0x95	; 149
    236c:	df 4f       	sbci	r29, 0xFF	; 255
    236e:	68 81       	ld	r22, Y
    2370:	a6 59       	subi	r26, 0x96	; 150
    2372:	bf 4f       	sbci	r27, 0xFF	; 255
    2374:	8c 91       	ld	r24, X
    2376:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	9f c6       	rjmp	.+3390   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    237c:	63 e0       	ldi	r22, 0x03	; 3
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	99 c6       	rjmp	.+3378   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2388:	84 34       	cpi	r24, 0x44	; 68
    238a:	19 f0       	breq	.+6      	; 0x2392 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1fe>
    238c:	84 36       	cpi	r24, 0x64	; 100
    238e:	09 f0       	breq	.+2      	; 0x2392 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1fe>
    2390:	58 c0       	rjmp	.+176    	; 0x2442 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ae>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    2392:	9d 01       	movw	r18, r26
    2394:	24 59       	subi	r18, 0x94	; 148
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2398:	93 30       	cpi	r25, 0x03	; 3
    239a:	69 f4       	brne	.+26     	; 0x23b6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x222>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    239c:	e9 01       	movw	r28, r18
    239e:	28 81       	ld	r18, Y
    23a0:	39 81       	ldd	r19, Y+1	; 0x01
    23a2:	4a 81       	ldd	r20, Y+2	; 0x02
    23a4:	5b 81       	ldd	r21, Y+3	; 0x03
    23a6:	21 97       	sbiw	r28, 0x01	; 1
    23a8:	68 81       	ld	r22, Y
    23aa:	a6 59       	subi	r26, 0x96	; 150
    23ac:	bf 4f       	sbci	r27, 0xFF	; 255
    23ae:	8c 91       	ld	r24, X
    23b0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	82 c6       	rjmp	.+3332   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint8_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	85 37       	cpi	r24, 0x75	; 117
    23ba:	11 f0       	breq	.+4      	; 0x23c0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x22c>
    23bc:	83 37       	cpi	r24, 0x73	; 115
    23be:	b1 f4       	brne	.+44     	; 0x23ec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x258>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    23c0:	94 30       	cpi	r25, 0x04	; 4
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x232>
    23c4:	49 c6       	rjmp	.+3218   	; 0x3058 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xec4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint32_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    23c6:	ed 01       	movw	r28, r26
    23c8:	c0 59       	subi	r28, 0x90	; 144
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	08 81       	ld	r16, Y
    23ce:	e9 01       	movw	r28, r18
    23d0:	28 81       	ld	r18, Y
    23d2:	39 81       	ldd	r19, Y+1	; 0x01
    23d4:	4a 81       	ldd	r20, Y+2	; 0x02
    23d6:	5b 81       	ldd	r21, Y+3	; 0x03
    23d8:	ed 01       	movw	r28, r26
    23da:	c5 59       	subi	r28, 0x95	; 149
    23dc:	df 4f       	sbci	r29, 0xFF	; 255
    23de:	68 81       	ld	r22, Y
    23e0:	a6 59       	subi	r26, 0x96	; 150
    23e2:	bf 4f       	sbci	r27, 0xFF	; 255
    23e4:	8c 91       	ld	r24, X
    23e6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	67 c6       	rjmp	.+3278   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    23ec:	85 35       	cpi	r24, 0x55	; 85
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x260>
    23f0:	83 35       	cpi	r24, 0x53	; 83
    23f2:	b9 f4       	brne	.+46     	; 0x2422 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x28e>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    23f4:	ed 01       	movw	r28, r26
    23f6:	c0 59       	subi	r28, 0x90	; 144
    23f8:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    23fa:	94 30       	cpi	r25, 0x04	; 4
    23fc:	09 f0       	breq	.+2      	; 0x2400 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x26c>
    23fe:	2e c6       	rjmp	.+3164   	; 0x305c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xec8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint32_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2400:	08 81       	ld	r16, Y
    2402:	19 81       	ldd	r17, Y+1	; 0x01
    2404:	e9 01       	movw	r28, r18
    2406:	28 81       	ld	r18, Y
    2408:	39 81       	ldd	r19, Y+1	; 0x01
    240a:	4a 81       	ldd	r20, Y+2	; 0x02
    240c:	5b 81       	ldd	r21, Y+3	; 0x03
    240e:	ed 01       	movw	r28, r26
    2410:	c5 59       	subi	r28, 0x95	; 149
    2412:	df 4f       	sbci	r29, 0xFF	; 255
    2414:	68 81       	ld	r22, Y
    2416:	a6 59       	subi	r26, 0x96	; 150
    2418:	bf 4f       	sbci	r27, 0xFF	; 255
    241a:	8c 91       	ld	r24, X
    241c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	4c c6       	rjmp	.+3224   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint32_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2422:	84 34       	cpi	r24, 0x44	; 68
    2424:	11 f0       	breq	.+4      	; 0x242a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x296>
    2426:	84 36       	cpi	r24, 0x64	; 100
    2428:	31 f4       	brne	.+12     	; 0x2436 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2a2>
				{
					this -> error_handler( ERR_ARG_SIZE );
    242a:	62 e0       	ldi	r22, 0x02	; 2
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	42 c6       	rjmp	.+3204   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2436:	63 e0       	ldi	r22, 0x03	; 3
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	3c c6       	rjmp	.+3192   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2442:	64 e0       	ldi	r22, 0x04	; 4
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	36 c6       	rjmp	.+3180   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U8 or S8
		//if: second argument is U16 or S16
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    244e:	85 35       	cpi	r24, 0x55	; 85
    2450:	19 f0       	breq	.+6      	; 0x2458 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2c4>
    2452:	83 35       	cpi	r24, 0x53	; 83
    2454:	09 f0       	breq	.+2      	; 0x2458 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2c4>
    2456:	18 c1       	rjmp	.+560    	; 0x2688 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4f4>
		{
			//Decode second argument
			uint16_t *arg_b_ptr = ARG_CAST( arg_cnt, uint16_t );
    2458:	bd 01       	movw	r22, r26
    245a:	65 59       	subi	r22, 0x95	; 149
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U16_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    245e:	92 30       	cpi	r25, 0x02	; 2
    2460:	49 f4       	brne	.+18     	; 0x2474 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2e0>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2462:	eb 01       	movw	r28, r22
    2464:	68 81       	ld	r22, Y
    2466:	79 81       	ldd	r23, Y+1	; 0x01
    2468:	a6 59       	subi	r26, 0x96	; 150
    246a:	bf 4f       	sbci	r27, 0xFF	; 255
    246c:	8c 91       	ld	r24, X
    246e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	23 c6       	rjmp	.+3142   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint8_t, uint16_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	85 37       	cpi	r24, 0x75	; 117
    2478:	19 f0       	breq	.+6      	; 0x2480 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ec>
    247a:	83 37       	cpi	r24, 0x73	; 115
    247c:	09 f0       	breq	.+2      	; 0x2480 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ec>
    247e:	5c c0       	rjmp	.+184    	; 0x2538 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3a4>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2480:	93 30       	cpi	r25, 0x03	; 3
    2482:	69 f4       	brne	.+26     	; 0x249e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x30a>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2484:	ed 01       	movw	r28, r26
    2486:	c3 59       	subi	r28, 0x93	; 147
    2488:	df 4f       	sbci	r29, 0xFF	; 255
    248a:	48 81       	ld	r20, Y
    248c:	eb 01       	movw	r28, r22
    248e:	68 81       	ld	r22, Y
    2490:	79 81       	ldd	r23, Y+1	; 0x01
    2492:	a6 59       	subi	r26, 0x96	; 150
    2494:	bf 4f       	sbci	r27, 0xFF	; 255
    2496:	8c 91       	ld	r24, X
    2498:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	0e c6       	rjmp	.+3100   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	85 37       	cpi	r24, 0x75	; 117
    24a2:	11 f0       	breq	.+4      	; 0x24a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x314>
    24a4:	83 37       	cpi	r24, 0x73	; 115
    24a6:	91 f4       	brne	.+36     	; 0x24cc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x338>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    24a8:	94 30       	cpi	r25, 0x04	; 4
    24aa:	09 f0       	breq	.+2      	; 0x24ae <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x31a>
    24ac:	d9 c5       	rjmp	.+2994   	; 0x3060 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xecc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    24ae:	ed 01       	movw	r28, r26
    24b0:	c2 59       	subi	r28, 0x92	; 146
    24b2:	df 4f       	sbci	r29, 0xFF	; 255
    24b4:	28 81       	ld	r18, Y
    24b6:	21 97       	sbiw	r28, 0x01	; 1
    24b8:	48 81       	ld	r20, Y
    24ba:	eb 01       	movw	r28, r22
    24bc:	68 81       	ld	r22, Y
    24be:	79 81       	ldd	r23, Y+1	; 0x01
    24c0:	a6 59       	subi	r26, 0x96	; 150
    24c2:	bf 4f       	sbci	r27, 0xFF	; 255
    24c4:	8c 91       	ld	r24, X
    24c6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	f7 c5       	rjmp	.+3054   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    24cc:	85 35       	cpi	r24, 0x55	; 85
    24ce:	11 f0       	breq	.+4      	; 0x24d4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x340>
    24d0:	83 35       	cpi	r24, 0x53	; 83
    24d2:	99 f4       	brne	.+38     	; 0x24fa <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x366>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    24d4:	ed 01       	movw	r28, r26
    24d6:	c2 59       	subi	r28, 0x92	; 146
    24d8:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    24da:	94 30       	cpi	r25, 0x04	; 4
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x34c>
    24de:	c2 c5       	rjmp	.+2948   	; 0x3064 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xed0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    24e0:	28 81       	ld	r18, Y
    24e2:	39 81       	ldd	r19, Y+1	; 0x01
    24e4:	21 97       	sbiw	r28, 0x01	; 1
    24e6:	48 81       	ld	r20, Y
    24e8:	eb 01       	movw	r28, r22
    24ea:	68 81       	ld	r22, Y
    24ec:	79 81       	ldd	r23, Y+1	; 0x01
    24ee:	a6 59       	subi	r26, 0x96	; 150
    24f0:	bf 4f       	sbci	r27, 0xFF	; 255
    24f2:	8c 91       	ld	r24, X
    24f4:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	e0 c5       	rjmp	.+3008   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    24fa:	84 34       	cpi	r24, 0x44	; 68
    24fc:	11 f0       	breq	.+4      	; 0x2502 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x36e>
    24fe:	84 36       	cpi	r24, 0x64	; 100
    2500:	a9 f4       	brne	.+42     	; 0x252c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x398>
				{
					//Decode fourth argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    2502:	ed 01       	movw	r28, r26
    2504:	c2 59       	subi	r28, 0x92	; 146
    2506:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2508:	94 30       	cpi	r25, 0x04	; 4
    250a:	09 f0       	breq	.+2      	; 0x250e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x37a>
    250c:	ad c5       	rjmp	.+2906   	; 0x3068 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xed4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    250e:	08 81       	ld	r16, Y
    2510:	19 81       	ldd	r17, Y+1	; 0x01
    2512:	2a 81       	ldd	r18, Y+2	; 0x02
    2514:	3b 81       	ldd	r19, Y+3	; 0x03
    2516:	21 97       	sbiw	r28, 0x01	; 1
    2518:	48 81       	ld	r20, Y
    251a:	eb 01       	movw	r28, r22
    251c:	68 81       	ld	r22, Y
    251e:	79 81       	ldd	r23, Y+1	; 0x01
    2520:	a6 59       	subi	r26, 0x96	; 150
    2522:	bf 4f       	sbci	r27, 0xFF	; 255
    2524:	8c 91       	ld	r24, X
    2526:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	c7 c5       	rjmp	.+2958   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    252c:	63 e0       	ldi	r22, 0x03	; 3
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	c1 c5       	rjmp	.+2946   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2538:	85 35       	cpi	r24, 0x55	; 85
    253a:	19 f0       	breq	.+6      	; 0x2542 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3ae>
    253c:	83 35       	cpi	r24, 0x53	; 83
    253e:	09 f0       	breq	.+2      	; 0x2542 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3ae>
    2540:	51 c0       	rjmp	.+162    	; 0x25e4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x450>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2542:	ad 01       	movw	r20, r26
    2544:	43 59       	subi	r20, 0x93	; 147
    2546:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2548:	93 30       	cpi	r25, 0x03	; 3
    254a:	61 f4       	brne	.+24     	; 0x2564 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3d0>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    254c:	ea 01       	movw	r28, r20
    254e:	48 81       	ld	r20, Y
    2550:	59 81       	ldd	r21, Y+1	; 0x01
    2552:	eb 01       	movw	r28, r22
    2554:	68 81       	ld	r22, Y
    2556:	79 81       	ldd	r23, Y+1	; 0x01
    2558:	a6 59       	subi	r26, 0x96	; 150
    255a:	bf 4f       	sbci	r27, 0xFF	; 255
    255c:	8c 91       	ld	r24, X
    255e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	ab c5       	rjmp	.+2902   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	85 37       	cpi	r24, 0x75	; 117
    2568:	11 f0       	breq	.+4      	; 0x256e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3da>
    256a:	83 37       	cpi	r24, 0x73	; 115
    256c:	99 f4       	brne	.+38     	; 0x2594 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x400>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    256e:	94 30       	cpi	r25, 0x04	; 4
    2570:	09 f0       	breq	.+2      	; 0x2574 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3e0>
    2572:	7c c5       	rjmp	.+2808   	; 0x306c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xed8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2574:	ed 01       	movw	r28, r26
    2576:	c1 59       	subi	r28, 0x91	; 145
    2578:	df 4f       	sbci	r29, 0xFF	; 255
    257a:	28 81       	ld	r18, Y
    257c:	ea 01       	movw	r28, r20
    257e:	48 81       	ld	r20, Y
    2580:	59 81       	ldd	r21, Y+1	; 0x01
    2582:	eb 01       	movw	r28, r22
    2584:	68 81       	ld	r22, Y
    2586:	79 81       	ldd	r23, Y+1	; 0x01
    2588:	a6 59       	subi	r26, 0x96	; 150
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	8c 91       	ld	r24, X
    258e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	93 c5       	rjmp	.+2854   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2594:	85 35       	cpi	r24, 0x55	; 85
    2596:	11 f0       	breq	.+4      	; 0x259c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x408>
    2598:	83 35       	cpi	r24, 0x53	; 83
    259a:	a1 f4       	brne	.+40     	; 0x25c4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x430>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    259c:	ed 01       	movw	r28, r26
    259e:	c1 59       	subi	r28, 0x91	; 145
    25a0:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    25a2:	94 30       	cpi	r25, 0x04	; 4
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x414>
    25a6:	64 c5       	rjmp	.+2760   	; 0x3070 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xedc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    25a8:	28 81       	ld	r18, Y
    25aa:	39 81       	ldd	r19, Y+1	; 0x01
    25ac:	ea 01       	movw	r28, r20
    25ae:	48 81       	ld	r20, Y
    25b0:	59 81       	ldd	r21, Y+1	; 0x01
    25b2:	eb 01       	movw	r28, r22
    25b4:	68 81       	ld	r22, Y
    25b6:	79 81       	ldd	r23, Y+1	; 0x01
    25b8:	a6 59       	subi	r26, 0x96	; 150
    25ba:	bf 4f       	sbci	r27, 0xFF	; 255
    25bc:	8c 91       	ld	r24, X
    25be:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	7b c5       	rjmp	.+2806   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    25c4:	84 34       	cpi	r24, 0x44	; 68
    25c6:	11 f0       	breq	.+4      	; 0x25cc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x438>
    25c8:	84 36       	cpi	r24, 0x64	; 100
    25ca:	31 f4       	brne	.+12     	; 0x25d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x444>
				{
					this -> error_handler( ERR_ARG_SIZE );
    25cc:	62 e0       	ldi	r22, 0x02	; 2
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	71 c5       	rjmp	.+2786   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    25d8:	63 e0       	ldi	r22, 0x03	; 3
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	6b c5       	rjmp	.+2774   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    25e4:	84 34       	cpi	r24, 0x44	; 68
    25e6:	19 f0       	breq	.+6      	; 0x25ee <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x45a>
    25e8:	84 36       	cpi	r24, 0x64	; 100
    25ea:	09 f0       	breq	.+2      	; 0x25ee <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x45a>
    25ec:	47 c0       	rjmp	.+142    	; 0x267c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4e8>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    25ee:	9d 01       	movw	r18, r26
    25f0:	23 59       	subi	r18, 0x93	; 147
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    25f4:	93 30       	cpi	r25, 0x03	; 3
    25f6:	71 f4       	brne	.+28     	; 0x2614 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x480>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    25f8:	e9 01       	movw	r28, r18
    25fa:	28 81       	ld	r18, Y
    25fc:	39 81       	ldd	r19, Y+1	; 0x01
    25fe:	4a 81       	ldd	r20, Y+2	; 0x02
    2600:	5b 81       	ldd	r21, Y+3	; 0x03
    2602:	eb 01       	movw	r28, r22
    2604:	68 81       	ld	r22, Y
    2606:	79 81       	ldd	r23, Y+1	; 0x01
    2608:	a6 59       	subi	r26, 0x96	; 150
    260a:	bf 4f       	sbci	r27, 0xFF	; 255
    260c:	8c 91       	ld	r24, X
    260e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	53 c5       	rjmp	.+2726   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint16_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	85 37       	cpi	r24, 0x75	; 117
    2618:	11 f0       	breq	.+4      	; 0x261e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x48a>
    261a:	83 37       	cpi	r24, 0x73	; 115
    261c:	a9 f4       	brne	.+42     	; 0x2648 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4b4>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    261e:	94 30       	cpi	r25, 0x04	; 4
    2620:	09 f0       	breq	.+2      	; 0x2624 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x490>
    2622:	28 c5       	rjmp	.+2640   	; 0x3074 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xee0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint32_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2624:	ed 01       	movw	r28, r26
    2626:	cf 58       	subi	r28, 0x8F	; 143
    2628:	df 4f       	sbci	r29, 0xFF	; 255
    262a:	08 81       	ld	r16, Y
    262c:	e9 01       	movw	r28, r18
    262e:	28 81       	ld	r18, Y
    2630:	39 81       	ldd	r19, Y+1	; 0x01
    2632:	4a 81       	ldd	r20, Y+2	; 0x02
    2634:	5b 81       	ldd	r21, Y+3	; 0x03
    2636:	eb 01       	movw	r28, r22
    2638:	68 81       	ld	r22, Y
    263a:	79 81       	ldd	r23, Y+1	; 0x01
    263c:	a6 59       	subi	r26, 0x96	; 150
    263e:	bf 4f       	sbci	r27, 0xFF	; 255
    2640:	8c 91       	ld	r24, X
    2642:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	39 c5       	rjmp	.+2674   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2648:	85 35       	cpi	r24, 0x55	; 85
    264a:	11 f0       	breq	.+4      	; 0x2650 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4bc>
    264c:	83 35       	cpi	r24, 0x53	; 83
    264e:	31 f4       	brne	.+12     	; 0x265c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4c8>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	2f c5       	rjmp	.+2654   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    265c:	84 34       	cpi	r24, 0x44	; 68
    265e:	11 f0       	breq	.+4      	; 0x2664 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4d0>
    2660:	84 36       	cpi	r24, 0x64	; 100
    2662:	31 f4       	brne	.+12     	; 0x2670 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4dc>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	25 c5       	rjmp	.+2634   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2670:	63 e0       	ldi	r22, 0x03	; 3
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	1f c5       	rjmp	.+2622   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>

			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    267c:	64 e0       	ldi	r22, 0x04	; 4
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	19 c5       	rjmp	.+2610   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U16 or S16
		//if: second argument is U32 or S32
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2688:	84 34       	cpi	r24, 0x44	; 68
    268a:	19 f0       	breq	.+6      	; 0x2692 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4fe>
    268c:	84 36       	cpi	r24, 0x64	; 100
    268e:	09 f0       	breq	.+2      	; 0x2692 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4fe>
    2690:	bf c0       	rjmp	.+382    	; 0x2810 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x67c>
		{
			//Decode second argument
			uint32_t *arg_b_ptr = ARG_CAST( arg_cnt, uint32_t );
    2692:	ad 01       	movw	r20, r26
    2694:	45 59       	subi	r20, 0x95	; 149
    2696:	5f 4f       	sbci	r21, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U32_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2698:	92 30       	cpi	r25, 0x02	; 2
    269a:	59 f4       	brne	.+22     	; 0x26b2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x51e>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    269c:	ea 01       	movw	r28, r20
    269e:	48 81       	ld	r20, Y
    26a0:	59 81       	ldd	r21, Y+1	; 0x01
    26a2:	6a 81       	ldd	r22, Y+2	; 0x02
    26a4:	7b 81       	ldd	r23, Y+3	; 0x03
    26a6:	a6 59       	subi	r26, 0x96	; 150
    26a8:	bf 4f       	sbci	r27, 0xFF	; 255
    26aa:	8c 91       	ld	r24, X
    26ac:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	04 c5       	rjmp	.+2568   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint8_t, uint32_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if: third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	85 37       	cpi	r24, 0x75	; 117
    26b6:	19 f0       	breq	.+6      	; 0x26be <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x52a>
    26b8:	83 37       	cpi	r24, 0x73	; 115
    26ba:	09 f0       	breq	.+2      	; 0x26be <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x52a>
    26bc:	53 c0       	rjmp	.+166    	; 0x2764 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5d0>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    26be:	93 30       	cpi	r25, 0x03	; 3
    26c0:	79 f4       	brne	.+30     	; 0x26e0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x54c>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    26c2:	ed 01       	movw	r28, r26
    26c4:	c1 59       	subi	r28, 0x91	; 145
    26c6:	df 4f       	sbci	r29, 0xFF	; 255
    26c8:	28 81       	ld	r18, Y
    26ca:	ea 01       	movw	r28, r20
    26cc:	48 81       	ld	r20, Y
    26ce:	59 81       	ldd	r21, Y+1	; 0x01
    26d0:	6a 81       	ldd	r22, Y+2	; 0x02
    26d2:	7b 81       	ldd	r23, Y+3	; 0x03
    26d4:	a6 59       	subi	r26, 0x96	; 150
    26d6:	bf 4f       	sbci	r27, 0xFF	; 255
    26d8:	8c 91       	ld	r24, X
    26da:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	ed c4       	rjmp	.+2522   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	85 37       	cpi	r24, 0x75	; 117
    26e4:	11 f0       	breq	.+4      	; 0x26ea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x556>
    26e6:	83 37       	cpi	r24, 0x73	; 115
    26e8:	a1 f4       	brne	.+40     	; 0x2712 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x57e>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    26ea:	94 30       	cpi	r25, 0x04	; 4
    26ec:	09 f0       	breq	.+2      	; 0x26f0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x55c>
    26ee:	c4 c4       	rjmp	.+2440   	; 0x3078 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xee4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    26f0:	ed 01       	movw	r28, r26
    26f2:	c0 59       	subi	r28, 0x90	; 144
    26f4:	df 4f       	sbci	r29, 0xFF	; 255
    26f6:	08 81       	ld	r16, Y
    26f8:	21 97       	sbiw	r28, 0x01	; 1
    26fa:	28 81       	ld	r18, Y
    26fc:	ea 01       	movw	r28, r20
    26fe:	48 81       	ld	r20, Y
    2700:	59 81       	ldd	r21, Y+1	; 0x01
    2702:	6a 81       	ldd	r22, Y+2	; 0x02
    2704:	7b 81       	ldd	r23, Y+3	; 0x03
    2706:	a6 59       	subi	r26, 0x96	; 150
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	8c 91       	ld	r24, X
    270c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	d4 c4       	rjmp	.+2472   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint32_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2712:	85 35       	cpi	r24, 0x55	; 85
    2714:	11 f0       	breq	.+4      	; 0x271a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x586>
    2716:	83 35       	cpi	r24, 0x53	; 83
    2718:	a9 f4       	brne	.+42     	; 0x2744 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5b0>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    271a:	ed 01       	movw	r28, r26
    271c:	c0 59       	subi	r28, 0x90	; 144
    271e:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2720:	94 30       	cpi	r25, 0x04	; 4
    2722:	09 f0       	breq	.+2      	; 0x2726 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x592>
    2724:	ab c4       	rjmp	.+2390   	; 0x307c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xee8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2726:	08 81       	ld	r16, Y
    2728:	19 81       	ldd	r17, Y+1	; 0x01
    272a:	21 97       	sbiw	r28, 0x01	; 1
    272c:	28 81       	ld	r18, Y
    272e:	ea 01       	movw	r28, r20
    2730:	48 81       	ld	r20, Y
    2732:	59 81       	ldd	r21, Y+1	; 0x01
    2734:	6a 81       	ldd	r22, Y+2	; 0x02
    2736:	7b 81       	ldd	r23, Y+3	; 0x03
    2738:	a6 59       	subi	r26, 0x96	; 150
    273a:	bf 4f       	sbci	r27, 0xFF	; 255
    273c:	8c 91       	ld	r24, X
    273e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	bb c4       	rjmp	.+2422   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint32_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2744:	84 34       	cpi	r24, 0x44	; 68
    2746:	11 f0       	breq	.+4      	; 0x274c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5b8>
    2748:	84 36       	cpi	r24, 0x64	; 100
    274a:	31 f4       	brne	.+12     	; 0x2758 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5c4>
				{
					this -> error_handler( ERR_ARG_SIZE );
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	b1 c4       	rjmp	.+2402   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2758:	63 e0       	ldi	r22, 0x03	; 3
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	ab c4       	rjmp	.+2390   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2764:	85 35       	cpi	r24, 0x55	; 85
    2766:	19 f0       	breq	.+6      	; 0x276e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5da>
    2768:	83 35       	cpi	r24, 0x53	; 83
    276a:	09 f0       	breq	.+2      	; 0x276e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5da>
    276c:	41 c0       	rjmp	.+130    	; 0x27f0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x65c>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    276e:	9d 01       	movw	r18, r26
    2770:	21 59       	subi	r18, 0x91	; 145
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2774:	93 30       	cpi	r25, 0x03	; 3
    2776:	71 f4       	brne	.+28     	; 0x2794 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x600>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2778:	e9 01       	movw	r28, r18
    277a:	28 81       	ld	r18, Y
    277c:	39 81       	ldd	r19, Y+1	; 0x01
    277e:	ea 01       	movw	r28, r20
    2780:	48 81       	ld	r20, Y
    2782:	59 81       	ldd	r21, Y+1	; 0x01
    2784:	6a 81       	ldd	r22, Y+2	; 0x02
    2786:	7b 81       	ldd	r23, Y+3	; 0x03
    2788:	a6 59       	subi	r26, 0x96	; 150
    278a:	bf 4f       	sbci	r27, 0xFF	; 255
    278c:	8c 91       	ld	r24, X
    278e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	93 c4       	rjmp	.+2342   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint32_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	85 37       	cpi	r24, 0x75	; 117
    2798:	11 f0       	breq	.+4      	; 0x279e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x60a>
    279a:	83 37       	cpi	r24, 0x73	; 115
    279c:	a9 f4       	brne	.+42     	; 0x27c8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x634>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    279e:	94 30       	cpi	r25, 0x04	; 4
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x610>
    27a2:	6e c4       	rjmp	.+2268   	; 0x3080 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeec>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    27a4:	ed 01       	movw	r28, r26
    27a6:	cf 58       	subi	r28, 0x8F	; 143
    27a8:	df 4f       	sbci	r29, 0xFF	; 255
    27aa:	08 81       	ld	r16, Y
    27ac:	e9 01       	movw	r28, r18
    27ae:	28 81       	ld	r18, Y
    27b0:	39 81       	ldd	r19, Y+1	; 0x01
    27b2:	ea 01       	movw	r28, r20
    27b4:	48 81       	ld	r20, Y
    27b6:	59 81       	ldd	r21, Y+1	; 0x01
    27b8:	6a 81       	ldd	r22, Y+2	; 0x02
    27ba:	7b 81       	ldd	r23, Y+3	; 0x03
    27bc:	a6 59       	subi	r26, 0x96	; 150
    27be:	bf 4f       	sbci	r27, 0xFF	; 255
    27c0:	8c 91       	ld	r24, X
    27c2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	79 c4       	rjmp	.+2290   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint32_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16 or U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    27c8:	85 35       	cpi	r24, 0x55	; 85
    27ca:	31 f0       	breq	.+12     	; 0x27d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x644>
    27cc:	83 35       	cpi	r24, 0x53	; 83
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x644>
    27d0:	84 34       	cpi	r24, 0x44	; 68
    27d2:	11 f0       	breq	.+4      	; 0x27d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x644>
    27d4:	84 36       	cpi	r24, 0x64	; 100
    27d6:	31 f4       	brne	.+12     	; 0x27e4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x650>
				{
					this -> error_handler( ERR_ARG_SIZE );
    27d8:	62 e0       	ldi	r22, 0x02	; 2
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	6b c4       	rjmp	.+2262   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16 or U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    27e4:	63 e0       	ldi	r22, 0x03	; 3
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	65 c4       	rjmp	.+2250   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    27f0:	84 34       	cpi	r24, 0x44	; 68
    27f2:	11 f0       	breq	.+4      	; 0x27f8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x664>
    27f4:	84 36       	cpi	r24, 0x64	; 100
    27f6:	31 f4       	brne	.+12     	; 0x2804 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x670>
			{
				this -> error_handler( ERR_ARG_SIZE );
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	5b c4       	rjmp	.+2230   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2804:	64 e0       	ldi	r22, 0x04	; 4
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	55 c4       	rjmp	.+2218   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled		}
		}	//if: second argument is U32 or S32
		//If: second argument is unhandled
		else
		{
			this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2810:	64 e0       	ldi	r22, 0x04	; 4
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
			return true; //FAIL
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	4f c4       	rjmp	.+2206   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
		} //End If: second argument is unhandled
	}	//end if: first argument is U8 or S8
	//if: first argument is U16 or S16
	else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    281c:	25 35       	cpi	r18, 0x55	; 85
    281e:	19 f0       	breq	.+6      	; 0x2826 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x692>
    2820:	23 35       	cpi	r18, 0x53	; 83
    2822:	09 f0       	breq	.+2      	; 0x2826 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x692>
    2824:	8e c2       	rjmp	.+1308   	; 0x2d42 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbae>
	{
		//Decode first argument
		uint16_t *arg_a_ptr = ARG_CAST( arg_cnt, uint16_t );
    2826:	7d 01       	movw	r14, r26
    2828:	8a e6       	ldi	r24, 0x6A	; 106
    282a:	e8 0e       	add	r14, r24
    282c:	f1 1c       	adc	r15, r1
		//Accumulate argument size
		arg_cnt += Arg_size::ARG_U16_SIZE;
		//I decoded an argument
		arg_type_cnt++;
		//If: it's the only argument
		if (arg_num_types == arg_type_cnt)
    282e:	91 30       	cpi	r25, 0x01	; 1
    2830:	31 f4       	brne	.+12     	; 0x283e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6aa>
			///--------------------------------------------------------------------------

			//Declare specialized function pointer and link it to the general registered function callback address
			FUNCTION_PTR_VAR( f_ptr, uint16_t ) = FUNCTION_PTR_CAST( uint16_t )callback_ptr;
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
    2832:	d7 01       	movw	r26, r14
    2834:	8d 91       	ld	r24, X+
    2836:	9c 91       	ld	r25, X
    2838:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	3e c4       	rjmp	.+2172   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
			DPRINT("Executing uint16_t -> void: %p | Args: %d \n", (void *)f_ptr, (*arg_a_ptr) );
		}
		//if: second argument is U8 or S8
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	85 37       	cpi	r24, 0x75	; 117
    2842:	19 f0       	breq	.+6      	; 0x284a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6b6>
    2844:	83 37       	cpi	r24, 0x73	; 115
    2846:	09 f0       	breq	.+2      	; 0x284a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6b6>
    2848:	0f c1       	rjmp	.+542    	; 0x2a68 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8d4>
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U8_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    284a:	92 30       	cpi	r25, 0x02	; 2
    284c:	49 f4       	brne	.+18     	; 0x2860 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6cc>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    284e:	a4 59       	subi	r26, 0x94	; 148
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	6c 91       	ld	r22, X
    2854:	e7 01       	movw	r28, r14
    2856:	88 81       	ld	r24, Y
    2858:	99 81       	ldd	r25, Y+1	; 0x01
    285a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	2d c4       	rjmp	.+2138   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint8_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	85 37       	cpi	r24, 0x75	; 117
    2864:	19 f0       	breq	.+6      	; 0x286c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6d8>
    2866:	83 37       	cpi	r24, 0x73	; 115
    2868:	09 f0       	breq	.+2      	; 0x286c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6d8>
    286a:	5c c0       	rjmp	.+184    	; 0x2924 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x790>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    286c:	93 30       	cpi	r25, 0x03	; 3
    286e:	69 f4       	brne	.+26     	; 0x288a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6f6>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2870:	ed 01       	movw	r28, r26
    2872:	c3 59       	subi	r28, 0x93	; 147
    2874:	df 4f       	sbci	r29, 0xFF	; 255
    2876:	48 81       	ld	r20, Y
    2878:	a4 59       	subi	r26, 0x94	; 148
    287a:	bf 4f       	sbci	r27, 0xFF	; 255
    287c:	6c 91       	ld	r22, X
    287e:	d7 01       	movw	r26, r14
    2880:	8d 91       	ld	r24, X+
    2882:	9c 91       	ld	r25, X
    2884:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	18 c4       	rjmp	.+2096   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	85 37       	cpi	r24, 0x75	; 117
    288e:	11 f0       	breq	.+4      	; 0x2894 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x700>
    2890:	83 37       	cpi	r24, 0x73	; 115
    2892:	91 f4       	brne	.+36     	; 0x28b8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x724>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2894:	94 30       	cpi	r25, 0x04	; 4
    2896:	09 f0       	breq	.+2      	; 0x289a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x706>
    2898:	f5 c3       	rjmp	.+2026   	; 0x3084 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xef0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    289a:	ed 01       	movw	r28, r26
    289c:	c2 59       	subi	r28, 0x92	; 146
    289e:	df 4f       	sbci	r29, 0xFF	; 255
    28a0:	28 81       	ld	r18, Y
    28a2:	21 97       	sbiw	r28, 0x01	; 1
    28a4:	48 81       	ld	r20, Y
    28a6:	a4 59       	subi	r26, 0x94	; 148
    28a8:	bf 4f       	sbci	r27, 0xFF	; 255
    28aa:	6c 91       	ld	r22, X
    28ac:	e7 01       	movw	r28, r14
    28ae:	88 81       	ld	r24, Y
    28b0:	99 81       	ldd	r25, Y+1	; 0x01
    28b2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	01 c4       	rjmp	.+2050   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    28b8:	85 35       	cpi	r24, 0x55	; 85
    28ba:	11 f0       	breq	.+4      	; 0x28c0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x72c>
    28bc:	83 35       	cpi	r24, 0x53	; 83
    28be:	99 f4       	brne	.+38     	; 0x28e6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x752>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    28c0:	ed 01       	movw	r28, r26
    28c2:	c2 59       	subi	r28, 0x92	; 146
    28c4:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    28c6:	94 30       	cpi	r25, 0x04	; 4
    28c8:	09 f0       	breq	.+2      	; 0x28cc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x738>
    28ca:	de c3       	rjmp	.+1980   	; 0x3088 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xef4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    28cc:	28 81       	ld	r18, Y
    28ce:	39 81       	ldd	r19, Y+1	; 0x01
    28d0:	21 97       	sbiw	r28, 0x01	; 1
    28d2:	48 81       	ld	r20, Y
    28d4:	a4 59       	subi	r26, 0x94	; 148
    28d6:	bf 4f       	sbci	r27, 0xFF	; 255
    28d8:	6c 91       	ld	r22, X
    28da:	d7 01       	movw	r26, r14
    28dc:	8d 91       	ld	r24, X+
    28de:	9c 91       	ld	r25, X
    28e0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	ea c3       	rjmp	.+2004   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    28e6:	84 34       	cpi	r24, 0x44	; 68
    28e8:	11 f0       	breq	.+4      	; 0x28ee <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x75a>
    28ea:	84 36       	cpi	r24, 0x64	; 100
    28ec:	a9 f4       	brne	.+42     	; 0x2918 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x784>
				{
					//Decode fourth argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    28ee:	ed 01       	movw	r28, r26
    28f0:	c2 59       	subi	r28, 0x92	; 146
    28f2:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    28f4:	94 30       	cpi	r25, 0x04	; 4
    28f6:	09 f0       	breq	.+2      	; 0x28fa <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x766>
    28f8:	c9 c3       	rjmp	.+1938   	; 0x308c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xef8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    28fa:	08 81       	ld	r16, Y
    28fc:	19 81       	ldd	r17, Y+1	; 0x01
    28fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2900:	3b 81       	ldd	r19, Y+3	; 0x03
    2902:	21 97       	sbiw	r28, 0x01	; 1
    2904:	48 81       	ld	r20, Y
    2906:	a4 59       	subi	r26, 0x94	; 148
    2908:	bf 4f       	sbci	r27, 0xFF	; 255
    290a:	6c 91       	ld	r22, X
    290c:	e7 01       	movw	r28, r14
    290e:	88 81       	ld	r24, Y
    2910:	99 81       	ldd	r25, Y+1	; 0x01
    2912:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	d1 c3       	rjmp	.+1954   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						DPRINT("Executing uint16_t, uint8_t, uint8_t, uint32_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2918:	63 e0       	ldi	r22, 0x03	; 3
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	cb c3       	rjmp	.+1942   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2924:	85 35       	cpi	r24, 0x55	; 85
    2926:	19 f0       	breq	.+6      	; 0x292e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x79a>
    2928:	83 35       	cpi	r24, 0x53	; 83
    292a:	09 f0       	breq	.+2      	; 0x292e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x79a>
    292c:	51 c0       	rjmp	.+162    	; 0x29d0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x83c>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    292e:	ad 01       	movw	r20, r26
    2930:	43 59       	subi	r20, 0x93	; 147
    2932:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2934:	93 30       	cpi	r25, 0x03	; 3
    2936:	61 f4       	brne	.+24     	; 0x2950 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7bc>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2938:	ea 01       	movw	r28, r20
    293a:	48 81       	ld	r20, Y
    293c:	59 81       	ldd	r21, Y+1	; 0x01
    293e:	a4 59       	subi	r26, 0x94	; 148
    2940:	bf 4f       	sbci	r27, 0xFF	; 255
    2942:	6c 91       	ld	r22, X
    2944:	d7 01       	movw	r26, r14
    2946:	8d 91       	ld	r24, X+
    2948:	9c 91       	ld	r25, X
    294a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	b5 c3       	rjmp	.+1898   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	85 37       	cpi	r24, 0x75	; 117
    2954:	11 f0       	breq	.+4      	; 0x295a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7c6>
    2956:	83 37       	cpi	r24, 0x73	; 115
    2958:	99 f4       	brne	.+38     	; 0x2980 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7ec>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    295a:	94 30       	cpi	r25, 0x04	; 4
    295c:	09 f0       	breq	.+2      	; 0x2960 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7cc>
    295e:	98 c3       	rjmp	.+1840   	; 0x3090 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xefc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2960:	ed 01       	movw	r28, r26
    2962:	c1 59       	subi	r28, 0x91	; 145
    2964:	df 4f       	sbci	r29, 0xFF	; 255
    2966:	28 81       	ld	r18, Y
    2968:	ea 01       	movw	r28, r20
    296a:	48 81       	ld	r20, Y
    296c:	59 81       	ldd	r21, Y+1	; 0x01
    296e:	a4 59       	subi	r26, 0x94	; 148
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	6c 91       	ld	r22, X
    2974:	d7 01       	movw	r26, r14
    2976:	8d 91       	ld	r24, X+
    2978:	9c 91       	ld	r25, X
    297a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	9d c3       	rjmp	.+1850   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2980:	85 35       	cpi	r24, 0x55	; 85
    2982:	11 f0       	breq	.+4      	; 0x2988 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7f4>
    2984:	83 35       	cpi	r24, 0x53	; 83
    2986:	a1 f4       	brne	.+40     	; 0x29b0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x81c>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2988:	ed 01       	movw	r28, r26
    298a:	c1 59       	subi	r28, 0x91	; 145
    298c:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    298e:	94 30       	cpi	r25, 0x04	; 4
    2990:	09 f0       	breq	.+2      	; 0x2994 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x800>
    2992:	80 c3       	rjmp	.+1792   	; 0x3094 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf00>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2994:	28 81       	ld	r18, Y
    2996:	39 81       	ldd	r19, Y+1	; 0x01
    2998:	ea 01       	movw	r28, r20
    299a:	48 81       	ld	r20, Y
    299c:	59 81       	ldd	r21, Y+1	; 0x01
    299e:	a4 59       	subi	r26, 0x94	; 148
    29a0:	bf 4f       	sbci	r27, 0xFF	; 255
    29a2:	6c 91       	ld	r22, X
    29a4:	d7 01       	movw	r26, r14
    29a6:	8d 91       	ld	r24, X+
    29a8:	9c 91       	ld	r25, X
    29aa:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	85 c3       	rjmp	.+1802   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    29b0:	84 34       	cpi	r24, 0x44	; 68
    29b2:	11 f0       	breq	.+4      	; 0x29b8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x824>
    29b4:	84 36       	cpi	r24, 0x64	; 100
    29b6:	31 f4       	brne	.+12     	; 0x29c4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x830>
				{
					this -> error_handler( ERR_ARG_SIZE );
    29b8:	62 e0       	ldi	r22, 0x02	; 2
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	7b c3       	rjmp	.+1782   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    29c4:	63 e0       	ldi	r22, 0x03	; 3
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	75 c3       	rjmp	.+1770   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    29d0:	84 34       	cpi	r24, 0x44	; 68
    29d2:	19 f0       	breq	.+6      	; 0x29da <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x846>
    29d4:	84 36       	cpi	r24, 0x64	; 100
    29d6:	09 f0       	breq	.+2      	; 0x29da <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x846>
    29d8:	41 c0       	rjmp	.+130    	; 0x2a5c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8c8>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    29da:	9d 01       	movw	r18, r26
    29dc:	23 59       	subi	r18, 0x93	; 147
    29de:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    29e0:	93 30       	cpi	r25, 0x03	; 3
    29e2:	71 f4       	brne	.+28     	; 0x2a00 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x86c>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    29e4:	e9 01       	movw	r28, r18
    29e6:	28 81       	ld	r18, Y
    29e8:	39 81       	ldd	r19, Y+1	; 0x01
    29ea:	4a 81       	ldd	r20, Y+2	; 0x02
    29ec:	5b 81       	ldd	r21, Y+3	; 0x03
    29ee:	a4 59       	subi	r26, 0x94	; 148
    29f0:	bf 4f       	sbci	r27, 0xFF	; 255
    29f2:	6c 91       	ld	r22, X
    29f4:	d7 01       	movw	r26, r14
    29f6:	8d 91       	ld	r24, X+
    29f8:	9c 91       	ld	r25, X
    29fa:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	5d c3       	rjmp	.+1722   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint8_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	85 37       	cpi	r24, 0x75	; 117
    2a04:	11 f0       	breq	.+4      	; 0x2a0a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x876>
    2a06:	83 37       	cpi	r24, 0x73	; 115
    2a08:	a9 f4       	brne	.+42     	; 0x2a34 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8a0>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2a0a:	94 30       	cpi	r25, 0x04	; 4
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x87c>
    2a0e:	44 c3       	rjmp	.+1672   	; 0x3098 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf04>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint32_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2a10:	ed 01       	movw	r28, r26
    2a12:	cf 58       	subi	r28, 0x8F	; 143
    2a14:	df 4f       	sbci	r29, 0xFF	; 255
    2a16:	08 81       	ld	r16, Y
    2a18:	e9 01       	movw	r28, r18
    2a1a:	28 81       	ld	r18, Y
    2a1c:	39 81       	ldd	r19, Y+1	; 0x01
    2a1e:	4a 81       	ldd	r20, Y+2	; 0x02
    2a20:	5b 81       	ldd	r21, Y+3	; 0x03
    2a22:	a4 59       	subi	r26, 0x94	; 148
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	6c 91       	ld	r22, X
    2a28:	d7 01       	movw	r26, r14
    2a2a:	8d 91       	ld	r24, X+
    2a2c:	9c 91       	ld	r25, X
    2a2e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	43 c3       	rjmp	.+1670   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16 or U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2a34:	85 35       	cpi	r24, 0x55	; 85
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8b0>
    2a38:	83 35       	cpi	r24, 0x53	; 83
    2a3a:	21 f0       	breq	.+8      	; 0x2a44 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8b0>
    2a3c:	84 34       	cpi	r24, 0x44	; 68
    2a3e:	11 f0       	breq	.+4      	; 0x2a44 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8b0>
    2a40:	84 36       	cpi	r24, 0x64	; 100
    2a42:	31 f4       	brne	.+12     	; 0x2a50 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8bc>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2a44:	62 e0       	ldi	r22, 0x02	; 2
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	35 c3       	rjmp	.+1642   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2a50:	63 e0       	ldi	r22, 0x03	; 3
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	2f c3       	rjmp	.+1630   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2a5c:	64 e0       	ldi	r22, 0x04	; 4
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	29 c3       	rjmp	.+1618   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U8 or S8
		//if: second argument is U16 or S16
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2a68:	85 35       	cpi	r24, 0x55	; 85
    2a6a:	19 f0       	breq	.+6      	; 0x2a72 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8de>
    2a6c:	83 35       	cpi	r24, 0x53	; 83
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8de>
    2a70:	de c0       	rjmp	.+444    	; 0x2c2e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa9a>
		{
			//Decode second argument
			uint16_t *arg_b_ptr = ARG_CAST( arg_cnt, uint16_t );
    2a72:	bd 01       	movw	r22, r26
    2a74:	64 59       	subi	r22, 0x94	; 148
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U16_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2a78:	92 30       	cpi	r25, 0x02	; 2
    2a7a:	49 f4       	brne	.+18     	; 0x2a8e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8fa>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2a7c:	eb 01       	movw	r28, r22
    2a7e:	68 81       	ld	r22, Y
    2a80:	79 81       	ldd	r23, Y+1	; 0x01
    2a82:	d7 01       	movw	r26, r14
    2a84:	8d 91       	ld	r24, X+
    2a86:	9c 91       	ld	r25, X
    2a88:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	16 c3       	rjmp	.+1580   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint16_t -> void: %p | Args: %d %d\n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	85 37       	cpi	r24, 0x75	; 117
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x906>
    2a94:	83 37       	cpi	r24, 0x73	; 115
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x906>
    2a98:	4e c0       	rjmp	.+156    	; 0x2b36 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9a2>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2a9a:	93 30       	cpi	r25, 0x03	; 3
    2a9c:	61 f4       	brne	.+24     	; 0x2ab6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x922>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2a9e:	a2 59       	subi	r26, 0x92	; 146
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	4c 91       	ld	r20, X
    2aa4:	eb 01       	movw	r28, r22
    2aa6:	68 81       	ld	r22, Y
    2aa8:	79 81       	ldd	r23, Y+1	; 0x01
    2aaa:	d7 01       	movw	r26, r14
    2aac:	8d 91       	ld	r24, X+
    2aae:	9c 91       	ld	r25, X
    2ab0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	02 c3       	rjmp	.+1540   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	85 37       	cpi	r24, 0x75	; 117
    2aba:	11 f0       	breq	.+4      	; 0x2ac0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x92c>
    2abc:	83 37       	cpi	r24, 0x73	; 115
    2abe:	99 f4       	brne	.+38     	; 0x2ae6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x952>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2ac0:	94 30       	cpi	r25, 0x04	; 4
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x932>
    2ac4:	eb c2       	rjmp	.+1494   	; 0x309c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf08>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2ac6:	ed 01       	movw	r28, r26
    2ac8:	c1 59       	subi	r28, 0x91	; 145
    2aca:	df 4f       	sbci	r29, 0xFF	; 255
    2acc:	28 81       	ld	r18, Y
    2ace:	a2 59       	subi	r26, 0x92	; 146
    2ad0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad2:	4c 91       	ld	r20, X
    2ad4:	eb 01       	movw	r28, r22
    2ad6:	68 81       	ld	r22, Y
    2ad8:	79 81       	ldd	r23, Y+1	; 0x01
    2ada:	d7 01       	movw	r26, r14
    2adc:	8d 91       	ld	r24, X+
    2ade:	9c 91       	ld	r25, X
    2ae0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	ea c2       	rjmp	.+1492   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2ae6:	85 35       	cpi	r24, 0x55	; 85
    2ae8:	11 f0       	breq	.+4      	; 0x2aee <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x95a>
    2aea:	83 35       	cpi	r24, 0x53	; 83
    2aec:	a1 f4       	brne	.+40     	; 0x2b16 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x982>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2aee:	ed 01       	movw	r28, r26
    2af0:	c1 59       	subi	r28, 0x91	; 145
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2af4:	94 30       	cpi	r25, 0x04	; 4
    2af6:	09 f0       	breq	.+2      	; 0x2afa <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x966>
    2af8:	d3 c2       	rjmp	.+1446   	; 0x30a0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf0c>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2afa:	28 81       	ld	r18, Y
    2afc:	39 81       	ldd	r19, Y+1	; 0x01
    2afe:	a2 59       	subi	r26, 0x92	; 146
    2b00:	bf 4f       	sbci	r27, 0xFF	; 255
    2b02:	4c 91       	ld	r20, X
    2b04:	eb 01       	movw	r28, r22
    2b06:	68 81       	ld	r22, Y
    2b08:	79 81       	ldd	r23, Y+1	; 0x01
    2b0a:	d7 01       	movw	r26, r14
    2b0c:	8d 91       	ld	r24, X+
    2b0e:	9c 91       	ld	r25, X
    2b10:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	d2 c2       	rjmp	.+1444   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint16_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2b16:	84 34       	cpi	r24, 0x44	; 68
    2b18:	11 f0       	breq	.+4      	; 0x2b1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x98a>
    2b1a:	84 36       	cpi	r24, 0x64	; 100
    2b1c:	31 f4       	brne	.+12     	; 0x2b2a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x996>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2b1e:	62 e0       	ldi	r22, 0x02	; 2
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	c8 c2       	rjmp	.+1424   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2b2a:	63 e0       	ldi	r22, 0x03	; 3
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	c2 c2       	rjmp	.+1412   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2b36:	85 35       	cpi	r24, 0x55	; 85
    2b38:	19 f0       	breq	.+6      	; 0x2b40 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9ac>
    2b3a:	83 35       	cpi	r24, 0x53	; 83
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9ac>
    2b3e:	55 c0       	rjmp	.+170    	; 0x2bea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa56>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2b40:	ad 01       	movw	r20, r26
    2b42:	42 59       	subi	r20, 0x92	; 146
    2b44:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2b46:	93 30       	cpi	r25, 0x03	; 3
    2b48:	61 f4       	brne	.+24     	; 0x2b62 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9ce>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2b4a:	ea 01       	movw	r28, r20
    2b4c:	48 81       	ld	r20, Y
    2b4e:	59 81       	ldd	r21, Y+1	; 0x01
    2b50:	db 01       	movw	r26, r22
    2b52:	6d 91       	ld	r22, X+
    2b54:	7c 91       	ld	r23, X
    2b56:	e7 01       	movw	r28, r14
    2b58:	88 81       	ld	r24, Y
    2b5a:	99 81       	ldd	r25, Y+1	; 0x01
    2b5c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	ac c2       	rjmp	.+1368   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	85 37       	cpi	r24, 0x75	; 117
    2b66:	11 f0       	breq	.+4      	; 0x2b6c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9d8>
    2b68:	83 37       	cpi	r24, 0x73	; 115
    2b6a:	91 f4       	brne	.+36     	; 0x2b90 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9fc>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2b6c:	94 30       	cpi	r25, 0x04	; 4
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9de>
    2b70:	99 c2       	rjmp	.+1330   	; 0x30a4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf10>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2b72:	a0 59       	subi	r26, 0x90	; 144
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	2c 91       	ld	r18, X
    2b78:	da 01       	movw	r26, r20
    2b7a:	4d 91       	ld	r20, X+
    2b7c:	5c 91       	ld	r21, X
    2b7e:	eb 01       	movw	r28, r22
    2b80:	68 81       	ld	r22, Y
    2b82:	79 81       	ldd	r23, Y+1	; 0x01
    2b84:	d7 01       	movw	r26, r14
    2b86:	8d 91       	ld	r24, X+
    2b88:	9c 91       	ld	r25, X
    2b8a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	95 c2       	rjmp	.+1322   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint16_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2b90:	85 35       	cpi	r24, 0x55	; 85
    2b92:	11 f0       	breq	.+4      	; 0x2b98 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa04>
    2b94:	83 35       	cpi	r24, 0x53	; 83
    2b96:	c9 f4       	brne	.+50     	; 0x2bca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa36>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2b98:	ed 01       	movw	r28, r26
    2b9a:	c0 59       	subi	r28, 0x90	; 144
    2b9c:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2b9e:	94 30       	cpi	r25, 0x04	; 4
    2ba0:	71 f4       	brne	.+28     	; 0x2bbe <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa2a>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2ba2:	28 81       	ld	r18, Y
    2ba4:	39 81       	ldd	r19, Y+1	; 0x01
    2ba6:	ea 01       	movw	r28, r20
    2ba8:	48 81       	ld	r20, Y
    2baa:	59 81       	ldd	r21, Y+1	; 0x01
    2bac:	db 01       	movw	r26, r22
    2bae:	6d 91       	ld	r22, X+
    2bb0:	7c 91       	ld	r23, X
    2bb2:	e7 01       	movw	r28, r14
    2bb4:	88 81       	ld	r24, Y
    2bb6:	99 81       	ldd	r25, Y+1	; 0x01
    2bb8:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2bba:	80 e0       	ldi	r24, 0x00	; 0
					else
					{
						this -> error_handler( ERR_ARG_SIZE );
						DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
						return true; //FAIL
					} //end if fifth argument
    2bbc:	7e c2       	rjmp	.+1276   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						DPRINT("Executing uint16_t, uint16_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
					//if: fifth argument
					else
					{
						this -> error_handler( ERR_ARG_SIZE );
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
						DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
						return true; //FAIL
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	78 c2       	rjmp	.+1264   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					} //end if fifth argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2bca:	84 34       	cpi	r24, 0x44	; 68
    2bcc:	11 f0       	breq	.+4      	; 0x2bd2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa3e>
    2bce:	84 36       	cpi	r24, 0x64	; 100
    2bd0:	31 f4       	brne	.+12     	; 0x2bde <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa4a>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2bd2:	62 e0       	ldi	r22, 0x02	; 2
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	6e c2       	rjmp	.+1244   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2bde:	63 e0       	ldi	r22, 0x03	; 3
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	68 c2       	rjmp	.+1232   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2bea:	84 34       	cpi	r24, 0x44	; 68
    2bec:	11 f0       	breq	.+4      	; 0x2bf2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa5e>
    2bee:	84 36       	cpi	r24, 0x64	; 100
    2bf0:	c1 f4       	brne	.+48     	; 0x2c22 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa8e>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    2bf2:	ed 01       	movw	r28, r26
    2bf4:	c2 59       	subi	r28, 0x92	; 146
    2bf6:	df 4f       	sbci	r29, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2bf8:	93 30       	cpi	r25, 0x03	; 3
    2bfa:	69 f4       	brne	.+26     	; 0x2c16 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa82>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2bfc:	28 81       	ld	r18, Y
    2bfe:	39 81       	ldd	r19, Y+1	; 0x01
    2c00:	4a 81       	ldd	r20, Y+2	; 0x02
    2c02:	5b 81       	ldd	r21, Y+3	; 0x03
    2c04:	db 01       	movw	r26, r22
    2c06:	6d 91       	ld	r22, X+
    2c08:	7c 91       	ld	r23, X
    2c0a:	e7 01       	movw	r28, r14
    2c0c:	88 81       	ld	r24, Y
    2c0e:	99 81       	ldd	r25, Y+1	; 0x01
    2c10:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2c12:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
				} //end if fourth argument
    2c14:	52 c2       	rjmp	.+1188   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					DPRINT("Executing uint16_t, uint16_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if: fourth argument
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
    2c16:	62 e0       	ldi	r22, 0x02	; 2
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	4c c2       	rjmp	.+1176   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2c22:	64 e0       	ldi	r22, 0x04	; 4
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	46 c2       	rjmp	.+1164   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U16 or S16
		//if: second argument is U32 or S32
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2c2e:	84 34       	cpi	r24, 0x44	; 68
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaa4>
    2c32:	84 36       	cpi	r24, 0x64	; 100
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaa4>
    2c36:	7f c0       	rjmp	.+254    	; 0x2d36 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xba2>
		{
			//Decode second argument
			uint32_t *arg_b_ptr = ARG_CAST( arg_cnt, uint32_t );
    2c38:	ad 01       	movw	r20, r26
    2c3a:	44 59       	subi	r20, 0x94	; 148
    2c3c:	5f 4f       	sbci	r21, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U32_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2c3e:	92 30       	cpi	r25, 0x02	; 2
    2c40:	59 f4       	brne	.+22     	; 0x2c58 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xac4>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2c42:	da 01       	movw	r26, r20
    2c44:	4d 91       	ld	r20, X+
    2c46:	5d 91       	ld	r21, X+
    2c48:	6d 91       	ld	r22, X+
    2c4a:	7c 91       	ld	r23, X
    2c4c:	e7 01       	movw	r28, r14
    2c4e:	88 81       	ld	r24, Y
    2c50:	99 81       	ldd	r25, Y+1	; 0x01
    2c52:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	31 c2       	rjmp	.+1122   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint32_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	85 37       	cpi	r24, 0x75	; 117
    2c5c:	11 f0       	breq	.+4      	; 0x2c62 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xace>
    2c5e:	83 37       	cpi	r24, 0x73	; 115
    2c60:	f1 f5       	brne	.+124    	; 0x2cde <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb4a>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2c62:	93 30       	cpi	r25, 0x03	; 3
    2c64:	71 f4       	brne	.+28     	; 0x2c82 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaee>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2c66:	a0 59       	subi	r26, 0x90	; 144
    2c68:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6a:	2c 91       	ld	r18, X
    2c6c:	da 01       	movw	r26, r20
    2c6e:	4d 91       	ld	r20, X+
    2c70:	5d 91       	ld	r21, X+
    2c72:	6d 91       	ld	r22, X+
    2c74:	7c 91       	ld	r23, X
    2c76:	e7 01       	movw	r28, r14
    2c78:	88 81       	ld	r24, Y
    2c7a:	99 81       	ldd	r25, Y+1	; 0x01
    2c7c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	1c c2       	rjmp	.+1080   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	85 37       	cpi	r24, 0x75	; 117
    2c86:	11 f0       	breq	.+4      	; 0x2c8c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaf8>
    2c88:	83 37       	cpi	r24, 0x73	; 115
    2c8a:	a9 f4       	brne	.+42     	; 0x2cb6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb22>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2c8c:	94 30       	cpi	r25, 0x04	; 4
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xafe>
    2c90:	0b c2       	rjmp	.+1046   	; 0x30a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf14>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2c92:	ed 01       	movw	r28, r26
    2c94:	cf 58       	subi	r28, 0x8F	; 143
    2c96:	df 4f       	sbci	r29, 0xFF	; 255
    2c98:	08 81       	ld	r16, Y
    2c9a:	a0 59       	subi	r26, 0x90	; 144
    2c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9e:	2c 91       	ld	r18, X
    2ca0:	da 01       	movw	r26, r20
    2ca2:	4d 91       	ld	r20, X+
    2ca4:	5d 91       	ld	r21, X+
    2ca6:	6d 91       	ld	r22, X+
    2ca8:	7c 91       	ld	r23, X
    2caa:	e7 01       	movw	r28, r14
    2cac:	88 81       	ld	r24, Y
    2cae:	99 81       	ldd	r25, Y+1	; 0x01
    2cb0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	02 c2       	rjmp	.+1028   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint32_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16 or U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2cb6:	85 35       	cpi	r24, 0x55	; 85
    2cb8:	31 f0       	breq	.+12     	; 0x2cc6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb32>
    2cba:	83 35       	cpi	r24, 0x53	; 83
    2cbc:	21 f0       	breq	.+8      	; 0x2cc6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb32>
    2cbe:	84 34       	cpi	r24, 0x44	; 68
    2cc0:	11 f0       	breq	.+4      	; 0x2cc6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb32>
    2cc2:	84 36       	cpi	r24, 0x64	; 100
    2cc4:	31 f4       	brne	.+12     	; 0x2cd2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb3e>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2cc6:	62 e0       	ldi	r22, 0x02	; 2
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	f4 c1       	rjmp	.+1000   	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16 or U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2cd2:	63 e0       	ldi	r22, 0x03	; 3
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	ee c1       	rjmp	.+988    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2cde:	85 35       	cpi	r24, 0x55	; 85
    2ce0:	11 f0       	breq	.+4      	; 0x2ce6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb52>
    2ce2:	83 35       	cpi	r24, 0x53	; 83
    2ce4:	c1 f4       	brne	.+48     	; 0x2d16 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb82>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2ce6:	ed 01       	movw	r28, r26
    2ce8:	c0 59       	subi	r28, 0x90	; 144
    2cea:	df 4f       	sbci	r29, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2cec:	93 30       	cpi	r25, 0x03	; 3
    2cee:	69 f4       	brne	.+26     	; 0x2d0a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb76>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2cf0:	28 81       	ld	r18, Y
    2cf2:	39 81       	ldd	r19, Y+1	; 0x01
    2cf4:	da 01       	movw	r26, r20
    2cf6:	4d 91       	ld	r20, X+
    2cf8:	5d 91       	ld	r21, X+
    2cfa:	6d 91       	ld	r22, X+
    2cfc:	7c 91       	ld	r23, X
    2cfe:	e7 01       	movw	r28, r14
    2d00:	88 81       	ld	r24, Y
    2d02:	99 81       	ldd	r25, Y+1	; 0x01
    2d04:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2d06:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
				} //end if fourth argument
    2d08:	d8 c1       	rjmp	.+944    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					DPRINT("Executing uint16_t, uint32_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if: fourth argument
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
    2d0a:	62 e0       	ldi	r22, 0x02	; 2
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	d2 c1       	rjmp	.+932    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2d16:	84 34       	cpi	r24, 0x44	; 68
    2d18:	11 f0       	breq	.+4      	; 0x2d1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb8a>
    2d1a:	84 36       	cpi	r24, 0x64	; 100
    2d1c:	31 f4       	brne	.+12     	; 0x2d2a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb96>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2d1e:	62 e0       	ldi	r22, 0x02	; 2
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	c8 c1       	rjmp	.+912    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2d2a:	64 e0       	ldi	r22, 0x04	; 4
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	c2 c1       	rjmp	.+900    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>

		}	//if: second argument is U32 or S32
		//If: second argument is unhandled
		else
		{
			this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
			return true; //FAIL
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	bc c1       	rjmp	.+888    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
		} //End If: second argument is unhandled
	}	//end if: first argument is U16 or S16
	//if: first argument is S32
	else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2d42:	24 34       	cpi	r18, 0x44	; 68
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbb8>
    2d46:	24 36       	cpi	r18, 0x64	; 100
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbb8>
    2d4a:	74 c1       	rjmp	.+744    	; 0x3034 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xea0>
	{
		//Decode first argument
		uint32_t *arg_a_ptr = ARG_CAST( arg_cnt, uint32_t );
    2d4c:	bd 01       	movw	r22, r26
    2d4e:	66 59       	subi	r22, 0x96	; 150
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255
		arg_cnt += Arg_size::ARG_S32_SIZE;
		//I decoded an argument
		arg_type_cnt++;
		DPRINT("Decoded argument | arg_type_cnt: %d | arg_cnt: %d | arg: %d\n", arg_type_cnt, arg_cnt, (*arg_a_ptr));
		//If: it's the only argument
		if (arg_num_types == arg_type_cnt)
    2d52:	91 30       	cpi	r25, 0x01	; 1
    2d54:	41 f4       	brne	.+16     	; 0x2d66 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbd2>
			///--------------------------------------------------------------------------

			//Passing an unsigned 32 bit pointer is decoded successfully as signed of same size
			FUNCTION_PTR_VAR( f_ptr, uint32_t ) = FUNCTION_PTR_CAST( uint32_t )callback_ptr;
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
    2d56:	db 01       	movw	r26, r22
    2d58:	6d 91       	ld	r22, X+
    2d5a:	7d 91       	ld	r23, X+
    2d5c:	8d 91       	ld	r24, X+
    2d5e:	9c 91       	ld	r25, X
    2d60:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	aa c1       	rjmp	.+852    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
			DPRINT("Executing int32_t -> void: %p | Args: %d\n", (void *)f_ptr, (*arg_a_ptr) );
		}
		//if: second argument is U8 or S8
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	85 37       	cpi	r24, 0x75	; 117
    2d6a:	19 f0       	breq	.+6      	; 0x2d72 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbde>
    2d6c:	83 37       	cpi	r24, 0x73	; 115
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbde>
    2d70:	bc c0       	rjmp	.+376    	; 0x2eea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd56>
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U8_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2d72:	92 30       	cpi	r25, 0x02	; 2
    2d74:	59 f4       	brne	.+22     	; 0x2d8c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbf8>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2d76:	a2 59       	subi	r26, 0x92	; 146
    2d78:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7a:	4c 91       	ld	r20, X
    2d7c:	eb 01       	movw	r28, r22
    2d7e:	68 81       	ld	r22, Y
    2d80:	79 81       	ldd	r23, Y+1	; 0x01
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	9b 81       	ldd	r25, Y+3	; 0x03
    2d86:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	97 c1       	rjmp	.+814    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint8_t -> void: %p | Args: %d %d\n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	85 37       	cpi	r24, 0x75	; 117
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc04>
    2d92:	83 37       	cpi	r24, 0x73	; 115
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc04>
    2d96:	53 c0       	rjmp	.+166    	; 0x2e3e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcaa>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2d98:	93 30       	cpi	r25, 0x03	; 3
    2d9a:	79 f4       	brne	.+30     	; 0x2dba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc26>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2d9c:	ed 01       	movw	r28, r26
    2d9e:	c1 59       	subi	r28, 0x91	; 145
    2da0:	df 4f       	sbci	r29, 0xFF	; 255
    2da2:	28 81       	ld	r18, Y
    2da4:	a2 59       	subi	r26, 0x92	; 146
    2da6:	bf 4f       	sbci	r27, 0xFF	; 255
    2da8:	4c 91       	ld	r20, X
    2daa:	db 01       	movw	r26, r22
    2dac:	6d 91       	ld	r22, X+
    2dae:	7d 91       	ld	r23, X+
    2db0:	8d 91       	ld	r24, X+
    2db2:	9c 91       	ld	r25, X
    2db4:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	80 c1       	rjmp	.+768    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint32_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	85 37       	cpi	r24, 0x75	; 117
    2dbe:	11 f0       	breq	.+4      	; 0x2dc4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc30>
    2dc0:	83 37       	cpi	r24, 0x73	; 115
    2dc2:	a1 f4       	brne	.+40     	; 0x2dec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc58>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2dc4:	94 30       	cpi	r25, 0x04	; 4
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc36>
    2dc8:	71 c1       	rjmp	.+738    	; 0x30ac <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf18>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2dca:	ed 01       	movw	r28, r26
    2dcc:	c0 59       	subi	r28, 0x90	; 144
    2dce:	df 4f       	sbci	r29, 0xFF	; 255
    2dd0:	08 81       	ld	r16, Y
    2dd2:	21 97       	sbiw	r28, 0x01	; 1
    2dd4:	28 81       	ld	r18, Y
    2dd6:	a2 59       	subi	r26, 0x92	; 146
    2dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dda:	4c 91       	ld	r20, X
    2ddc:	eb 01       	movw	r28, r22
    2dde:	68 81       	ld	r22, Y
    2de0:	79 81       	ldd	r23, Y+1	; 0x01
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	9b 81       	ldd	r25, Y+3	; 0x03
    2de6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	67 c1       	rjmp	.+718    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2dec:	85 35       	cpi	r24, 0x55	; 85
    2dee:	11 f0       	breq	.+4      	; 0x2df4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc60>
    2df0:	83 35       	cpi	r24, 0x53	; 83
    2df2:	a9 f4       	brne	.+42     	; 0x2e1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc8a>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2df4:	ed 01       	movw	r28, r26
    2df6:	c0 59       	subi	r28, 0x90	; 144
    2df8:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2dfa:	94 30       	cpi	r25, 0x04	; 4
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc6c>
    2dfe:	58 c1       	rjmp	.+688    	; 0x30b0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf1c>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2e00:	08 81       	ld	r16, Y
    2e02:	19 81       	ldd	r17, Y+1	; 0x01
    2e04:	21 97       	sbiw	r28, 0x01	; 1
    2e06:	28 81       	ld	r18, Y
    2e08:	a2 59       	subi	r26, 0x92	; 146
    2e0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0c:	4c 91       	ld	r20, X
    2e0e:	db 01       	movw	r26, r22
    2e10:	6d 91       	ld	r22, X+
    2e12:	7d 91       	ld	r23, X+
    2e14:	8d 91       	ld	r24, X+
    2e16:	9c 91       	ld	r25, X
    2e18:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	4e c1       	rjmp	.+668    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2e1e:	84 34       	cpi	r24, 0x44	; 68
    2e20:	11 f0       	breq	.+4      	; 0x2e26 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc92>
    2e22:	84 36       	cpi	r24, 0x64	; 100
    2e24:	31 f4       	brne	.+12     	; 0x2e32 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc9e>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2e26:	62 e0       	ldi	r22, 0x02	; 2
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	44 c1       	rjmp	.+648    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2e32:	63 e0       	ldi	r22, 0x03	; 3
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	3e c1       	rjmp	.+636    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2e3e:	85 35       	cpi	r24, 0x55	; 85
    2e40:	19 f0       	breq	.+6      	; 0x2e48 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcb4>
    2e42:	83 35       	cpi	r24, 0x53	; 83
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcb4>
    2e46:	41 c0       	rjmp	.+130    	; 0x2eca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd36>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2e48:	9d 01       	movw	r18, r26
    2e4a:	21 59       	subi	r18, 0x91	; 145
    2e4c:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2e4e:	93 30       	cpi	r25, 0x03	; 3
    2e50:	71 f4       	brne	.+28     	; 0x2e6e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcda>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2e52:	e9 01       	movw	r28, r18
    2e54:	28 81       	ld	r18, Y
    2e56:	39 81       	ldd	r19, Y+1	; 0x01
    2e58:	a2 59       	subi	r26, 0x92	; 146
    2e5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5c:	4c 91       	ld	r20, X
    2e5e:	db 01       	movw	r26, r22
    2e60:	6d 91       	ld	r22, X+
    2e62:	7d 91       	ld	r23, X+
    2e64:	8d 91       	ld	r24, X+
    2e66:	9c 91       	ld	r25, X
    2e68:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	26 c1       	rjmp	.+588    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint32_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	85 37       	cpi	r24, 0x75	; 117
    2e72:	11 f0       	breq	.+4      	; 0x2e78 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xce4>
    2e74:	83 37       	cpi	r24, 0x73	; 115
    2e76:	a9 f4       	brne	.+42     	; 0x2ea2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd0e>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2e78:	94 30       	cpi	r25, 0x04	; 4
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcea>
    2e7c:	1b c1       	rjmp	.+566    	; 0x30b4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf20>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2e7e:	ed 01       	movw	r28, r26
    2e80:	cf 58       	subi	r28, 0x8F	; 143
    2e82:	df 4f       	sbci	r29, 0xFF	; 255
    2e84:	08 81       	ld	r16, Y
    2e86:	e9 01       	movw	r28, r18
    2e88:	28 81       	ld	r18, Y
    2e8a:	39 81       	ldd	r19, Y+1	; 0x01
    2e8c:	a2 59       	subi	r26, 0x92	; 146
    2e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e90:	4c 91       	ld	r20, X
    2e92:	db 01       	movw	r26, r22
    2e94:	6d 91       	ld	r22, X+
    2e96:	7d 91       	ld	r23, X+
    2e98:	8d 91       	ld	r24, X+
    2e9a:	9c 91       	ld	r25, X
    2e9c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	0c c1       	rjmp	.+536    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2ea2:	85 35       	cpi	r24, 0x55	; 85
    2ea4:	31 f0       	breq	.+12     	; 0x2eb2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd1e>
    2ea6:	83 35       	cpi	r24, 0x53	; 83
    2ea8:	21 f0       	breq	.+8      	; 0x2eb2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd1e>
    2eaa:	84 34       	cpi	r24, 0x44	; 68
    2eac:	11 f0       	breq	.+4      	; 0x2eb2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd1e>
    2eae:	84 36       	cpi	r24, 0x64	; 100
    2eb0:	31 f4       	brne	.+12     	; 0x2ebe <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd2a>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2eb2:	62 e0       	ldi	r22, 0x02	; 2
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	fe c0       	rjmp	.+508    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2ebe:	63 e0       	ldi	r22, 0x03	; 3
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	f8 c0       	rjmp	.+496    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2eca:	84 34       	cpi	r24, 0x44	; 68
    2ecc:	11 f0       	breq	.+4      	; 0x2ed2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd3e>
    2ece:	84 36       	cpi	r24, 0x64	; 100
    2ed0:	31 f4       	brne	.+12     	; 0x2ede <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd4a>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2ed2:	62 e0       	ldi	r22, 0x02	; 2
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	ee c0       	rjmp	.+476    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2ede:	64 e0       	ldi	r22, 0x04	; 4
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	e8 c0       	rjmp	.+464    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U8 or S8
		//if: second argument is U16 or S16
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2eea:	85 35       	cpi	r24, 0x55	; 85
    2eec:	19 f0       	breq	.+6      	; 0x2ef4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd60>
    2eee:	83 35       	cpi	r24, 0x53	; 83
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd60>
    2ef2:	7f c0       	rjmp	.+254    	; 0x2ff2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe5e>
		{
			//Decode second argument
			uint16_t *arg_b_ptr = ARG_CAST( arg_cnt, uint16_t );
    2ef4:	ad 01       	movw	r20, r26
    2ef6:	42 59       	subi	r20, 0x92	; 146
    2ef8:	5f 4f       	sbci	r21, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U16_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2efa:	92 30       	cpi	r25, 0x02	; 2
    2efc:	59 f4       	brne	.+22     	; 0x2f14 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd80>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2efe:	ea 01       	movw	r28, r20
    2f00:	48 81       	ld	r20, Y
    2f02:	59 81       	ldd	r21, Y+1	; 0x01
    2f04:	db 01       	movw	r26, r22
    2f06:	6d 91       	ld	r22, X+
    2f08:	7d 91       	ld	r23, X+
    2f0a:	8d 91       	ld	r24, X+
    2f0c:	9c 91       	ld	r25, X
    2f0e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	d3 c0       	rjmp	.+422    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint16_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	85 37       	cpi	r24, 0x75	; 117
    2f18:	11 f0       	breq	.+4      	; 0x2f1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd8a>
    2f1a:	83 37       	cpi	r24, 0x73	; 115
    2f1c:	f1 f5       	brne	.+124    	; 0x2f9a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe06>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2f1e:	93 30       	cpi	r25, 0x03	; 3
    2f20:	71 f4       	brne	.+28     	; 0x2f3e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdaa>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2f22:	a0 59       	subi	r26, 0x90	; 144
    2f24:	bf 4f       	sbci	r27, 0xFF	; 255
    2f26:	2c 91       	ld	r18, X
    2f28:	ea 01       	movw	r28, r20
    2f2a:	48 81       	ld	r20, Y
    2f2c:	59 81       	ldd	r21, Y+1	; 0x01
    2f2e:	db 01       	movw	r26, r22
    2f30:	6d 91       	ld	r22, X+
    2f32:	7d 91       	ld	r23, X+
    2f34:	8d 91       	ld	r24, X+
    2f36:	9c 91       	ld	r25, X
    2f38:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	be c0       	rjmp	.+380    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint32_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	85 37       	cpi	r24, 0x75	; 117
    2f42:	11 f0       	breq	.+4      	; 0x2f48 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdb4>
    2f44:	83 37       	cpi	r24, 0x73	; 115
    2f46:	a9 f4       	brne	.+42     	; 0x2f72 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdde>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2f48:	94 30       	cpi	r25, 0x04	; 4
    2f4a:	09 f0       	breq	.+2      	; 0x2f4e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdba>
    2f4c:	b5 c0       	rjmp	.+362    	; 0x30b8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf24>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2f4e:	ed 01       	movw	r28, r26
    2f50:	cf 58       	subi	r28, 0x8F	; 143
    2f52:	df 4f       	sbci	r29, 0xFF	; 255
    2f54:	08 81       	ld	r16, Y
    2f56:	a0 59       	subi	r26, 0x90	; 144
    2f58:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5a:	2c 91       	ld	r18, X
    2f5c:	ea 01       	movw	r28, r20
    2f5e:	48 81       	ld	r20, Y
    2f60:	59 81       	ldd	r21, Y+1	; 0x01
    2f62:	db 01       	movw	r26, r22
    2f64:	6d 91       	ld	r22, X+
    2f66:	7d 91       	ld	r23, X+
    2f68:	8d 91       	ld	r24, X+
    2f6a:	9c 91       	ld	r25, X
    2f6c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	a4 c0       	rjmp	.+328    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2f72:	85 35       	cpi	r24, 0x55	; 85
    2f74:	31 f0       	breq	.+12     	; 0x2f82 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdee>
    2f76:	83 35       	cpi	r24, 0x53	; 83
    2f78:	21 f0       	breq	.+8      	; 0x2f82 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdee>
    2f7a:	84 34       	cpi	r24, 0x44	; 68
    2f7c:	11 f0       	breq	.+4      	; 0x2f82 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdee>
    2f7e:	84 36       	cpi	r24, 0x64	; 100
    2f80:	31 f4       	brne	.+12     	; 0x2f8e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdfa>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2f82:	62 e0       	ldi	r22, 0x02	; 2
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	96 c0       	rjmp	.+300    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 c0       	rjmp	.+288    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2f9a:	85 35       	cpi	r24, 0x55	; 85
    2f9c:	11 f0       	breq	.+4      	; 0x2fa2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe0e>
    2f9e:	83 35       	cpi	r24, 0x53	; 83
    2fa0:	c1 f4       	brne	.+48     	; 0x2fd2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe3e>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2fa2:	ed 01       	movw	r28, r26
    2fa4:	c0 59       	subi	r28, 0x90	; 144
    2fa6:	df 4f       	sbci	r29, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2fa8:	93 30       	cpi	r25, 0x03	; 3
    2faa:	69 f4       	brne	.+26     	; 0x2fc6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe32>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2fac:	28 81       	ld	r18, Y
    2fae:	39 81       	ldd	r19, Y+1	; 0x01
    2fb0:	ea 01       	movw	r28, r20
    2fb2:	48 81       	ld	r20, Y
    2fb4:	59 81       	ldd	r21, Y+1	; 0x01
    2fb6:	db 01       	movw	r26, r22
    2fb8:	6d 91       	ld	r22, X+
    2fba:	7d 91       	ld	r23, X+
    2fbc:	8d 91       	ld	r24, X+
    2fbe:	9c 91       	ld	r25, X
    2fc0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
				} //end if fourth argument
    2fc4:	7a c0       	rjmp	.+244    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					DPRINT("Executing uint32_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
    2fc6:	62 e0       	ldi	r22, 0x02	; 2
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	74 c0       	rjmp	.+232    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2fd2:	84 34       	cpi	r24, 0x44	; 68
    2fd4:	11 f0       	breq	.+4      	; 0x2fda <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe46>
    2fd6:	84 36       	cpi	r24, 0x64	; 100
    2fd8:	31 f4       	brne	.+12     	; 0x2fe6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe52>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2fda:	62 e0       	ldi	r22, 0x02	; 2
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	6a c0       	rjmp	.+212    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2fe6:	64 e0       	ldi	r22, 0x04	; 4
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	64 c0       	rjmp	.+200    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U16 or S16
		//if: second argument is U32 or S32
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2ff2:	84 34       	cpi	r24, 0x44	; 68
    2ff4:	11 f0       	breq	.+4      	; 0x2ffa <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe66>
    2ff6:	84 36       	cpi	r24, 0x64	; 100
    2ff8:	b9 f4       	brne	.+46     	; 0x3028 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe94>
		{
			//Decode second argument
			uint32_t *arg_b_ptr = ARG_CAST( arg_cnt, uint32_t );
    2ffa:	ed 01       	movw	r28, r26
    2ffc:	c2 59       	subi	r28, 0x92	; 146
    2ffe:	df 4f       	sbci	r29, 0xFF	; 255
			arg_cnt += Arg_size::ARG_U32_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			DPRINT("Decoded argument | arg_type_cnt: %d | arg_cnt: %d | arg: %d\n", arg_type_cnt, arg_cnt, (*arg_b_ptr));
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    3000:	92 30       	cpi	r25, 0x02	; 2
    3002:	61 f4       	brne	.+24     	; 0x301c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe88>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint32_t, uint32_t ) = FUNCTION_PTR_CAST( uint32_t, uint32_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    3004:	28 81       	ld	r18, Y
    3006:	39 81       	ldd	r19, Y+1	; 0x01
    3008:	4a 81       	ldd	r20, Y+2	; 0x02
    300a:	5b 81       	ldd	r21, Y+3	; 0x03
    300c:	eb 01       	movw	r28, r22
    300e:	68 81       	ld	r22, Y
    3010:	79 81       	ldd	r23, Y+1	; 0x01
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    3018:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				this -> error_handler( ERR_ARG_SIZE );
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
			}	//End If: argument is unhandled
    301a:	4f c0       	rjmp	.+158    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				DPRINT("Executing uint32_t, uint32_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//If: I CANNOT have a third argument after this because it would exceed the argument size limit
			else
			{
				this -> error_handler( ERR_ARG_SIZE );
    301c:	62 e0       	ldi	r22, 0x02	; 2
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	49 c0       	rjmp	.+146    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: argument is unhandled
		}	//if: second argument is U32 or S32
		//If: second argument is unhandled
		else
		{
			this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    3028:	64 e0       	ldi	r22, 0x04	; 4
    302a:	cd 01       	movw	r24, r26
    302c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
			return true; //FAIL
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	43 c0       	rjmp	.+134    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>


	//If: argument is unhandled
	else
	{
		this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    3034:	64 e0       	ldi	r22, 0x04	; 4
    3036:	cd 01       	movw	r24, r26
    3038:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
		return true; //FAIL
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	3d c0       	rjmp	.+122    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	3b c0       	rjmp	.+118    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	39 c0       	rjmp	.+114    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	37 c0       	rjmp	.+110    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	35 c0       	rjmp	.+106    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	33 c0       	rjmp	.+102    	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	31 c0       	rjmp	.+98     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	2f c0       	rjmp	.+94     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	2d c0       	rjmp	.+90     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	2b c0       	rjmp	.+86     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	29 c0       	rjmp	.+82     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	27 c0       	rjmp	.+78     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	25 c0       	rjmp	.+74     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	23 c0       	rjmp	.+70     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	21 c0       	rjmp	.+66     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	1f c0       	rjmp	.+62     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	1d c0       	rjmp	.+58     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	1b c0       	rjmp	.+54     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	19 c0       	rjmp	.+50     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	17 c0       	rjmp	.+46     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	15 c0       	rjmp	.+42     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	13 c0       	rjmp	.+38     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	11 c0       	rjmp	.+34     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	0f c0       	rjmp	.+30     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	0d c0       	rjmp	.+26     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	0b c0       	rjmp	.+22     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	09 c0       	rjmp	.+18     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	07 c0       	rjmp	.+14     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	05 c0       	rjmp	.+10     	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	03 c0       	rjmp	.+6      	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	01 c0       	rjmp	.+2      	; 0x30ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
}	//end method: execute_callback
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	08 95       	ret

000030c8 <_ZN9Orangebot9Uniparser5parseEh>:
//! Intricate FSM. The objective is to check the incoming character against
//!	charaters inside the various commands and decode a command when a \0 is detected
/***************************************************************************/

bool Uniparser::parse( uint8_t data )
{
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	ec 01       	movw	r28, r24
    30d4:	16 2f       	mov	r17, r22
		//	User was notified of the error during previous call
		//	Errors should have triggered an FSM reset to return in working condition
		//	I can clear the error and keep churning bytes

	//If: an error was reported
	if (this -> g_err != Err_codes::NO_ERR)
    30d6:	fc 01       	movw	r30, r24
    30d8:	ec 58       	subi	r30, 0x8C	; 140
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	81 11       	cpse	r24, r1
	{
		//Clear the error
		DPRINT("%d | Clear Error: %d\n", __LINE__, this -> g_err);
		this -> g_err = Err_codes::NO_ERR;
    30e0:	10 82       	st	Z, r1
		//----------------------------------------------------------------
		//! @details when terminator is detected, close the command.
		//!	I either have a full match, or the command is invalid and I have to reset the FSM

	//If: input terminator from user
	if (data == '\0')
    30e2:	11 11       	cpse	r17, r1
    30e4:	68 c0       	rjmp	.+208    	; 0x31b6 <_ZN9Orangebot9Uniparser5parseEh+0xee>
	{
		DPRINT("%d | Terminator detected | Number of partial matches: %d\n", __LINE__, this -> g_num_match);
		//counter
		uint8_t t;
		//If: i was decoding an argument
		if (this -> g_status == Orangebot::Parser_status::PARSER_ARG)
    30e6:	fe 01       	movw	r30, r28
    30e8:	ed 58       	subi	r30, 0x8D	; 141
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	82 30       	cpi	r24, 0x02	; 2
    30f0:	49 f4       	brne	.+18     	; 0x3104 <_ZN9Orangebot9Uniparser5parseEh+0x3c>
		{
			//I'm done decoding
			DPRINT("%d | Terminator after ARG\n", __LINE__);
			//Close current argument and update the argument detector FSM.
			bool f_ret = this -> close_arg();
    30f2:	ce 01       	movw	r24, r28
    30f4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN9Orangebot9Uniparser9close_argEv>
			//if could not close argument
			if (f_ret == true)
    30f8:	88 23       	and	r24, r24
    30fa:	21 f0       	breq	.+8      	; 0x3104 <_ZN9Orangebot9Uniparser5parseEh+0x3c>
			{
				//I can recover from this.
				//no matches and reset the FSM.
				this -> g_num_match = 0;
    30fc:	fe 01       	movw	r30, r28
    30fe:	ee 58       	subi	r30, 0x8E	; 142
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	10 82       	st	Z, r1
			}
		}
		//Index inside the command
		uint8_t cmd_index;
		//if: I have at least one parser_tmp.id_index entry
		if (this -> g_num_match > 0)
    3104:	fe 01       	movw	r30, r28
    3106:	ee 58       	subi	r30, 0x8E	; 142
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	e0 81       	ld	r30, Z
    310c:	1e 16       	cp	r1, r30
    310e:	64 f5       	brge	.+88     	; 0x3168 <_ZN9Orangebot9Uniparser5parseEh+0xa0>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	5f ef       	ldi	r21, 0xFF	; 255
		{
			DPRINT("%d | Scanning partially matched commands for terminators\n", __LINE__);
			//For: scan all commands
			for (t = 0;t<this -> g_num_cmd;t++)
    3114:	48 81       	ld	r20, Y
    3116:	84 17       	cp	r24, r20
    3118:	08 f0       	brcs	.+2      	; 0x311c <_ZN9Orangebot9Uniparser5parseEh+0x54>
    311a:	9d c1       	rjmp	.+826    	; 0x3456 <_ZN9Orangebot9Uniparser5parseEh+0x38e>
			{
				//Fetch command index
				cmd_index = this -> g_cmd_index[t];
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	fe 01       	movw	r30, r28
    3122:	e2 0f       	add	r30, r18
    3124:	f3 1f       	adc	r31, r19
    3126:	91 a5       	ldd	r25, Z+41	; 0x29
				//If: this command is a partial match
				if (cmd_index > 0)
    3128:	99 23       	and	r25, r25
    312a:	e1 f0       	breq	.+56     	; 0x3164 <_ZN9Orangebot9Uniparser5parseEh+0x9c>
				{
					//If: i was decoding an argument
					if (this -> g_status == Parser_status::PARSER_ARG)
    312c:	fe 01       	movw	r30, r28
    312e:	ed 58       	subi	r30, 0x8D	; 141
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	60 81       	ld	r22, Z
    3134:	62 30       	cpi	r22, 0x02	; 2
    3136:	39 f4       	brne	.+14     	; 0x3146 <_ZN9Orangebot9Uniparser5parseEh+0x7e>
							this -> g_err = Err_codes::ERR_GENERIC;
							DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
							return true;	//fail
						}
						//The argument has been closed. I need to skip the argument descriptor "%?"
						cmd_index += 2;
    3138:	9e 5f       	subi	r25, 0xFE	; 254
						//With argument closed I'm now doing an ID matching for terminator. Can be skipped since it's the last char
						this -> g_status = Parser_status::PARSER_ID;
    313a:	61 e0       	ldi	r22, 0x01	; 1
    313c:	60 83       	st	Z, r22
						//I should write back the index. Can be skipped since it's the last char
						this -> g_cmd_index[t] = cmd_index;
    313e:	fe 01       	movw	r30, r28
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	91 a7       	std	Z+41, r25	; 0x29
					}
					//Check match against the character after the one already matched.
					//If: the next command data would be the terminator '\0'
					if ( this -> g_cmd_txt[t][ cmd_index ] == '\0')
    3146:	22 0f       	add	r18, r18
    3148:	33 1f       	adc	r19, r19
    314a:	fe 01       	movw	r30, r28
    314c:	e2 0f       	add	r30, r18
    314e:	f3 1f       	adc	r31, r19
    3150:	01 80       	ldd	r0, Z+1	; 0x01
    3152:	f2 81       	ldd	r31, Z+2	; 0x02
    3154:	e0 2d       	mov	r30, r0
    3156:	e9 0f       	add	r30, r25
    3158:	f1 1d       	adc	r31, r1
    315a:	90 81       	ld	r25, Z
    315c:	91 11       	cpse	r25, r1
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <_ZN9Orangebot9Uniparser5parseEh+0x9c>
							this -> g_err = Err_codes::ERR_GENERIC;
							DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
							return true;	//fail
						}
						//Issue execution of the callback function linked
						exe_index = t;
    3160:	58 2f       	mov	r21, r24
						DPRINT("Valid command ID%d decoded\n", t);
						//I can stop the search
						t = this -> g_num_cmd;
    3162:	84 2f       	mov	r24, r20
		//if: I have at least one parser_tmp.id_index entry
		if (this -> g_num_match > 0)
		{
			DPRINT("%d | Scanning partially matched commands for terminators\n", __LINE__);
			//For: scan all commands
			for (t = 0;t<this -> g_num_cmd;t++)
    3164:	8f 5f       	subi	r24, 0xFF	; 255
    3166:	d6 cf       	rjmp	.-84     	; 0x3114 <_ZN9Orangebot9Uniparser5parseEh+0x4c>
					}
				}	//End If: this command is a partial match
			}	//End For: scan all commands
		}	//end if: I have at least one parser_tmp.id_index entry
		//If I have just one match.  g_num_match now holds the index of the match shifted by one
		else if (this -> g_num_match < 0)
    3168:	ee 23       	and	r30, r30
    316a:	0c f0       	brlt	.+2      	; 0x316e <_ZN9Orangebot9Uniparser5parseEh+0xa6>
    316c:	76 c1       	rjmp	.+748    	; 0x345a <_ZN9Orangebot9Uniparser5parseEh+0x392>
		{
			//decode command index | BUGFIX: -1 means only one match of command ID 0
			t = -this -> g_num_match -1;
    316e:	e0 95       	com	r30
			DPRINT("just one partial match: %d\n", t);
			//Fetch command index
			cmd_index = this -> g_cmd_index[t];
    3170:	8e 2f       	mov	r24, r30
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	de 01       	movw	r26, r28
    3176:	a8 0f       	add	r26, r24
    3178:	b9 1f       	adc	r27, r25
    317a:	99 96       	adiw	r26, 0x29	; 41
    317c:	2c 91       	ld	r18, X
			//If: i was decoding an argument
			if (this -> g_status == Parser_status::PARSER_ARG)
    317e:	de 01       	movw	r26, r28
    3180:	ad 58       	subi	r26, 0x8D	; 141
    3182:	bf 4f       	sbci	r27, 0xFF	; 255
    3184:	3c 91       	ld	r19, X
    3186:	32 30       	cpi	r19, 0x02	; 2
    3188:	09 f4       	brne	.+2      	; 0x318c <_ZN9Orangebot9Uniparser5parseEh+0xc4>
					this -> g_err = Err_codes::ERR_GENERIC;
					DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
					return true;	//fail
				}
				//The argument has been closed. I need to skip the argument descriptor "%?"
				cmd_index += 2;
    318a:	2e 5f       	subi	r18, 0xFE	; 254
				//this -> g_status == Parser_status::PARSER_ID;
			}
			//BUGFIX: this branch can now be executed with null pointer if dictionary is yet to be initialized. This is not a pedantic check
			//Check match  against the character after the one already matched.
			//If: the next command data would be the terminator '\0'
			if ((this -> g_cmd_txt[t] != nullptr) && (this -> g_cmd_txt[t][ cmd_index ] == '\0'))
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	de 01       	movw	r26, r28
    3192:	a8 0f       	add	r26, r24
    3194:	b9 1f       	adc	r27, r25
    3196:	11 96       	adiw	r26, 0x01	; 1
    3198:	8d 91       	ld	r24, X+
    319a:	9c 91       	ld	r25, X
    319c:	12 97       	sbiw	r26, 0x02	; 2
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <_ZN9Orangebot9Uniparser5parseEh+0xdc>
    31a2:	5e c1       	rjmp	.+700    	; 0x3460 <_ZN9Orangebot9Uniparser5parseEh+0x398>
    31a4:	dc 01       	movw	r26, r24
    31a6:	a2 0f       	add	r26, r18
    31a8:	b1 1d       	adc	r27, r1
    31aa:	8c 91       	ld	r24, X
    31ac:	81 11       	cpse	r24, r1
    31ae:	5b c1       	rjmp	.+694    	; 0x3466 <_ZN9Orangebot9Uniparser5parseEh+0x39e>
					this -> g_err = Err_codes::ERR_GENERIC;
					DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
					return true;	//fail
				}
				//Issue execution of the callback function linked
				exe_index = t;
    31b0:	5e 2f       	mov	r21, r30
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    31b2:	01 e0       	ldi	r16, 0x01	; 1
				}
				//Issue execution of the callback function linked
				exe_index = t;
				DPRINT("%d | Valid command ID%d decoded\n", __LINE__, t);
				//I can stop the search
				t = this -> g_num_cmd;
    31b4:	70 c1       	rjmp	.+736    	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		//	Only letters can be used as first character in a command
		//	This section matches the first character in each command
		//	This section takes care of initializing g_cmd_index[] to valid partial match values

	//If: PARSER_IDLE
	else if (this -> g_status == Parser_status::PARSER_IDLE)
    31b6:	fe 01       	movw	r30, r28
    31b8:	ed 58       	subi	r30, 0x8D	; 141
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	81 11       	cpse	r24, r1
    31c0:	33 c0       	rjmp	.+102    	; 0x3228 <_ZN9Orangebot9Uniparser5parseEh+0x160>
	{
		DPRINT("%d | PARSER_IDLE\n", __LINE__);
		//If: letter First character in a command can only be a letter
		if (IS_LETTER( data ))
    31c2:	8f e9       	ldi	r24, 0x9F	; 159
    31c4:	81 0f       	add	r24, r17
    31c6:	8a 31       	cpi	r24, 0x1A	; 26
    31c8:	38 f0       	brcs	.+14     	; 0x31d8 <_ZN9Orangebot9Uniparser5parseEh+0x110>
    31ca:	8f eb       	ldi	r24, 0xBF	; 191
    31cc:	81 0f       	add	r24, r17
    31ce:	8a 31       	cpi	r24, 0x1A	; 26
    31d0:	08 f0       	brcs	.+2      	; 0x31d4 <_ZN9Orangebot9Uniparser5parseEh+0x10c>
    31d2:	4c c1       	rjmp	.+664    	; 0x346c <_ZN9Orangebot9Uniparser5parseEh+0x3a4>
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <_ZN9Orangebot9Uniparser5parseEh+0x112>
    31d8:	20 e0       	ldi	r18, 0x00	; 0
		{
			//counter
			uint8_t t;
			//for each command
			for (t = 0; t < this -> g_num_cmd;t++)
    31da:	88 81       	ld	r24, Y
    31dc:	28 17       	cp	r18, r24
    31de:	08 f0       	brcs	.+2      	; 0x31e2 <_ZN9Orangebot9Uniparser5parseEh+0x11a>
    31e0:	48 c1       	rjmp	.+656    	; 0x3472 <_ZN9Orangebot9Uniparser5parseEh+0x3aa>
					this -> g_err = Err_codes::ERR_GENERIC;
					DRETURN_ARG("%d | ERR%d: ERR_GENERIC\n", __LINE__, this -> g_err );
					return true;	//fail
				}
				//If: partial match
				if (this -> g_cmd_txt[t][0] == data)
    31e2:	82 2f       	mov	r24, r18
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	fc 01       	movw	r30, r24
    31e8:	ee 0f       	add	r30, r30
    31ea:	ff 1f       	adc	r31, r31
    31ec:	ec 0f       	add	r30, r28
    31ee:	fd 1f       	adc	r31, r29
    31f0:	01 80       	ldd	r0, Z+1	; 0x01
    31f2:	f2 81       	ldd	r31, Z+2	; 0x02
    31f4:	e0 2d       	mov	r30, r0
    31f6:	30 81       	ld	r19, Z
    31f8:	13 13       	cpse	r17, r19
    31fa:	10 c0       	rjmp	.+32     	; 0x321c <_ZN9Orangebot9Uniparser5parseEh+0x154>
				{
					//A partial match has been found
					this -> g_num_match++;
    31fc:	fe 01       	movw	r30, r28
    31fe:	ee 58       	subi	r30, 0x8E	; 142
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	30 81       	ld	r19, Z
    3204:	3f 5f       	subi	r19, 0xFF	; 255
    3206:	30 83       	st	Z, r19
					//Match has been found up to first character. Point to the next unmatched char
					this -> g_cmd_index[t] = 1;
    3208:	fe 01       	movw	r30, r28
    320a:	e8 0f       	add	r30, r24
    320c:	f9 1f       	adc	r31, r25
    320e:	31 e0       	ldi	r19, 0x01	; 1
    3210:	31 a7       	std	Z+41, r19	; 0x29
					//Next, I'm matching ID entries
					this -> g_status = Parser_status::PARSER_ID;
    3212:	fe 01       	movw	r30, r28
    3214:	ed 58       	subi	r30, 0x8D	; 141
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	30 83       	st	Z, r19
    321a:	04 c0       	rjmp	.+8      	; 0x3224 <_ZN9Orangebot9Uniparser5parseEh+0x15c>
				}
				//if: no match
				else
				{
					//special code for no match found
					this -> g_cmd_index[t] = 0;
    321c:	fe 01       	movw	r30, r28
    321e:	e8 0f       	add	r30, r24
    3220:	f9 1f       	adc	r31, r25
    3222:	11 a6       	std	Z+41, r1	; 0x29
		if (IS_LETTER( data ))
		{
			//counter
			uint8_t t;
			//for each command
			for (t = 0; t < this -> g_num_cmd;t++)
    3224:	2f 5f       	subi	r18, 0xFF	; 255
    3226:	d9 cf       	rjmp	.-78     	; 0x31da <_ZN9Orangebot9Uniparser5parseEh+0x112>
		//--------------------------------------------------------------------------
		//	ID matching
		//--------------------------------------------------------------------------

	//if: I'm ID matching
	else if (this -> g_status == Parser_status::PARSER_ID)
    3228:	81 30       	cpi	r24, 0x01	; 1
    322a:	09 f0       	breq	.+2      	; 0x322e <_ZN9Orangebot9Uniparser5parseEh+0x166>
    322c:	db c0       	rjmp	.+438    	; 0x33e4 <_ZN9Orangebot9Uniparser5parseEh+0x31c>
	{
		DPRINT("%d | PARSER_ID ", __LINE__);
		//! @todo only go ARG if a command has an arg descriptor if there are number or sign. allow number or sign to be used as command ID
		//if: I'm being fed an argument
		if (IS_NUMBER( data ) || IS_SIGN( data ))
    322e:	80 ed       	ldi	r24, 0xD0	; 208
    3230:	81 0f       	add	r24, r17
    3232:	8a 30       	cpi	r24, 0x0A	; 10
    3234:	28 f0       	brcs	.+10     	; 0x3240 <_ZN9Orangebot9Uniparser5parseEh+0x178>
    3236:	1b 32       	cpi	r17, 0x2B	; 43
    3238:	19 f0       	breq	.+6      	; 0x3240 <_ZN9Orangebot9Uniparser5parseEh+0x178>
    323a:	1d 32       	cpi	r17, 0x2D	; 45
    323c:	09 f0       	breq	.+2      	; 0x3240 <_ZN9Orangebot9Uniparser5parseEh+0x178>
    323e:	76 c0       	rjmp	.+236    	; 0x332c <_ZN9Orangebot9Uniparser5parseEh+0x264>
		{
			DPRINT_NOTAB("- ARG | num_match %d\n", this -> g_num_match);
			//if: I have at least one partial match
			if (this -> g_num_match > 0)
    3240:	fe 01       	movw	r30, r28
    3242:	ee 58       	subi	r30, 0x8E	; 142
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	18 16       	cp	r1, r24
    324a:	0c f0       	brlt	.+2      	; 0x324e <_ZN9Orangebot9Uniparser5parseEh+0x186>
    324c:	46 c0       	rjmp	.+140    	; 0x32da <_ZN9Orangebot9Uniparser5parseEh+0x212>
    324e:	f1 2c       	mov	r15, r1
    3250:	00 e0       	ldi	r16, 0x00	; 0
			{
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    3252:	88 81       	ld	r24, Y
    3254:	f8 16       	cp	r15, r24
    3256:	08 f0       	brcs	.+2      	; 0x325a <_ZN9Orangebot9Uniparser5parseEh+0x192>
    3258:	0f c1       	rjmp	.+542    	; 0x3478 <_ZN9Orangebot9Uniparser5parseEh+0x3b0>
				{
					//if: the command is a partial match
					if (this -> g_cmd_index[t] > 0)
    325a:	8f 2d       	mov	r24, r15
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	fe 01       	movw	r30, r28
    3260:	e8 0f       	add	r30, r24
    3262:	f9 1f       	adc	r31, r25
    3264:	21 a5       	ldd	r18, Z+41	; 0x29
    3266:	22 23       	and	r18, r18
    3268:	b1 f1       	breq	.+108    	; 0x32d6 <_ZN9Orangebot9Uniparser5parseEh+0x20e>
					{
						//Search in the dictionary for a % entry. An argument descriptor
						if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == '%')
    326a:	fc 01       	movw	r30, r24
    326c:	ee 0f       	add	r30, r30
    326e:	ff 1f       	adc	r31, r31
    3270:	ec 0f       	add	r30, r28
    3272:	fd 1f       	adc	r31, r29
    3274:	01 80       	ldd	r0, Z+1	; 0x01
    3276:	f2 81       	ldd	r31, Z+2	; 0x02
    3278:	e0 2d       	mov	r30, r0
    327a:	e2 0f       	add	r30, r18
    327c:	f1 1d       	adc	r31, r1
    327e:	20 81       	ld	r18, Z
    3280:	25 32       	cpi	r18, 0x25	; 37
    3282:	b9 f4       	brne	.+46     	; 0x32b2 <_ZN9Orangebot9Uniparser5parseEh+0x1ea>
						{
							//Do not increment index but go in ARG parsing mode
							this -> g_status = Parser_status::PARSER_ARG;
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	fe 01       	movw	r30, r28
    3288:	ed 58       	subi	r30, 0x8D	; 141
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 83       	st	Z, r24
							//Do not advance index until argument decoding is complete
							DPRINT("%d | ARG begins | command: %d\n", __LINE__, t);
							//Add an argument using current partial match as template
							bool f_ret = this -> add_arg( t );
    328e:	6f 2d       	mov	r22, r15
    3290:	ce 01       	movw	r24, r28
    3292:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN9Orangebot9Uniparser7add_argEh>
								DPRINT("%d | ERR Failed to add an argument\n", __LINE__ );
								//I can recover from this by resetting the FSM
								f_rst_fsm = true;
							}
							//initialize agrument
							this -> accumulate_arg( data );
    3296:	61 2f       	mov	r22, r17
    3298:	ce 01       	movw	r24, r28
    329a:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN9Orangebot9Uniparser14accumulate_argEh>
							//argument detection make the detection unique. Remove all other partial matches | BUGFIX: now negative index is shifted by one
							this -> g_num_match = -t -1;
    329e:	fe 01       	movw	r30, r28
    32a0:	ee 58       	subi	r30, 0x8E	; 142
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	f0 94       	com	r15
    32a6:	f0 82       	st	Z, r15
							//Single match has been found. Break the cycle
							t = UNIPARSER_MAX_CMD;
    32a8:	0f 2e       	mov	r0, r31
    32aa:	f4 e1       	ldi	r31, 0x14	; 20
    32ac:	ff 2e       	mov	r15, r31
    32ae:	f0 2d       	mov	r31, r0
    32b0:	12 c0       	rjmp	.+36     	; 0x32d6 <_ZN9Orangebot9Uniparser5parseEh+0x20e>
						}
						//If: this dictionary entry does not contain an argument descriptor
						else
						{
							//Prune away the partial match
							this -> g_cmd_index[t] = 0;
    32b2:	fe 01       	movw	r30, r28
    32b4:	e8 0f       	add	r30, r24
    32b6:	f9 1f       	adc	r31, r25
    32b8:	11 a6       	std	Z+41, r1	; 0x29
							DPRINT("%d | Prune away partial match: %d | ", __LINE__, t);
							//if: I still have partial matches after pruning
							if (this -> g_num_match >= 2)
    32ba:	fe 01       	movw	r30, r28
    32bc:	ee 58       	subi	r30, 0x8E	; 142
    32be:	ff 4f       	sbci	r31, 0xFF	; 255
    32c0:	80 81       	ld	r24, Z
    32c2:	82 30       	cpi	r24, 0x02	; 2
    32c4:	1c f0       	brlt	.+6      	; 0x32cc <_ZN9Orangebot9Uniparser5parseEh+0x204>
							{
								//One fewer partial match
								this -> g_num_match--;
    32c6:	81 50       	subi	r24, 0x01	; 1
    32c8:	80 83       	st	Z, r24
    32ca:	05 c0       	rjmp	.+10     	; 0x32d6 <_ZN9Orangebot9Uniparser5parseEh+0x20e>
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
								//No more matches. Can breack cycle early
								t = UNIPARSER_MAX_CMD;
    32cc:	0f 2e       	mov	r0, r31
    32ce:	f4 e1       	ldi	r31, 0x14	; 20
    32d0:	ff 2e       	mov	r15, r31
    32d2:	f0 2d       	mov	r31, r0
							}
							//if: all partial matches have been pruned away
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
    32d4:	01 e0       	ldi	r16, 0x01	; 1
			DPRINT_NOTAB("- ARG | num_match %d\n", this -> g_num_match);
			//if: I have at least one partial match
			if (this -> g_num_match > 0)
			{
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    32d6:	f3 94       	inc	r15
    32d8:	bc cf       	rjmp	.-136    	; 0x3252 <_ZN9Orangebot9Uniparser5parseEh+0x18a>
						//do nothing
					}
				} //end for each dictionary command
			}	//end if: I have at least one partial match
			//If I only have one match | BUGFIX: single match is now shifted by one
			else if (this -> g_num_match < 0)
    32da:	88 23       	and	r24, r24
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <_ZN9Orangebot9Uniparser5parseEh+0x218>
    32de:	ce c0       	rjmp	.+412    	; 0x347c <_ZN9Orangebot9Uniparser5parseEh+0x3b4>
			{
				//decode command index
				uint8_t t = -this -> g_num_match -1;
    32e0:	68 2f       	mov	r22, r24
    32e2:	60 95       	com	r22
				//Search in the dictionary for a % entry. An argument descriptor
				if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == '%')
    32e4:	86 2f       	mov	r24, r22
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	fc 01       	movw	r30, r24
    32ea:	ee 0f       	add	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	ec 0f       	add	r30, r28
    32f0:	fd 1f       	adc	r31, r29
    32f2:	01 80       	ldd	r0, Z+1	; 0x01
    32f4:	f2 81       	ldd	r31, Z+2	; 0x02
    32f6:	e0 2d       	mov	r30, r0
    32f8:	de 01       	movw	r26, r28
    32fa:	a8 0f       	add	r26, r24
    32fc:	b9 1f       	adc	r27, r25
    32fe:	99 96       	adiw	r26, 0x29	; 41
    3300:	8c 91       	ld	r24, X
    3302:	e8 0f       	add	r30, r24
    3304:	f1 1d       	adc	r31, r1
    3306:	80 81       	ld	r24, Z
    3308:	85 32       	cpi	r24, 0x25	; 37
    330a:	09 f0       	breq	.+2      	; 0x330e <_ZN9Orangebot9Uniparser5parseEh+0x246>
    330c:	ba c0       	rjmp	.+372    	; 0x3482 <_ZN9Orangebot9Uniparser5parseEh+0x3ba>
				{
						//! This is the first char of an argument
					//Do not increment index but go in ARG parsing mode
					this -> g_status = Parser_status::PARSER_ARG;
    330e:	82 e0       	ldi	r24, 0x02	; 2
    3310:	fe 01       	movw	r30, r28
    3312:	ed 58       	subi	r30, 0x8D	; 141
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	80 83       	st	Z, r24
					//Do not advance index until argument decoding is complete
					DPRINT("%d | ARG begins | command: %d\n", __LINE__, t);
					//Add an argument using current partial match as template
					bool f_ret = this -> add_arg( t );
    3318:	ce 01       	movw	r24, r28
    331a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN9Orangebot9Uniparser7add_argEh>
						DPRINT("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
						//I can recover from this by resetting the FSM
						f_rst_fsm = true;
					}
					//!	accumulate argument character inside argument.
					f_ret = this -> accumulate_arg( data );
    331e:	61 2f       	mov	r22, r17
    3320:	ce 01       	movw	r24, r28
    3322:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN9Orangebot9Uniparser14accumulate_argEh>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3326:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3328:	00 e0       	ldi	r16, 0x00	; 0
    332a:	b5 c0       	rjmp	.+362    	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		//if: I'm matching a non argument non terminator
		else
		{
			DPRINT_NOTAB("- ID\n");
			//if: I have at least one partial match
			if (this -> g_num_match > 0)
    332c:	fe 01       	movw	r30, r28
    332e:	ee 58       	subi	r30, 0x8E	; 142
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	50 81       	ld	r21, Z
    3334:	15 16       	cp	r1, r21
    3336:	d4 f5       	brge	.+116    	; 0x33ac <_ZN9Orangebot9Uniparser5parseEh+0x2e4>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	00 e0       	ldi	r16, 0x00	; 0
			{
				//If I have just one match, I can upgrade num_match to skip for next time
				bool f_match = (this -> g_num_match == 1);
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    333c:	98 81       	ld	r25, Y
    333e:	89 17       	cp	r24, r25
    3340:	08 f0       	brcs	.+2      	; 0x3344 <_ZN9Orangebot9Uniparser5parseEh+0x27c>
    3342:	a2 c0       	rjmp	.+324    	; 0x3488 <_ZN9Orangebot9Uniparser5parseEh+0x3c0>
				{
					//if: the command is a partial match
					if (this -> g_cmd_index[t] > 0)
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	fe 01       	movw	r30, r28
    334a:	e2 0f       	add	r30, r18
    334c:	f3 1f       	adc	r31, r19
    334e:	91 a5       	ldd	r25, Z+41	; 0x29
    3350:	99 23       	and	r25, r25
    3352:	51 f1       	breq	.+84     	; 0x33a8 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
					{
						//check that the dictionary holds the same value as data
						if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == data)
    3354:	f9 01       	movw	r30, r18
    3356:	ee 0f       	add	r30, r30
    3358:	ff 1f       	adc	r31, r31
    335a:	ec 0f       	add	r30, r28
    335c:	fd 1f       	adc	r31, r29
    335e:	01 80       	ldd	r0, Z+1	; 0x01
    3360:	f2 81       	ldd	r31, Z+2	; 0x02
    3362:	e0 2d       	mov	r30, r0
    3364:	e9 0f       	add	r30, r25
    3366:	f1 1d       	adc	r31, r1
    3368:	40 81       	ld	r20, Z
    336a:	14 13       	cpse	r17, r20
    336c:	0e c0       	rjmp	.+28     	; 0x338a <_ZN9Orangebot9Uniparser5parseEh+0x2c2>
						{
							//Advance to the next dictionary entry for this command
							this -> g_cmd_index[t]++;
    336e:	fe 01       	movw	r30, r28
    3370:	e2 0f       	add	r30, r18
    3372:	f3 1f       	adc	r31, r19
    3374:	9f 5f       	subi	r25, 0xFF	; 255
    3376:	91 a7       	std	Z+41, r25	; 0x29
							//if: This is the sole partial match surviving
							if (f_match == true)
    3378:	51 30       	cpi	r21, 0x01	; 1
    337a:	b1 f4       	brne	.+44     	; 0x33a8 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
							{
								//Save the index inside num match to skip the for next time | BUGFIX: Now single match is shifted by one
								this -> g_num_match = -t -1;
    337c:	fe 01       	movw	r30, r28
    337e:	ee 58       	subi	r30, 0x8E	; 142
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 95       	com	r24
    3384:	80 83       	st	Z, r24
								//Single match has been found. Break the cycle
								t = UNIPARSER_MAX_CMD;
    3386:	84 e1       	ldi	r24, 0x14	; 20
    3388:	0f c0       	rjmp	.+30     	; 0x33a8 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
						}
						//Else: this dictionary entry does not contain an argument descriptor
						else
						{
							//Prune away the partial match
							this -> g_cmd_index[t] = 0;
    338a:	fe 01       	movw	r30, r28
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	11 a6       	std	Z+41, r1	; 0x29
							DPRINT("%d | Prune away partial match: %d | ", __LINE__, t);
							//if: I still have partial matches after pruning
							if (this -> g_num_match >= 2)
    3392:	fe 01       	movw	r30, r28
    3394:	ee 58       	subi	r30, 0x8E	; 142
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	90 81       	ld	r25, Z
    339a:	92 30       	cpi	r25, 0x02	; 2
    339c:	1c f0       	brlt	.+6      	; 0x33a4 <_ZN9Orangebot9Uniparser5parseEh+0x2dc>
							{
								//One fewer partial match
								this -> g_num_match--;
    339e:	91 50       	subi	r25, 0x01	; 1
    33a0:	90 83       	st	Z, r25
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
								//No more matches. Can breack cycle early
								t = UNIPARSER_MAX_CMD;
    33a4:	84 e1       	ldi	r24, 0x14	; 20
							}
							//if: all partial matches have been pruned away
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
    33a6:	01 e0       	ldi	r16, 0x01	; 1
			if (this -> g_num_match > 0)
			{
				//If I have just one match, I can upgrade num_match to skip for next time
				bool f_match = (this -> g_num_match == 1);
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	c8 cf       	rjmp	.-112    	; 0x333c <_ZN9Orangebot9Uniparser5parseEh+0x274>
			//BUGFIX: If the only match is also entry 0
			//If I only have one match
			else //if (this -> g_num_match <= 0)
			{
				//decode command index | BUGFIX: Now single match is shifted by one
				uint8_t t = -this -> g_num_match -1;
    33ac:	85 2f       	mov	r24, r21
    33ae:	80 95       	com	r24
				//check that the dictionary holds the same value as data
				if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == data)
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	fc 01       	movw	r30, r24
    33b4:	ee 0f       	add	r30, r30
    33b6:	ff 1f       	adc	r31, r31
    33b8:	ec 0f       	add	r30, r28
    33ba:	fd 1f       	adc	r31, r29
    33bc:	01 80       	ldd	r0, Z+1	; 0x01
    33be:	f2 81       	ldd	r31, Z+2	; 0x02
    33c0:	e0 2d       	mov	r30, r0
    33c2:	de 01       	movw	r26, r28
    33c4:	a8 0f       	add	r26, r24
    33c6:	b9 1f       	adc	r27, r25
    33c8:	99 96       	adiw	r26, 0x29	; 41
    33ca:	2c 91       	ld	r18, X
    33cc:	99 97       	sbiw	r26, 0x29	; 41
    33ce:	e2 0f       	add	r30, r18
    33d0:	f1 1d       	adc	r31, r1
    33d2:	30 81       	ld	r19, Z
    33d4:	13 13       	cpse	r17, r19
    33d6:	5a c0       	rjmp	.+180    	; 0x348c <_ZN9Orangebot9Uniparser5parseEh+0x3c4>
				{
					//Match! Scan next entry
					this -> g_cmd_index[t]++;
    33d8:	fd 01       	movw	r30, r26
    33da:	2f 5f       	subi	r18, 0xFF	; 255
    33dc:	21 a7       	std	Z+41, r18	; 0x29
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    33de:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    33e0:	00 e0       	ldi	r16, 0x00	; 0
    33e2:	59 c0       	rjmp	.+178    	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		//--------------------------------------------------------------------------
		//	ARG decoder
		//--------------------------------------------------------------------------

	//if: I'm decoding arguments
	else if (this -> g_status == Parser_status::PARSER_ARG)
    33e4:	82 30       	cpi	r24, 0x02	; 2
    33e6:	09 f0       	breq	.+2      	; 0x33ea <_ZN9Orangebot9Uniparser5parseEh+0x322>
    33e8:	54 c0       	rjmp	.+168    	; 0x3492 <_ZN9Orangebot9Uniparser5parseEh+0x3ca>
	{
		DPRINT("%d | PARSER_ARG\n", __LINE__);
		//If: I'm fed a number
		if (IS_NUMBER(data))
    33ea:	80 ed       	ldi	r24, 0xD0	; 208
    33ec:	81 0f       	add	r24, r17
    33ee:	8a 30       	cpi	r24, 0x0A	; 10
    33f0:	38 f4       	brcc	.+14     	; 0x3400 <_ZN9Orangebot9Uniparser5parseEh+0x338>
		{
			//!	accumulate argument character inside argument.
			bool f_ret = this -> accumulate_arg( data );
    33f2:	61 2f       	mov	r22, r17
    33f4:	ce 01       	movw	r24, r28
    33f6:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN9Orangebot9Uniparser14accumulate_argEh>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    33fa:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    33fc:	00 e0       	ldi	r16, 0x00	; 0
    33fe:	4b c0       	rjmp	.+150    	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		else
		{
			DPRINT("Closing argument\n");
			//! Exit argument mode
			//Close current argument and update argument FSM
			this -> close_arg();
    3400:	ce 01       	movw	r24, r28
    3402:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <_ZN9Orangebot9Uniparser9close_argEv>
				f_rst_fsm = true;
			}
			else
			{
				//After argument, I can only have one match. | BUGFIX: Now single match is shifted by one
				uint8_t cmd_id = -this -> g_num_match -1;
    3406:	fe 01       	movw	r30, r28
    3408:	ee 58       	subi	r30, 0x8E	; 142
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	80 95       	com	r24
				//Update the parser index by skipping % and the argument descriptor
				this -> g_cmd_index[ cmd_id ] += 2;
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	fe 01       	movw	r30, r28
    3414:	e8 0f       	add	r30, r24
    3416:	f9 1f       	adc	r31, r25
    3418:	21 a5       	ldd	r18, Z+41	; 0x29
    341a:	2e 5f       	subi	r18, 0xFE	; 254
    341c:	21 a7       	std	Z+41, r18	; 0x29
				//check that the dictionary holds the same value as data
				if (this -> g_cmd_txt[ cmd_id ][ this -> g_cmd_index[ cmd_id ] ] == data)
    341e:	fc 01       	movw	r30, r24
    3420:	ee 0f       	add	r30, r30
    3422:	ff 1f       	adc	r31, r31
    3424:	ec 0f       	add	r30, r28
    3426:	fd 1f       	adc	r31, r29
    3428:	01 80       	ldd	r0, Z+1	; 0x01
    342a:	f2 81       	ldd	r31, Z+2	; 0x02
    342c:	e0 2d       	mov	r30, r0
    342e:	e2 0f       	add	r30, r18
    3430:	f1 1d       	adc	r31, r1
    3432:	30 81       	ld	r19, Z
    3434:	13 13       	cpse	r17, r19
    3436:	07 c0       	rjmp	.+14     	; 0x3446 <_ZN9Orangebot9Uniparser5parseEh+0x37e>
				{
					//Advance to the next dictionary entry for this command
					this -> g_cmd_index[ cmd_id ]++;
    3438:	fe 01       	movw	r30, r28
    343a:	e8 0f       	add	r30, r24
    343c:	f9 1f       	adc	r31, r25
    343e:	2f 5f       	subi	r18, 0xFF	; 255
    3440:	21 a7       	std	Z+41, r18	; 0x29
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3442:	00 e0       	ldi	r16, 0x00	; 0
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <_ZN9Orangebot9Uniparser5parseEh+0x380>
				//No match
				else
				{
					DPRINT("%d | Pruning away last match\n", __LINE__);
					//I can recover from this by resetting the FSM
					f_rst_fsm = true;
    3446:	01 e0       	ldi	r16, 0x01	; 1
				}
				this -> g_status = Parser_status::PARSER_ID;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	fe 01       	movw	r30, r28
    344c:	ed 58       	subi	r30, 0x8D	; 141
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 83       	st	Z, r24
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3452:	5f ef       	ldi	r21, 0xFF	; 255
    3454:	20 c0       	rjmp	.+64     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    3456:	01 e0       	ldi	r16, 0x01	; 1
    3458:	1e c0       	rjmp	.+60     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    345a:	5f ef       	ldi	r21, 0xFF	; 255
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    345c:	01 e0       	ldi	r16, 0x01	; 1
    345e:	1b c0       	rjmp	.+54     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3460:	5f ef       	ldi	r21, 0xFF	; 255
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    3462:	01 e0       	ldi	r16, 0x01	; 1
    3464:	18 c0       	rjmp	.+48     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3466:	5f ef       	ldi	r21, 0xFF	; 255
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    3468:	01 e0       	ldi	r16, 0x01	; 1
    346a:	15 c0       	rjmp	.+42     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    346c:	5f ef       	ldi	r21, 0xFF	; 255
		}	//End If: letter
		//Non letter can never be a first character
		else
		{
			//Issue a FSM reset
			f_rst_fsm = true;
    346e:	01 e0       	ldi	r16, 0x01	; 1
    3470:	12 c0       	rjmp	.+36     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3472:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3474:	00 e0       	ldi	r16, 0x00	; 0
    3476:	0f c0       	rjmp	.+30     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3478:	5f ef       	ldi	r21, 0xFF	; 255
    347a:	0d c0       	rjmp	.+26     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
    347c:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    347e:	00 e0       	ldi	r16, 0x00	; 0
    3480:	0a c0       	rjmp	.+20     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3482:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3484:	00 e0       	ldi	r16, 0x00	; 0
    3486:	07 c0       	rjmp	.+14     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3488:	5f ef       	ldi	r21, 0xFF	; 255
    348a:	05 c0       	rjmp	.+10     	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
    348c:	5f ef       	ldi	r21, 0xFF	; 255
				}
				//no match
				else
				{
					//Last partial match has been pruned away. Issue a FSM reset
					f_rst_fsm = true;
    348e:	01 e0       	ldi	r16, 0x01	; 1
    3490:	02 c0       	rjmp	.+4      	; 0x3496 <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3492:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3494:	00 e0       	ldi	r16, 0x00	; 0
		//----------------------------------------------------------------
		//!	@detail
		//! FSM reset. Clear up the machine for the next clean execution

	//If: a reset was issued
	if (f_rst_fsm == true)
    3496:	00 23       	and	r16, r16
    3498:	51 f0       	breq	.+20     	; 0x34ae <_ZN9Orangebot9Uniparser5parseEh+0x3e6>
	{
		DPRINT("%d | FSM RESET\n", __LINE__);
		//Clear reset flag
		f_rst_fsm = false;
		//Status becomes IDLE
		this -> g_status = Orangebot::Parser_status::PARSER_IDLE;
    349a:	fe 01       	movw	r30, r28
    349c:	ed 58       	subi	r30, 0x8D	; 141
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	10 82       	st	Z, r1
		//I have no partial matches anymore
		this -> g_num_match = 0;
    34a2:	31 97       	sbiw	r30, 0x01	; 1
    34a4:	10 82       	st	Z, r1
		//If I don't have a pending execution
		if (exe_index == -1)
    34a6:	5f 3f       	cpi	r21, 0xFF	; 255
    34a8:	11 f4       	brne	.+4      	; 0x34ae <_ZN9Orangebot9Uniparser5parseEh+0x3e6>
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//Prepare the argument descriptor. zero arguments are in store
	this -> g_arg_fsm_status.num_arg = 0;
    34aa:	3d 97       	sbiw	r30, 0x0d	; 13
	//First free slot in the argument vector is the first byte
	this -> g_arg_fsm_status.arg_index = 0;
	//if sign is not specified, default argument sign is plus
	this -> g_arg_fsm_status.arg_sign = false;
    34ac:	10 82       	st	Z, r1
		//----------------------------------------------------------------
		//!	@detail
		//! FSM reset. Clear up the machine for the next clean execution

	//If: an execution event has been launched
	if (exe_index > -1)
    34ae:	55 23       	and	r21, r21
    34b0:	74 f0       	brlt	.+28     	; 0x34ce <_ZN9Orangebot9Uniparser5parseEh+0x406>
			DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
			return true;	//fail
		}
		DPRINT("%d | Executing handler of command %d | num arguments: %d\n", __LINE__, exe_index, this -> g_arg_fsm_status.num_arg);
		//Execute handler of given function. Automatically deduce arguments from argument vector
        this -> execute_callback( this ->g_cmd_handler[exe_index] );
    34b2:	e5 2f       	mov	r30, r21
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 0b       	sbc	r31, r31
    34b8:	ec 0f       	add	r30, r28
    34ba:	fd 1f       	adc	r31, r29
    34bc:	65 ad       	ldd	r22, Z+61	; 0x3d
    34be:	76 ad       	ldd	r23, Z+62	; 0x3e
    34c0:	ce 01       	movw	r24, r28
    34c2:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN9Orangebot9Uniparser16execute_callbackEPv>
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//Prepare the argument descriptor. zero arguments are in store
	this -> g_arg_fsm_status.num_arg = 0;
    34c6:	fe 01       	movw	r30, r28
    34c8:	eb 59       	subi	r30, 0x9B	; 155
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
	//First free slot in the argument vector is the first byte
	this -> g_arg_fsm_status.arg_index = 0;
	//if sign is not specified, default argument sign is plus
	this -> g_arg_fsm_status.arg_sign = false;
    34cc:	10 82       	st	Z, r1
	//----------------------------------------------------------------

	//Trace Return from main
	DRETURN_ARG("Err_code: %d\n", this -> g_err);
	//Inform the caller that an error occurred
	return (this -> g_err != Err_codes::NO_ERR);
    34ce:	cc 58       	subi	r28, 0x8C	; 140
    34d0:	df 4f       	sbci	r29, 0xFF	; 255
    34d2:	98 81       	ld	r25, Y
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	91 11       	cpse	r25, r1
    34d8:	01 c0       	rjmp	.+2      	; 0x34dc <_ZN9Orangebot9Uniparser5parseEh+0x414>
    34da:	80 e0       	ldi	r24, 0x00	; 0
}	//end method: parse | char
    34dc:	df 91       	pop	r29
    34de:	cf 91       	pop	r28
    34e0:	1f 91       	pop	r17
    34e2:	0f 91       	pop	r16
    34e4:	ff 90       	pop	r15
    34e6:	08 95       	ret

000034e8 <_ZN9Orangebot9UniparserC1Ev>:
//! @return no return
//!	@details
//! Empty constructor
/***************************************************************************/

Uniparser::Uniparser( void )
    34e8:	dc 01       	movw	r26, r24
	//	BODY
	//----------------------------------------------------------------
	//! @details initialize structure

	//No commands are currently loaded inside the parser
	this -> g_num_cmd = 0;
    34ea:	1c 92       	st	X, r1
	//for: each possible command
	for (t = 0;t < UNIPARSER_MAX_CMD;t++)
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	94 31       	cpi	r25, 0x14	; 20
    34f0:	60 f4       	brcc	.+24     	; 0x350a <_ZN9Orangebot9UniparserC1Ev+0x22>
	{
		//command has no txt identifier linked
		this -> g_cmd_txt[t] = nullptr;
    34f2:	e9 2f       	mov	r30, r25
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	ea 0f       	add	r30, r26
    34fc:	fb 1f       	adc	r31, r27
    34fe:	11 82       	std	Z+1, r1	; 0x01
    3500:	12 82       	std	Z+2, r1	; 0x02
		//command has no function handler linked
		this -> g_cmd_handler[t] = nullptr;
    3502:	15 ae       	std	Z+61, r1	; 0x3d
    3504:	16 ae       	std	Z+62, r1	; 0x3e
	//! @details initialize structure

	//No commands are currently loaded inside the parser
	this -> g_num_cmd = 0;
	//for: each possible command
	for (t = 0;t < UNIPARSER_MAX_CMD;t++)
    3506:	9f 5f       	subi	r25, 0xFF	; 255
    3508:	f2 cf       	rjmp	.-28     	; 0x34ee <_ZN9Orangebot9UniparserC1Ev+0x6>
		this -> g_cmd_txt[t] = nullptr;
		//command has no function handler linked
		this -> g_cmd_handler[t] = nullptr;
	}
	//I have no partial matches
	this -> g_num_match = 0;
    350a:	fd 01       	movw	r30, r26
    350c:	ee 58       	subi	r30, 0x8E	; 142
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	10 82       	st	Z, r1
	//FSM begins in idle
	this -> g_status = Orangebot::Parser_status::PARSER_IDLE;
    3512:	31 96       	adiw	r30, 0x01	; 1
    3514:	10 82       	st	Z, r1
	//No error
	this -> g_err = Orangebot::Err_codes::NO_ERR;
    3516:	31 96       	adiw	r30, 0x01	; 1
    3518:	10 82       	st	Z, r1
	//! @details algorithm:

	//Initialize structure to safe values
	this -> init();
	//Pass a terminator to the parser to have it initialize itself
	this -> parse( '\0' );
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	cd 01       	movw	r24, r26
    351e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN9Orangebot9Uniparser5parseEh>
    3522:	08 95       	ret

00003524 <__udivmodqi4>:
    3524:	99 1b       	sub	r25, r25
    3526:	79 e0       	ldi	r23, 0x09	; 9
    3528:	04 c0       	rjmp	.+8      	; 0x3532 <__udivmodqi4_ep>

0000352a <__udivmodqi4_loop>:
    352a:	99 1f       	adc	r25, r25
    352c:	96 17       	cp	r25, r22
    352e:	08 f0       	brcs	.+2      	; 0x3532 <__udivmodqi4_ep>
    3530:	96 1b       	sub	r25, r22

00003532 <__udivmodqi4_ep>:
    3532:	88 1f       	adc	r24, r24
    3534:	7a 95       	dec	r23
    3536:	c9 f7       	brne	.-14     	; 0x352a <__udivmodqi4_loop>
    3538:	80 95       	com	r24
    353a:	08 95       	ret

0000353c <__udivmodhi4>:
    353c:	aa 1b       	sub	r26, r26
    353e:	bb 1b       	sub	r27, r27
    3540:	51 e1       	ldi	r21, 0x11	; 17
    3542:	07 c0       	rjmp	.+14     	; 0x3552 <__udivmodhi4_ep>

00003544 <__udivmodhi4_loop>:
    3544:	aa 1f       	adc	r26, r26
    3546:	bb 1f       	adc	r27, r27
    3548:	a6 17       	cp	r26, r22
    354a:	b7 07       	cpc	r27, r23
    354c:	10 f0       	brcs	.+4      	; 0x3552 <__udivmodhi4_ep>
    354e:	a6 1b       	sub	r26, r22
    3550:	b7 0b       	sbc	r27, r23

00003552 <__udivmodhi4_ep>:
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	5a 95       	dec	r21
    3558:	a9 f7       	brne	.-22     	; 0x3544 <__udivmodhi4_loop>
    355a:	80 95       	com	r24
    355c:	90 95       	com	r25
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	08 95       	ret

00003564 <__udivmodsi4>:
    3564:	a1 e2       	ldi	r26, 0x21	; 33
    3566:	1a 2e       	mov	r1, r26
    3568:	aa 1b       	sub	r26, r26
    356a:	bb 1b       	sub	r27, r27
    356c:	fd 01       	movw	r30, r26
    356e:	0d c0       	rjmp	.+26     	; 0x358a <__udivmodsi4_ep>

00003570 <__udivmodsi4_loop>:
    3570:	aa 1f       	adc	r26, r26
    3572:	bb 1f       	adc	r27, r27
    3574:	ee 1f       	adc	r30, r30
    3576:	ff 1f       	adc	r31, r31
    3578:	a2 17       	cp	r26, r18
    357a:	b3 07       	cpc	r27, r19
    357c:	e4 07       	cpc	r30, r20
    357e:	f5 07       	cpc	r31, r21
    3580:	20 f0       	brcs	.+8      	; 0x358a <__udivmodsi4_ep>
    3582:	a2 1b       	sub	r26, r18
    3584:	b3 0b       	sbc	r27, r19
    3586:	e4 0b       	sbc	r30, r20
    3588:	f5 0b       	sbc	r31, r21

0000358a <__udivmodsi4_ep>:
    358a:	66 1f       	adc	r22, r22
    358c:	77 1f       	adc	r23, r23
    358e:	88 1f       	adc	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	1a 94       	dec	r1
    3594:	69 f7       	brne	.-38     	; 0x3570 <__udivmodsi4_loop>
    3596:	60 95       	com	r22
    3598:	70 95       	com	r23
    359a:	80 95       	com	r24
    359c:	90 95       	com	r25
    359e:	9b 01       	movw	r18, r22
    35a0:	ac 01       	movw	r20, r24
    35a2:	bd 01       	movw	r22, r26
    35a4:	cf 01       	movw	r24, r30
    35a6:	08 95       	ret

000035a8 <__tablejump2__>:
    35a8:	ee 0f       	add	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	05 90       	lpm	r0, Z+
    35ae:	f4 91       	lpm	r31, Z
    35b0:	e0 2d       	mov	r30, r0
    35b2:	09 94       	ijmp

000035b4 <__umulhisi3>:
    35b4:	a2 9f       	mul	r26, r18
    35b6:	b0 01       	movw	r22, r0
    35b8:	b3 9f       	mul	r27, r19
    35ba:	c0 01       	movw	r24, r0
    35bc:	a3 9f       	mul	r26, r19
    35be:	70 0d       	add	r23, r0
    35c0:	81 1d       	adc	r24, r1
    35c2:	11 24       	eor	r1, r1
    35c4:	91 1d       	adc	r25, r1
    35c6:	b2 9f       	mul	r27, r18
    35c8:	70 0d       	add	r23, r0
    35ca:	81 1d       	adc	r24, r1
    35cc:	11 24       	eor	r1, r1
    35ce:	91 1d       	adc	r25, r1
    35d0:	08 95       	ret

000035d2 <__muluhisi3>:
    35d2:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__umulhisi3>
    35d6:	a5 9f       	mul	r26, r21
    35d8:	90 0d       	add	r25, r0
    35da:	b4 9f       	mul	r27, r20
    35dc:	90 0d       	add	r25, r0
    35de:	a4 9f       	mul	r26, r20
    35e0:	80 0d       	add	r24, r0
    35e2:	91 1d       	adc	r25, r1
    35e4:	11 24       	eor	r1, r1
    35e6:	08 95       	ret

000035e8 <do_rand>:
    35e8:	8f 92       	push	r8
    35ea:	9f 92       	push	r9
    35ec:	af 92       	push	r10
    35ee:	bf 92       	push	r11
    35f0:	cf 92       	push	r12
    35f2:	df 92       	push	r13
    35f4:	ef 92       	push	r14
    35f6:	ff 92       	push	r15
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	ec 01       	movw	r28, r24
    35fe:	68 81       	ld	r22, Y
    3600:	79 81       	ldd	r23, Y+1	; 0x01
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	9b 81       	ldd	r25, Y+3	; 0x03
    3606:	61 15       	cp	r22, r1
    3608:	71 05       	cpc	r23, r1
    360a:	81 05       	cpc	r24, r1
    360c:	91 05       	cpc	r25, r1
    360e:	21 f4       	brne	.+8      	; 0x3618 <do_rand+0x30>
    3610:	64 e2       	ldi	r22, 0x24	; 36
    3612:	79 ed       	ldi	r23, 0xD9	; 217
    3614:	8b e5       	ldi	r24, 0x5B	; 91
    3616:	97 e0       	ldi	r25, 0x07	; 7
    3618:	2d e1       	ldi	r18, 0x1D	; 29
    361a:	33 ef       	ldi	r19, 0xF3	; 243
    361c:	41 e0       	ldi	r20, 0x01	; 1
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__divmodsi4>
    3624:	49 01       	movw	r8, r18
    3626:	5a 01       	movw	r10, r20
    3628:	9b 01       	movw	r18, r22
    362a:	ac 01       	movw	r20, r24
    362c:	a7 ea       	ldi	r26, 0xA7	; 167
    362e:	b1 e4       	ldi	r27, 0x41	; 65
    3630:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__muluhisi3>
    3634:	6b 01       	movw	r12, r22
    3636:	7c 01       	movw	r14, r24
    3638:	ac ee       	ldi	r26, 0xEC	; 236
    363a:	b4 ef       	ldi	r27, 0xF4	; 244
    363c:	a5 01       	movw	r20, r10
    363e:	94 01       	movw	r18, r8
    3640:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__mulohisi3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	8c 0d       	add	r24, r12
    364a:	9d 1d       	adc	r25, r13
    364c:	ae 1d       	adc	r26, r14
    364e:	bf 1d       	adc	r27, r15
    3650:	b7 ff       	sbrs	r27, 7
    3652:	03 c0       	rjmp	.+6      	; 0x365a <do_rand+0x72>
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	a1 09       	sbc	r26, r1
    3658:	b0 48       	sbci	r27, 0x80	; 128
    365a:	88 83       	st	Y, r24
    365c:	99 83       	std	Y+1, r25	; 0x01
    365e:	aa 83       	std	Y+2, r26	; 0x02
    3660:	bb 83       	std	Y+3, r27	; 0x03
    3662:	9f 77       	andi	r25, 0x7F	; 127
    3664:	df 91       	pop	r29
    3666:	cf 91       	pop	r28
    3668:	ff 90       	pop	r15
    366a:	ef 90       	pop	r14
    366c:	df 90       	pop	r13
    366e:	cf 90       	pop	r12
    3670:	bf 90       	pop	r11
    3672:	af 90       	pop	r10
    3674:	9f 90       	pop	r9
    3676:	8f 90       	pop	r8
    3678:	08 95       	ret

0000367a <rand_r>:
    367a:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <do_rand>
    367e:	08 95       	ret

00003680 <rand>:
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	98 e2       	ldi	r25, 0x28	; 40
    3684:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <do_rand>
    3688:	08 95       	ret

0000368a <srand>:
    368a:	a0 e0       	ldi	r26, 0x00	; 0
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
    3692:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    3696:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
    369a:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
    369e:	08 95       	ret

000036a0 <__divmodsi4>:
    36a0:	05 2e       	mov	r0, r21
    36a2:	97 fb       	bst	r25, 7
    36a4:	1e f4       	brtc	.+6      	; 0x36ac <__divmodsi4+0xc>
    36a6:	00 94       	com	r0
    36a8:	0e 94 67 1b 	call	0x36ce	; 0x36ce <__negsi2>
    36ac:	57 fd       	sbrc	r21, 7
    36ae:	07 d0       	rcall	.+14     	; 0x36be <__divmodsi4_neg2>
    36b0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <__udivmodsi4>
    36b4:	07 fc       	sbrc	r0, 7
    36b6:	03 d0       	rcall	.+6      	; 0x36be <__divmodsi4_neg2>
    36b8:	4e f4       	brtc	.+18     	; 0x36cc <__divmodsi4_exit>
    36ba:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__negsi2>

000036be <__divmodsi4_neg2>:
    36be:	50 95       	com	r21
    36c0:	40 95       	com	r20
    36c2:	30 95       	com	r19
    36c4:	21 95       	neg	r18
    36c6:	3f 4f       	sbci	r19, 0xFF	; 255
    36c8:	4f 4f       	sbci	r20, 0xFF	; 255
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255

000036cc <__divmodsi4_exit>:
    36cc:	08 95       	ret

000036ce <__negsi2>:
    36ce:	90 95       	com	r25
    36d0:	80 95       	com	r24
    36d2:	70 95       	com	r23
    36d4:	61 95       	neg	r22
    36d6:	7f 4f       	sbci	r23, 0xFF	; 255
    36d8:	8f 4f       	sbci	r24, 0xFF	; 255
    36da:	9f 4f       	sbci	r25, 0xFF	; 255
    36dc:	08 95       	ret

000036de <__mulshisi3>:
    36de:	b7 ff       	sbrs	r27, 7
    36e0:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__muluhisi3>

000036e4 <__mulohisi3>:
    36e4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__muluhisi3>
    36e8:	82 1b       	sub	r24, r18
    36ea:	93 0b       	sbc	r25, r19
    36ec:	08 95       	ret

000036ee <__do_global_dtors>:
    36ee:	10 e0       	ldi	r17, 0x00	; 0
    36f0:	c9 e5       	ldi	r28, 0x59	; 89
    36f2:	d0 e0       	ldi	r29, 0x00	; 0
    36f4:	04 c0       	rjmp	.+8      	; 0x36fe <__do_global_dtors+0x10>
    36f6:	fe 01       	movw	r30, r28
    36f8:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <__tablejump2__>
    36fc:	21 96       	adiw	r28, 0x01	; 1
    36fe:	ca 35       	cpi	r28, 0x5A	; 90
    3700:	d1 07       	cpc	r29, r17
    3702:	c9 f7       	brne	.-14     	; 0x36f6 <__do_global_dtors+0x8>
    3704:	f8 94       	cli

00003706 <__stop_program>:
    3706:	ff cf       	rjmp	.-2      	; 0x3706 <__stop_program>
