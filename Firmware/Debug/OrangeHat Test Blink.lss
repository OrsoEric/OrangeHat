
OrangeHat Test Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00802800  00802800  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000338d  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026bc  00000000  00000000  000037ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061e  00000000  00000000  00005ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000064c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a6  00000000  00000000  000065c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00007f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000080b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_4>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  84:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  88:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  8c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  90:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  94:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  98:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  9c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	28 e2       	ldi	r18, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a4 30       	cpi	r26, 0x04	; 4
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  c0:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <_Z10init_clockv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Main clock switch
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_gm, CLKCTRL_CLKSEL_gp, (CLKCTRL_CLKSEL_t)CLKCTRL_CLKSEL_OSC20M_gc);
  c8:	88 ed       	ldi	r24, 0xD8	; 216
  ca:	84 bf       	out	0x34, r24	; 52
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	9c 7f       	andi	r25, 0xFC	; 252
  d4:	90 83       	st	Z, r25
	//Configure CLK_OUT pin as disabled
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKOUT_bm, CLKCTRL_CLKOUT_bp, 0);
  d6:	84 bf       	out	0x34, r24	; 52
  d8:	90 81       	ld	r25, Z
  da:	9f 77       	andi	r25, 0x7F	; 127
  dc:	90 83       	st	Z, r25
	//Disable the main clock prescaler
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm, CLKCTRL_PEN_bm, 0);
  de:	84 bf       	out	0x34, r24	; 52
  e0:	91 81       	ldd	r25, Z+1	; 0x01
  e2:	9e 7f       	andi	r25, 0xFE	; 254
  e4:	91 83       	std	Z+1, r25	; 0x01
	//Set the main clock prescaler to 2
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_gm, CLKCTRL_PDIV_gp, (CLKCTRL_PDIV_t)CLKCTRL_PDIV_2X_gc);
  e6:	84 bf       	out	0x34, r24	; 52
  e8:	91 81       	ldd	r25, Z+1	; 0x01
  ea:	91 7e       	andi	r25, 0xE1	; 225
  ec:	91 83       	std	Z+1, r25	; 0x01
	//Disable the clock multiplexer and prescaler protection
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKLOCK, CLKCTRL_LOCKEN_bm, CLKCTRL_LOCKEN_bp, 0);
  ee:	84 bf       	out	0x34, r24	; 52
  f0:	92 81       	ldd	r25, Z+2	; 0x02
  f2:	9e 7f       	andi	r25, 0xFE	; 254
  f4:	92 83       	std	Z+2, r25	; 0x02

	CLKCTRL.OSC20MCTRLA |= CLKCTRL_RUNSTDBY_bm; //1<<1;
  f6:	90 89       	ldd	r25, Z+16	; 0x10
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	90 8b       	std	Z+16, r25	; 0x10
	CCP = CCP_IOREG_gc;
  fc:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCALIBB |= CLKCTRL_LOCK_bm; //1<<7
  fe:	82 89       	ldd	r24, Z+18	; 0x12
 100:	80 68       	ori	r24, 0x80	; 128
 102:	82 8b       	std	Z+18, r24	; 0x12
 104:	08 95       	ret

00000106 <_Z8init_pinv>:
	//!	PA5				: 
	//!	PA6				: UC_BTN
	//!	PA7				: 
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_A_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_R,	PIN_Z );
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	10 82       	st	Z, r1
 10c:	14 82       	std	Z+4, r1	; 0x04
 10e:	12 86       	std	Z+10, r1	; 0x0a
 110:	10 8a       	std	Z+16, r1	; 0x10
 112:	11 8a       	std	Z+17, r1	; 0x11
 114:	12 8a       	std	Z+18, r1	; 0x12
 116:	13 8a       	std	Z+19, r1	; 0x13
 118:	14 8a       	std	Z+20, r1	; 0x14
 11a:	15 8a       	std	Z+21, r1	; 0x15
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	86 8b       	std	Z+22, r24	; 0x16
 120:	17 8a       	std	Z+23, r1	; 0x17
	//!	PB5,			: 
	//!	PB6				:
	//!	PB7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_B_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
 122:	e0 e2       	ldi	r30, 0x20	; 32
 124:	f4 e0       	ldi	r31, 0x04	; 4
 126:	10 82       	st	Z, r1
 128:	14 82       	std	Z+4, r1	; 0x04
 12a:	12 86       	std	Z+10, r1	; 0x0a
 12c:	10 8a       	std	Z+16, r1	; 0x10
 12e:	11 8a       	std	Z+17, r1	; 0x11
 130:	12 8a       	std	Z+18, r1	; 0x12
 132:	13 8a       	std	Z+19, r1	; 0x13
 134:	14 8a       	std	Z+20, r1	; 0x14
 136:	15 8a       	std	Z+21, r1	; 0x15
 138:	16 8a       	std	Z+22, r1	; 0x16
 13a:	17 8a       	std	Z+23, r1	; 0x17
	//!	PC5				: UC_LED1
	//!	PC6				:
	//!	PC7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_C_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
 13c:	e0 e4       	ldi	r30, 0x40	; 64
 13e:	f4 e0       	ldi	r31, 0x04	; 4
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	80 83       	st	Z, r24
 144:	14 82       	std	Z+4, r1	; 0x04
 146:	12 86       	std	Z+10, r1	; 0x0a
 148:	10 8a       	std	Z+16, r1	; 0x10
 14a:	11 8a       	std	Z+17, r1	; 0x11
 14c:	12 8a       	std	Z+18, r1	; 0x12
 14e:	13 8a       	std	Z+19, r1	; 0x13
 150:	14 8a       	std	Z+20, r1	; 0x14
 152:	15 8a       	std	Z+21, r1	; 0x15
 154:	16 8a       	std	Z+22, r1	; 0x16
 156:	17 8a       	std	Z+23, r1	; 0x17
	//!	PD5				:
	//!	PD6				: 
	//!	PD7				:	UC_SERVO_POWER#	| true= allow power to flow from the regulator channel 2 to the servo connectors
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_D_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
 158:	e0 e6       	ldi	r30, 0x60	; 96
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	10 82       	st	Z, r1
 15e:	14 82       	std	Z+4, r1	; 0x04
 160:	12 86       	std	Z+10, r1	; 0x0a
 162:	10 8a       	std	Z+16, r1	; 0x10
 164:	11 8a       	std	Z+17, r1	; 0x11
 166:	12 8a       	std	Z+18, r1	; 0x12
 168:	13 8a       	std	Z+19, r1	; 0x13
 16a:	14 8a       	std	Z+20, r1	; 0x14
 16c:	15 8a       	std	Z+21, r1	; 0x15
 16e:	16 8a       	std	Z+22, r1	; 0x16
 170:	17 8a       	std	Z+23, r1	; 0x17
	//!	PE5				:
	//!	PE6				:
	//!	PE7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_E_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	10 82       	st	Z, r1
 178:	14 82       	std	Z+4, r1	; 0x04
 17a:	12 86       	std	Z+10, r1	; 0x0a
 17c:	10 8a       	std	Z+16, r1	; 0x10
 17e:	11 8a       	std	Z+17, r1	; 0x11
 180:	12 8a       	std	Z+18, r1	; 0x12
 182:	13 8a       	std	Z+19, r1	; 0x13
 184:	14 8a       	std	Z+20, r1	; 0x14
 186:	15 8a       	std	Z+21, r1	; 0x15
 188:	16 8a       	std	Z+22, r1	; 0x16
 18a:	17 8a       	std	Z+23, r1	; 0x17
	//!	PF5				: 
	//!	PF6				:
	//!	PF7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_F_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
 18c:	e0 ea       	ldi	r30, 0xA0	; 160
 18e:	f4 e0       	ldi	r31, 0x04	; 4
 190:	10 82       	st	Z, r1
 192:	14 82       	std	Z+4, r1	; 0x04
 194:	12 86       	std	Z+10, r1	; 0x0a
 196:	10 8a       	std	Z+16, r1	; 0x10
 198:	11 8a       	std	Z+17, r1	; 0x11
 19a:	12 8a       	std	Z+18, r1	; 0x12
 19c:	13 8a       	std	Z+19, r1	; 0x13
 19e:	14 8a       	std	Z+20, r1	; 0x14
 1a0:	15 8a       	std	Z+21, r1	; 0x15
 1a2:	16 8a       	std	Z+22, r1	; 0x16
 1a4:	17 8a       	std	Z+23, r1	; 0x17
 1a6:	08 95       	ret

000001a8 <_Z8init_rtcv>:
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrla_tmp		= RTC.CTRLA;
 1a8:	e0 e4       	ldi	r30, 0x40	; 64
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	90 81       	ld	r25, Z
	uint8_t intctrl_tmp		= RTC.INTCTRL;
 1ae:	42 81       	ldd	r20, Z+2	; 0x02
	uint8_t dgbctrl_tmp		= RTC.DBGCTRL;
 1b0:	55 81       	ldd	r21, Z+5	; 0x05
	uint8_t clksel_tmp		= RTC.CLKSEL;
 1b2:	37 81       	ldd	r19, Z+7	; 0x07
	uint8_t pitctrla_tmp	= RTC.PITCTRLA;
 1b4:	80 89       	ldd	r24, Z+16	; 0x10
	uint8_t pitintctrl_tmp	= RTC.PITINTCTRL;
 1b6:	22 89       	ldd	r18, Z+18	; 0x12
	//! RTC Clock Source
	//----------------------------------------------------------------
	//	Clock source for the RTC timer. Select only one

	//Internal 32KHz oscillator
	SET_MASKED_BIT( clksel_tmp, RTC_CLKSEL_gm, RTC_CLKSEL_INT32K_gc );
 1b8:	3c 7f       	andi	r19, 0xFC	; 252
 1ba:	97 78       	andi	r25, 0x87	; 135
	//----------------------------------------------------------------
	//! RTC Clock Prescaler
	//----------------------------------------------------------------
	//	Set prescaler. Only activate one

	SET_MASKED_BIT( ctrla_tmp, RTC_PRESCALER_gm, RTC_PRESCALER_DIV1_gc );
 1bc:	91 68       	ori	r25, 0x81	; 129
	//----------------------------------------------------------------
	//! RTC Periodic Interrupt period
	//----------------------------------------------------------------

	//! Enable Periodic Interrupt timer
	SET_BIT( pitctrla_tmp, RTC_PITEN_bp );
 1be:	81 60       	ori	r24, 0x01	; 1
	//! Period for the periodic interrupt. Activate only one
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_OFF_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC4_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC8_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC16_gc );
	SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC32_gc );
 1c0:	87 78       	andi	r24, 0x87	; 135
 1c2:	80 62       	ori	r24, 0x20	; 32
	//! Enable overflow interrupt
	//SET_BIT( intctrl_tmp, RTC_OVF_bp );
	//! Enable Compare Match interrupt
	//SET_BIT( intctrl_tmp, RTC_CMP_bp );
	//! Enable Periodic Interrupt timer
	SET_BIT( pitintctrl_tmp, RTC_PI_bp );
 1c4:	21 60       	ori	r18, 0x01	; 1
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Calibration PPM of the RTC counter. Meant to be done in software against more precise clock sources.
	RTC.CALIB = (uint8_t)0x00;
 1c6:	16 82       	std	Z+6, r1	; 0x06

	//Wait for the ***
	//while (IS_BIT_ONE(RTC.STATUS, RTC_PERBUSY_bp));
	RTC.PER = (uint16_t)0;
 1c8:	12 86       	std	Z+10, r1	; 0x0a
 1ca:	13 86       	std	Z+11, r1	; 0x0b
	//Compare register for compare interrupt
	RTC.CMP = (uint16_t)0;
 1cc:	14 86       	std	Z+12, r1	; 0x0c
 1ce:	15 86       	std	Z+13, r1	; 0x0d

	//! Registers write back
	//Configuration registers
	RTC.DBGCTRL = dgbctrl_tmp;
 1d0:	55 83       	std	Z+5, r21	; 0x05
	RTC.CLKSEL = clksel_tmp;
 1d2:	37 83       	std	Z+7, r19	; 0x07
	RTC.PITCTRLA = pitctrla_tmp;
 1d4:	80 8b       	std	Z+16, r24	; 0x10
	//Write this register last as it activates the timer
	RTC.CTRLA = ctrla_tmp;
 1d6:	90 83       	st	Z, r25
	//Activate interrupts
	RTC.INTCTRL = intctrl_tmp;
 1d8:	42 83       	std	Z+2, r20	; 0x02
	RTC.PITINTCTRL = pitintctrl_tmp;
 1da:	22 8b       	std	Z+18, r18	; 0x12
 1dc:	08 95       	ret

000001de <_Z4initv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Initialize clock systems
	init_clock();
 1de:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z10init_clockv>
	
	//initialize pin configuration
	init_pin();
 1e2:	0e 94 83 00 	call	0x106	; 0x106 <_Z8init_pinv>
	
	//Initialize RTC timer as Periodic interrupt source: RTC_PIT_vect
	init_rtc();
 1e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z8init_rtcv>
	
	//Activate interrupts
	sei();
 1ea:	78 94       	sei
 1ec:	08 95       	ret

000001ee <__vector_4>:
**		slow tick
**	Issue a slow tick meant for non time critical communication and housekeeping tasks
****************************************************************************/

ISR( RTC_PIT_vect )
{	
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	//	VARS
	//----------------------------------------------------------------
	//Local prescaler
	
	//if: tick is not issued
	if (g_isr_flags.fast_tick == false)
 1fe:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <g_isr_flags>
 202:	80 fd       	sbrc	r24, 0
 204:	06 c0       	rjmp	.+12     	; 0x212 <__vector_4+0x24>
	{
		//Issue a tick
		g_isr_flags.fast_tick = true;
 206:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <g_isr_flags>
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <g_isr_flags>
 210:	07 c0       	rjmp	.+14     	; 0x220 <__vector_4+0x32>
	//if: slow tick is already issued
	else
	{
		//ERR OVERRUN
		//The main application could not keep up with the previous slow tick. Raise the alarm
		ISSUE_ERROR(ge_error_code, Error_code::ERR_OVERRUN_FAST_TICK);
 212:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <ge_error_code>
 216:	88 23       	and	r24, r24
 218:	19 f0       	breq	.+6      	; 0x220 <__vector_4+0x32>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <ge_error_code>
	//	Slow tick meant to handle slow services like LEDs
	
	//Prescaler
	static uint16_t pre_slow = 0;	
	//If: Tick
	if (pre_slow == 0)
 220:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 224:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	89 f4       	brne	.+34     	; 0x24e <__vector_4+0x60>
	{
		//if: tick is not issued
		if (g_isr_flags.slow_tick == false)
 22c:	20 91 03 28 	lds	r18, 0x2803	; 0x802803 <g_isr_flags>
 230:	21 fd       	sbrc	r18, 1
 232:	06 c0       	rjmp	.+12     	; 0x240 <__vector_4+0x52>
		{
			//Issue a tick
			g_isr_flags.slow_tick = true;	
 234:	20 91 03 28 	lds	r18, 0x2803	; 0x802803 <g_isr_flags>
 238:	22 60       	ori	r18, 0x02	; 2
 23a:	20 93 03 28 	sts	0x2803, r18	; 0x802803 <g_isr_flags>
 23e:	07 c0       	rjmp	.+14     	; 0x24e <__vector_4+0x60>
		//if: tick is already issued
		else
		{
			//ERR OVERRUN
			//The main application could not keep up with the previous slow tick. Raise the alarm
			ISSUE_ERROR(ge_error_code, Error_code::ERR_OVERRUN_SLOW_TICK);
 240:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <ge_error_code>
 244:	22 23       	and	r18, r18
 246:	19 f0       	breq	.+6      	; 0x24e <__vector_4+0x60>
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	20 93 02 28 	sts	0x2802, r18	; 0x802802 <ge_error_code>
		}
		
	}
	//Increment, reset if counter is top before increment
	pre_slow = AT_TOP_INC( pre_slow, Prescaler::TOP_SLOW_TICK-1 );
 24e:	87 3e       	cpi	r24, 0xE7	; 231
 250:	23 e0       	ldi	r18, 0x03	; 3
 252:	92 07       	cpc	r25, r18
 254:	11 f0       	breq	.+4      	; 0x25a <__vector_4+0x6c>
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	02 c0       	rjmp	.+4      	; 0x25e <__vector_4+0x70>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 262:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	RTC.PITINTFLAGS = RTC_PI_bm;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
}
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <main>:
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//! Initialize AT4809 internal peripherals
	init();
 27c:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z4initv>
		//	BUTTON
		//----------------------------------------------------------------
		//	Use LED0 to mirror the state of the BTN

		//If: Fast Tick
		if (g_isr_flags.fast_tick == true)
 280:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <g_isr_flags>
 284:	80 ff       	sbrs	r24, 0
 286:	22 c0       	rjmp	.+68     	; 0x2cc <main+0x50>
		{
			//Reset slow tick
			g_isr_flags.fast_tick = false;
 288:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <g_isr_flags>
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <g_isr_flags>
			//Take the value of the button and mirror it on LED1
			SET_BIT_VALUE( LED1_PORT.OUT, LED1_PIN, GET_BIT(BTN_PORT.IN, BTN_PIN) );
 292:	e0 e4       	ldi	r30, 0x40	; 64
 294:	f4 e0       	ldi	r31, 0x04	; 4
 296:	24 81       	ldd	r18, Z+4	; 0x04
 298:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f4408>
 29c:	98 2f       	mov	r25, r24
 29e:	90 74       	andi	r25, 0x40	; 64
 2a0:	89 2f       	mov	r24, r25
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	08 2e       	mov	r0, r24
 2a6:	89 2f       	mov	r24, r25
 2a8:	00 0c       	add	r0, r0
 2aa:	88 1f       	adc	r24, r24
 2ac:	99 0b       	sbc	r25, r25
 2ae:	00 0c       	add	r0, r0
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	82 95       	swap	r24
 2ba:	92 95       	swap	r25
 2bc:	90 7f       	andi	r25, 0xF0	; 240
 2be:	98 27       	eor	r25, r24
 2c0:	80 7f       	andi	r24, 0xF0	; 240
 2c2:	98 27       	eor	r25, r24
 2c4:	92 2f       	mov	r25, r18
 2c6:	9f 7d       	andi	r25, 0xDF	; 223
 2c8:	89 2b       	or	r24, r25
 2ca:	84 83       	std	Z+4, r24	; 0x04
		//	Slow tick generated by the RTC timer, prescaled by 
		//	32KHz/32/(Prescaler::TOP_SLOW_TICK+1) = 1000ms
		//	Toggle LED1

		//If: Slow Tick
		if (g_isr_flags.slow_tick == true)
 2cc:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <g_isr_flags>
 2d0:	81 ff       	sbrs	r24, 1
 2d2:	d6 cf       	rjmp	.-84     	; 0x280 <main+0x4>
		{
			//Reset slow tick
			g_isr_flags.slow_tick = false;
 2d4:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <g_isr_flags>
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <g_isr_flags>
			//Toggle LED0	
			LED0_PORT.OUTTGL = MASK(LED0_PIN);
 2de:	80 e1       	ldi	r24, 0x10	; 16
 2e0:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7f4447>
 2e4:	cd cf       	rjmp	.-102    	; 0x280 <main+0x4>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
