
2022-01-05b AT4809 UART Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00802800  000035c6  0000367a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003560  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000066  00007560  00003560  00003614  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000150  00802806  00802806  00003680  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000498  00000000  00000000  000036f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f2e9  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004077  00000000  00000000  00012e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000053e4  00000000  00000000  00016ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef4  00000000  00000000  0001c2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003e1d  00000000  00000000  0001d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00010cdc  00000000  00000000  00020fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001078  00000000  00000000  00031cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__dtors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_4>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_7>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_17>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      68:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      6c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      70:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      74:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      78:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      7c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      80:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      84:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      88:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      8c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      90:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      94:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      98:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      9c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      a0:	03 08       	sbc	r0, r3
      a2:	0b 08       	sbc	r0, r11
      a4:	16 08       	sbc	r1, r6
      a6:	23 08       	sbc	r2, r3
      a8:	32 08       	sbc	r3, r2
      aa:	3a 08       	sbc	r3, r10
      ac:	45 08       	sbc	r4, r5
      ae:	52 08       	sbc	r5, r2

000000b0 <__ctors_start>:
      b0:	fd 05       	cpc	r31, r13

000000b2 <__ctors_end>:
      b2:	04 06       	cpc	r0, r20

000000b4 <__dtors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	df e3       	ldi	r29, 0x3F	; 63
      be:	de bf       	out	0x3e, r29	; 62

000000c0 <__do_copy_data>:
      c0:	18 e2       	ldi	r17, 0x28	; 40
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b8 e2       	ldi	r27, 0x28	; 40
      c6:	e6 ec       	ldi	r30, 0xC6	; 198
      c8:	f5 e3       	ldi	r31, 0x35	; 53
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a6 30       	cpi	r26, 0x06	; 6
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	29 e2       	ldi	r18, 0x29	; 41
      d8:	a6 e0       	ldi	r26, 0x06	; 6
      da:	b8 e2       	ldi	r27, 0x28	; 40
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a6 35       	cpi	r26, 0x56	; 86
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	c9 e5       	ldi	r28, 0x59	; 89
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	21 97       	sbiw	r28, 0x01	; 1
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 00 1a 	call	0x3400	; 0x3400 <__tablejump2__>
      f6:	c8 35       	cpi	r28, 0x58	; 88
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 10 05 	call	0xa20	; 0xa20 <main>
     100:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__do_global_dtors>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <_Z12lcd_send_cmdh>:
	//***********************************************************************
	//	RETURN
	//***********************************************************************

	return;
}   //End function: lcd_print_s8
     108:	e0 e2       	ldi	r30, 0x20	; 32
     10a:	f4 e0       	ldi	r31, 0x04	; 4
     10c:	94 81       	ldd	r25, Z+4	; 0x04
     10e:	90 7f       	andi	r25, 0xF0	; 240
     110:	28 2f       	mov	r18, r24
     112:	22 95       	swap	r18
     114:	2f 70       	andi	r18, 0x0F	; 15
     116:	92 2b       	or	r25, r18
     118:	94 83       	std	Z+4, r25	; 0x04
     11a:	94 81       	ldd	r25, Z+4	; 0x04
     11c:	9f 7d       	andi	r25, 0xDF	; 223
     11e:	94 83       	std	Z+4, r25	; 0x04
     120:	94 81       	ldd	r25, Z+4	; 0x04
     122:	90 61       	ori	r25, 0x10	; 16
     124:	94 83       	std	Z+4, r25	; 0x04
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	11 97       	sbiw	r26, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <_Z12lcd_send_cmdh+0x22>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z12lcd_send_cmdh+0x28>
     130:	00 00       	nop
     132:	94 81       	ldd	r25, Z+4	; 0x04
     134:	9f 7e       	andi	r25, 0xEF	; 239
     136:	94 83       	std	Z+4, r25	; 0x04
     138:	a7 ee       	ldi	r26, 0xE7	; 231
     13a:	b3 e0       	ldi	r27, 0x03	; 3
     13c:	11 97       	sbiw	r26, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <_Z12lcd_send_cmdh+0x34>
     140:	00 c0       	rjmp	.+0      	; 0x142 <_Z12lcd_send_cmdh+0x3a>
     142:	00 00       	nop
     144:	94 81       	ldd	r25, Z+4	; 0x04
     146:	90 7f       	andi	r25, 0xF0	; 240
     148:	8f 70       	andi	r24, 0x0F	; 15
     14a:	89 2b       	or	r24, r25
     14c:	84 83       	std	Z+4, r24	; 0x04
     14e:	84 81       	ldd	r24, Z+4	; 0x04
     150:	80 61       	ori	r24, 0x10	; 16
     152:	84 83       	std	Z+4, r24	; 0x04
     154:	87 ee       	ldi	r24, 0xE7	; 231
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <_Z12lcd_send_cmdh+0x50>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <_Z12lcd_send_cmdh+0x56>
     15e:	00 00       	nop
     160:	84 81       	ldd	r24, Z+4	; 0x04
     162:	8f 7e       	andi	r24, 0xEF	; 239
     164:	84 83       	std	Z+4, r24	; 0x04
     166:	a7 ee       	ldi	r26, 0xE7	; 231
     168:	b3 e0       	ldi	r27, 0x03	; 3
     16a:	11 97       	sbiw	r26, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <_Z12lcd_send_cmdh+0x62>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <_Z12lcd_send_cmdh+0x68>
     170:	00 00       	nop
     172:	8f e0       	ldi	r24, 0x0F	; 15
     174:	97 e2       	ldi	r25, 0x27	; 39
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <_Z12lcd_send_cmdh+0x6e>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z12lcd_send_cmdh+0x74>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <_Z8lcd_initv>:
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     186:	88 e2       	ldi	r24, 0x28	; 40
     188:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	80 32       	cpi	r24, 0x20	; 32
     19c:	40 f4       	brcc	.+16     	; 0x1ae <_Z8lcd_initv+0x2e>
     19e:	e8 2f       	mov	r30, r24
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	e1 5f       	subi	r30, 0xF1	; 241
     1a4:	f7 4d       	sbci	r31, 0xD7	; 215
     1a6:	90 e2       	ldi	r25, 0x20	; 32
     1a8:	90 83       	st	Z, r25
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <_Z8lcd_initv+0x1a>
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	38 f4       	brcc	.+14     	; 0x1c2 <_Z8lcd_initv+0x42>
     1b4:	e8 2f       	mov	r30, r24
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	e5 5f       	subi	r30, 0xF5	; 245
     1ba:	f7 4d       	sbci	r31, 0xD7	; 215
     1bc:	10 82       	st	Z, r1
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	f7 cf       	rjmp	.-18     	; 0x1b0 <_Z8lcd_initv+0x30>
     1c2:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <lcd_cfg_flags>
     1c6:	10 92 09 28 	sts	0x2809, r1	; 0x802809 <lcd_error>
     1ca:	08 95       	ret

000001cc <_Z10lcd_updatev>:
     1cc:	cf 93       	push	r28
     1ce:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <_ZZ10lcd_updatevE6status>
     1d2:	98 2f       	mov	r25, r24
     1d4:	92 95       	swap	r25
     1d6:	96 95       	lsr	r25
     1d8:	97 70       	andi	r25, 0x07	; 7
     1da:	93 70       	andi	r25, 0x03	; 3
     1dc:	c8 2f       	mov	r28, r24
     1de:	cf 71       	andi	r28, 0x1F	; 31
     1e0:	8c 2f       	mov	r24, r28
     1e2:	91 11       	cpse	r25, r1
     1e4:	aa c0       	rjmp	.+340    	; 0x33a <_Z10lcd_updatev+0x16e>
     1e6:	5c 2f       	mov	r21, r28
     1e8:	57 70       	andi	r21, 0x07	; 7
     1ea:	6f ef       	ldi	r22, 0xFF	; 255
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	05 2e       	mov	r0, r21
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_Z10lcd_updatev+0x2a>
     1f2:	66 0f       	add	r22, r22
     1f4:	77 1f       	adc	r23, r23
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_Z10lcd_updatev+0x26>
     1fa:	9c 2f       	mov	r25, r28
     1fc:	98 71       	andi	r25, 0x18	; 24
     1fe:	29 2f       	mov	r18, r25
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	35 95       	asr	r19
     204:	27 95       	ror	r18
     206:	35 95       	asr	r19
     208:	27 95       	ror	r18
     20a:	35 95       	asr	r19
     20c:	27 95       	ror	r18
     20e:	f9 01       	movw	r30, r18
     210:	e5 5f       	subi	r30, 0xF5	; 245
     212:	f7 4d       	sbci	r31, 0xD7	; 215
     214:	40 81       	ld	r20, Z
     216:	64 23       	and	r22, r20
     218:	a1 f0       	breq	.+40     	; 0x242 <_Z10lcd_updatev+0x76>
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	01 c0       	rjmp	.+2      	; 0x220 <_Z10lcd_updatev+0x54>
     21e:	99 0f       	add	r25, r25
     220:	5a 95       	dec	r21
     222:	ea f7       	brpl	.-6      	; 0x21e <_Z10lcd_updatev+0x52>
     224:	01 c0       	rjmp	.+2      	; 0x228 <_Z10lcd_updatev+0x5c>
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	99 23       	and	r25, r25
     22a:	09 f4       	brne	.+2      	; 0x22e <_Z10lcd_updatev+0x62>
     22c:	44 c0       	rjmp	.+136    	; 0x2b6 <_Z10lcd_updatev+0xea>
     22e:	29 2f       	mov	r18, r25
     230:	24 23       	and	r18, r20
     232:	c9 f7       	brne	.-14     	; 0x226 <_Z10lcd_updatev+0x5a>
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	99 0f       	add	r25, r25
     238:	b9 f7       	brne	.-18     	; 0x228 <_Z10lcd_updatev+0x5c>
     23a:	23 e6       	ldi	r18, 0x63	; 99
     23c:	20 93 09 28 	sts	0x2809, r18	; 0x802809 <lcd_error>
     240:	f3 cf       	rjmp	.-26     	; 0x228 <_Z10lcd_updatev+0x5c>
     242:	89 2f       	mov	r24, r25
     244:	52 2f       	mov	r21, r18
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	01 c0       	rjmp	.+2      	; 0x24c <_Z10lcd_updatev+0x80>
     24a:	95 e0       	ldi	r25, 0x05	; 5
     24c:	95 30       	cpi	r25, 0x05	; 5
     24e:	f0 f4       	brcc	.+60     	; 0x28c <_Z10lcd_updatev+0xc0>
     250:	25 2f       	mov	r18, r21
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	e5 5f       	subi	r30, 0xF5	; 245
     258:	f7 4d       	sbci	r31, 0xD7	; 215
     25a:	40 81       	ld	r20, Z
     25c:	41 11       	cpse	r20, r1
     25e:	f5 cf       	rjmp	.-22     	; 0x24a <_Z10lcd_updatev+0x7e>
     260:	9f 5f       	subi	r25, 0xFF	; 255
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	24 30       	cpi	r18, 0x04	; 4
     268:	31 05       	cpc	r19, r1
     26a:	14 f4       	brge	.+4      	; 0x270 <_Z10lcd_updatev+0xa4>
     26c:	5f 5f       	subi	r21, 0xFF	; 255
     26e:	01 c0       	rjmp	.+2      	; 0x272 <_Z10lcd_updatev+0xa6>
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	28 5f       	subi	r18, 0xF8	; 248
     278:	3f 4f       	sbci	r19, 0xFF	; 255
     27a:	20 32       	cpi	r18, 0x20	; 32
     27c:	31 05       	cpc	r19, r1
     27e:	14 f0       	brlt	.+4      	; 0x284 <_Z10lcd_updatev+0xb8>
     280:	88 51       	subi	r24, 0x18	; 24
     282:	01 c0       	rjmp	.+2      	; 0x286 <_Z10lcd_updatev+0xba>
     284:	88 5f       	subi	r24, 0xF8	; 248
     286:	95 30       	cpi	r25, 0x05	; 5
     288:	08 f3       	brcs	.-62     	; 0x24c <_Z10lcd_updatev+0x80>
     28a:	1e c1       	rjmp	.+572    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     28c:	e5 2f       	mov	r30, r21
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	e5 5f       	subi	r30, 0xF5	; 245
     292:	f7 4d       	sbci	r31, 0xD7	; 215
     294:	30 81       	ld	r19, Z
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <_Z10lcd_updatev+0xd0>
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	99 23       	and	r25, r25
     29e:	59 f0       	breq	.+22     	; 0x2b6 <_Z10lcd_updatev+0xea>
     2a0:	29 2f       	mov	r18, r25
     2a2:	23 23       	and	r18, r19
     2a4:	d1 f7       	brne	.-12     	; 0x29a <_Z10lcd_updatev+0xce>
     2a6:	99 0f       	add	r25, r25
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
     2aa:	91 11       	cpse	r25, r1
     2ac:	f7 cf       	rjmp	.-18     	; 0x29c <_Z10lcd_updatev+0xd0>
     2ae:	23 e6       	ldi	r18, 0x63	; 99
     2b0:	20 93 09 28 	sts	0x2809, r18	; 0x802809 <lcd_error>
     2b4:	f3 cf       	rjmp	.-26     	; 0x29c <_Z10lcd_updatev+0xd0>
     2b6:	98 2f       	mov	r25, r24
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	c1 f0       	breq	.+48     	; 0x2ec <_Z10lcd_updatev+0x120>
     2bc:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     2c0:	96 95       	lsr	r25
     2c2:	9f 71       	andi	r25, 0x1F	; 31
     2c4:	89 13       	cpse	r24, r25
     2c6:	12 c0       	rjmp	.+36     	; 0x2ec <_Z10lcd_updatev+0x120>
     2c8:	e7 e0       	ldi	r30, 0x07	; 7
     2ca:	f8 e2       	ldi	r31, 0x28	; 40
     2cc:	90 81       	ld	r25, Z
     2ce:	9f 77       	andi	r25, 0x7F	; 127
     2d0:	90 83       	st	Z, r25
     2d2:	e8 2f       	mov	r30, r24
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	e1 5f       	subi	r30, 0xF1	; 241
     2d8:	f7 4d       	sbci	r31, 0xD7	; 215
     2da:	90 81       	ld	r25, Z
     2dc:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <__data_end>
     2e0:	e0 e2       	ldi	r30, 0x20	; 32
     2e2:	f4 e0       	ldi	r31, 0x04	; 4
     2e4:	24 81       	ldd	r18, Z+4	; 0x04
     2e6:	20 62       	ori	r18, 0x20	; 32
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	18 c0       	rjmp	.+48     	; 0x31c <_Z10lcd_updatev+0x150>
     2ec:	e7 e0       	ldi	r30, 0x07	; 7
     2ee:	f8 e2       	ldi	r31, 0x28	; 40
     2f0:	90 81       	ld	r25, Z
     2f2:	90 68       	ori	r25, 0x80	; 128
     2f4:	90 83       	st	Z, r25
     2f6:	28 2f       	mov	r18, r24
     2f8:	20 71       	andi	r18, 0x10	; 16
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	22 0f       	add	r18, r18
     2fe:	33 1f       	adc	r19, r19
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	92 2f       	mov	r25, r18
     306:	90 68       	ori	r25, 0x80	; 128
     308:	28 2f       	mov	r18, r24
     30a:	2f 70       	andi	r18, 0x0F	; 15
     30c:	92 2b       	or	r25, r18
     30e:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <__data_end>
     312:	e0 e2       	ldi	r30, 0x20	; 32
     314:	f4 e0       	ldi	r31, 0x04	; 4
     316:	24 81       	ldd	r18, Z+4	; 0x04
     318:	2f 7d       	andi	r18, 0xDF	; 223
     31a:	24 83       	std	Z+4, r18	; 0x04
     31c:	e8 e0       	ldi	r30, 0x08	; 8
     31e:	f8 e2       	ldi	r31, 0x28	; 40
     320:	20 81       	ld	r18, Z
     322:	21 60       	ori	r18, 0x01	; 1
     324:	20 83       	st	Z, r18
     326:	e0 e2       	ldi	r30, 0x20	; 32
     328:	f4 e0       	ldi	r31, 0x04	; 4
     32a:	24 81       	ldd	r18, Z+4	; 0x04
     32c:	20 7f       	andi	r18, 0xF0	; 240
     32e:	92 95       	swap	r25
     330:	9f 70       	andi	r25, 0x0F	; 15
     332:	92 2b       	or	r25, r18
     334:	94 83       	std	Z+4, r25	; 0x04
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	ba c0       	rjmp	.+372    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     33a:	91 30       	cpi	r25, 0x01	; 1
     33c:	39 f4       	brne	.+14     	; 0x34c <_Z10lcd_updatev+0x180>
     33e:	e0 e2       	ldi	r30, 0x20	; 32
     340:	f4 e0       	ldi	r31, 0x04	; 4
     342:	94 81       	ldd	r25, Z+4	; 0x04
     344:	90 61       	ori	r25, 0x10	; 16
     346:	94 83       	std	Z+4, r25	; 0x04
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	b1 c0       	rjmp	.+354    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     34c:	92 30       	cpi	r25, 0x02	; 2
     34e:	81 f4       	brne	.+32     	; 0x370 <_Z10lcd_updatev+0x1a4>
     350:	e0 e2       	ldi	r30, 0x20	; 32
     352:	f4 e0       	ldi	r31, 0x04	; 4
     354:	94 81       	ldd	r25, Z+4	; 0x04
     356:	9f 7e       	andi	r25, 0xEF	; 239
     358:	94 83       	std	Z+4, r25	; 0x04
     35a:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <_ZZ10lcd_updatevE6status>
     35e:	99 23       	and	r25, r25
     360:	0c f4       	brge	.+2      	; 0x364 <_Z10lcd_updatev+0x198>
     362:	a2 c0       	rjmp	.+324    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     364:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     368:	90 ff       	sbrs	r25, 0
     36a:	a0 c0       	rjmp	.+320    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     36c:	93 e0       	ldi	r25, 0x03	; 3
     36e:	9f c0       	rjmp	.+318    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     370:	93 30       	cpi	r25, 0x03	; 3
     372:	09 f0       	breq	.+2      	; 0x376 <_Z10lcd_updatev+0x1aa>
     374:	95 c0       	rjmp	.+298    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     376:	20 91 07 28 	lds	r18, 0x2807	; 0x802807 <_ZZ10lcd_updatevE6status>
     37a:	20 78       	andi	r18, 0x80	; 128
     37c:	e1 f0       	breq	.+56     	; 0x3b6 <_Z10lcd_updatev+0x1ea>
     37e:	30 91 08 28 	lds	r19, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     382:	30 ff       	sbrs	r19, 0
     384:	18 c0       	rjmp	.+48     	; 0x3b6 <_Z10lcd_updatev+0x1ea>
     386:	e8 e0       	ldi	r30, 0x08	; 8
     388:	f8 e2       	ldi	r31, 0x28	; 40
     38a:	23 2f       	mov	r18, r19
     38c:	2e 7f       	andi	r18, 0xFE	; 254
     38e:	20 83       	st	Z, r18
     390:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <__data_end>
     394:	a0 e2       	ldi	r26, 0x20	; 32
     396:	b4 e0       	ldi	r27, 0x04	; 4
     398:	14 96       	adiw	r26, 0x04	; 4
     39a:	4c 91       	ld	r20, X
     39c:	14 97       	sbiw	r26, 0x04	; 4
     39e:	40 7f       	andi	r20, 0xF0	; 240
     3a0:	3f 70       	andi	r19, 0x0F	; 15
     3a2:	34 2b       	or	r19, r20
     3a4:	14 96       	adiw	r26, 0x04	; 4
     3a6:	3c 93       	st	X, r19
     3a8:	9c 2f       	mov	r25, r28
     3aa:	99 0f       	add	r25, r25
     3ac:	21 7c       	andi	r18, 0xC1	; 193
     3ae:	29 2b       	or	r18, r25
     3b0:	20 83       	st	Z, r18
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	7c c0       	rjmp	.+248    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     3b6:	22 23       	and	r18, r18
     3b8:	11 f1       	breq	.+68     	; 0x3fe <_Z10lcd_updatev+0x232>
     3ba:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     3be:	90 fd       	sbrc	r25, 0
     3c0:	1e c0       	rjmp	.+60     	; 0x3fe <_Z10lcd_updatev+0x232>
     3c2:	e0 e2       	ldi	r30, 0x20	; 32
     3c4:	f4 e0       	ldi	r31, 0x04	; 4
     3c6:	94 81       	ldd	r25, Z+4	; 0x04
     3c8:	90 62       	ori	r25, 0x20	; 32
     3ca:	94 83       	std	Z+4, r25	; 0x04
     3cc:	a7 e0       	ldi	r26, 0x07	; 7
     3ce:	b8 e2       	ldi	r27, 0x28	; 40
     3d0:	9c 91       	ld	r25, X
     3d2:	9f 77       	andi	r25, 0x7F	; 127
     3d4:	9c 93       	st	X, r25
     3d6:	a8 e0       	ldi	r26, 0x08	; 8
     3d8:	b8 e2       	ldi	r27, 0x28	; 40
     3da:	9c 91       	ld	r25, X
     3dc:	91 60       	ori	r25, 0x01	; 1
     3de:	9c 93       	st	X, r25
     3e0:	ac 2f       	mov	r26, r28
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	a1 5f       	subi	r26, 0xF1	; 241
     3e6:	b7 4d       	sbci	r27, 0xD7	; 215
     3e8:	9c 91       	ld	r25, X
     3ea:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <__data_end>
     3ee:	24 81       	ldd	r18, Z+4	; 0x04
     3f0:	20 7f       	andi	r18, 0xF0	; 240
     3f2:	92 95       	swap	r25
     3f4:	9f 70       	andi	r25, 0x0F	; 15
     3f6:	92 2b       	or	r25, r18
     3f8:	94 83       	std	Z+4, r25	; 0x04
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	58 c0       	rjmp	.+176    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     3fe:	21 11       	cpse	r18, r1
     400:	4a c0       	rjmp	.+148    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     402:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     406:	90 ff       	sbrs	r25, 0
     408:	46 c0       	rjmp	.+140    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     40a:	e8 e0       	ldi	r30, 0x08	; 8
     40c:	f8 e2       	ldi	r31, 0x28	; 40
     40e:	9e 7f       	andi	r25, 0xFE	; 254
     410:	90 83       	st	Z, r25
     412:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <__data_end>
     416:	e0 e2       	ldi	r30, 0x20	; 32
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	94 81       	ldd	r25, Z+4	; 0x04
     41c:	29 2f       	mov	r18, r25
     41e:	20 7f       	andi	r18, 0xF0	; 240
     420:	93 2f       	mov	r25, r19
     422:	9f 70       	andi	r25, 0x0F	; 15
     424:	92 2b       	or	r25, r18
     426:	94 83       	std	Z+4, r25	; 0x04
     428:	ec 2f       	mov	r30, r28
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	e1 5f       	subi	r30, 0xF1	; 241
     42e:	f7 4d       	sbci	r31, 0xD7	; 215
     430:	90 81       	ld	r25, Z
     432:	39 13       	cpse	r19, r25
     434:	18 c0       	rjmp	.+48     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     436:	ec 2f       	mov	r30, r28
     438:	e8 71       	andi	r30, 0x18	; 24
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	f5 95       	asr	r31
     43e:	e7 95       	ror	r30
     440:	f5 95       	asr	r31
     442:	e7 95       	ror	r30
     444:	f5 95       	asr	r31
     446:	e7 95       	ror	r30
     448:	9c 2f       	mov	r25, r28
     44a:	97 70       	andi	r25, 0x07	; 7
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	9a 95       	dec	r25
     458:	e2 f7       	brpl	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     45a:	e5 5f       	subi	r30, 0xF5	; 245
     45c:	f7 4d       	sbci	r31, 0xD7	; 215
     45e:	20 95       	com	r18
     460:	90 81       	ld	r25, Z
     462:	92 23       	and	r25, r18
     464:	90 83       	st	Z, r25
     466:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <_ZZ10lcd_updatevE6status+0x1>
     46a:	96 95       	lsr	r25
     46c:	9f 71       	andi	r25, 0x1F	; 31
     46e:	29 2f       	mov	r18, r25
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	20 32       	cpi	r18, 0x20	; 32
     478:	31 05       	cpc	r19, r1
     47a:	14 f4       	brge	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47c:	9f 5f       	subi	r25, 0xFF	; 255
     47e:	01 c0       	rjmp	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	e8 e0       	ldi	r30, 0x08	; 8
     484:	f8 e2       	ldi	r31, 0x28	; 40
     486:	9f 71       	andi	r25, 0x1F	; 31
     488:	99 0f       	add	r25, r25
     48a:	20 81       	ld	r18, Z
     48c:	21 7c       	andi	r18, 0xC1	; 193
     48e:	92 2b       	or	r25, r18
     490:	90 83       	st	Z, r25
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0c c0       	rjmp	.+24     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     496:	93 e6       	ldi	r25, 0x63	; 99
     498:	90 93 09 28 	sts	0x2809, r25	; 0x802809 <lcd_error>
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	07 c0       	rjmp	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a0:	23 e6       	ldi	r18, 0x63	; 99
     4a2:	20 93 09 28 	sts	0x2809, r18	; 0x802809 <lcd_error>
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	e7 e0       	ldi	r30, 0x07	; 7
     4b0:	f8 e2       	ldi	r31, 0x28	; 40
     4b2:	29 2f       	mov	r18, r25
     4b4:	22 95       	swap	r18
     4b6:	22 0f       	add	r18, r18
     4b8:	20 7e       	andi	r18, 0xE0	; 224
     4ba:	90 81       	ld	r25, Z
     4bc:	9f 79       	andi	r25, 0x9F	; 159
     4be:	92 2b       	or	r25, r18
     4c0:	8f 71       	andi	r24, 0x1F	; 31
     4c2:	90 7e       	andi	r25, 0xE0	; 224
     4c4:	89 2b       	or	r24, r25
     4c6:	80 83       	st	Z, r24
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <_Z14lcd_print_charhh>:
     4cc:	81 32       	cpi	r24, 0x21	; 33
     4ce:	20 f0       	brcs	.+8      	; 0x4d8 <_Z14lcd_print_charhh+0xc>
     4d0:	8a e0       	ldi	r24, 0x0A	; 10
     4d2:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <lcd_error>
     4d6:	08 95       	ret
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	e1 5f       	subi	r30, 0xF1	; 241
     4e0:	f7 4d       	sbci	r31, 0xD7	; 215
     4e2:	90 81       	ld	r25, Z
     4e4:	96 17       	cp	r25, r22
     4e6:	e1 f0       	breq	.+56     	; 0x520 <_Z14lcd_print_charhh+0x54>
     4e8:	f9 01       	movw	r30, r18
     4ea:	e1 5f       	subi	r30, 0xF1	; 241
     4ec:	f7 4d       	sbci	r31, 0xD7	; 215
     4ee:	60 83       	st	Z, r22
     4f0:	e8 2f       	mov	r30, r24
     4f2:	e8 71       	andi	r30, 0x18	; 24
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	f5 95       	asr	r31
     4f8:	e7 95       	ror	r30
     4fa:	f5 95       	asr	r31
     4fc:	e7 95       	ror	r30
     4fe:	f5 95       	asr	r31
     500:	e7 95       	ror	r30
     502:	87 70       	andi	r24, 0x07	; 7
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	a9 01       	movw	r20, r18
     50a:	02 c0       	rjmp	.+4      	; 0x510 <_Z14lcd_print_charhh+0x44>
     50c:	44 0f       	add	r20, r20
     50e:	55 1f       	adc	r21, r21
     510:	8a 95       	dec	r24
     512:	e2 f7       	brpl	.-8      	; 0x50c <_Z14lcd_print_charhh+0x40>
     514:	ca 01       	movw	r24, r20
     516:	e5 5f       	subi	r30, 0xF5	; 245
     518:	f7 4d       	sbci	r31, 0xD7	; 215
     51a:	90 81       	ld	r25, Z
     51c:	89 2b       	or	r24, r25
     51e:	80 83       	st	Z, r24
     520:	08 95       	ret

00000522 <_Z13lcd_print_strhPKc>:
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	61 15       	cp	r22, r1
     52c:	71 05       	cpc	r23, r1
     52e:	b1 f0       	breq	.+44     	; 0x55c <_Z13lcd_print_strhPKc+0x3a>
     530:	8b 01       	movw	r16, r22
     532:	d8 2f       	mov	r29, r24
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	2c 2f       	mov	r18, r28
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	2d 0f       	add	r18, r29
     53c:	31 1d       	adc	r19, r1
     53e:	21 32       	cpi	r18, 0x21	; 33
     540:	31 05       	cpc	r19, r1
     542:	64 f4       	brge	.+24     	; 0x55c <_Z13lcd_print_strhPKc+0x3a>
     544:	f8 01       	movw	r30, r16
     546:	ec 0f       	add	r30, r28
     548:	f1 1d       	adc	r31, r1
     54a:	60 81       	ld	r22, Z
     54c:	66 23       	and	r22, r22
     54e:	31 f0       	breq	.+12     	; 0x55c <_Z13lcd_print_strhPKc+0x3a>
     550:	8c 2f       	mov	r24, r28
     552:	8d 0f       	add	r24, r29
     554:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z14lcd_print_charhh>
     558:	cf 5f       	subi	r28, 0xFF	; 255
     55a:	ed cf       	rjmp	.-38     	; 0x536 <_Z13lcd_print_strhPKc+0x14>
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <_Z13lcd_print_u16hj>:
**	RIGHT 	|123		LEFT	|123
**			|  1			 	|1
****************************************************************************/

void lcd_print_u16( uint8_t pos, uint16_t num )
{
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	60 97       	sbiw	r28, 0x10	; 16
     576:	cd bf       	out	0x3d, r28	; 61
     578:	de bf       	out	0x3e, r29	; 62
     57a:	f8 2e       	mov	r15, r24
     57c:	8b 01       	movw	r16, r22
            {
                //Bad parameters
                return 0;
            }
            //If: number is small enough
            if (num <= UINT8_MAX)
     57e:	6f 3f       	cpi	r22, 0xFF	; 255
     580:	71 05       	cpc	r23, r1
     582:	11 f0       	breq	.+4      	; 0x588 <_Z13lcd_print_u16hj+0x22>
     584:	08 f0       	brcs	.+2      	; 0x588 <_Z13lcd_print_u16hj+0x22>
     586:	4e c0       	rjmp	.+156    	; 0x624 <_Z13lcd_print_u16hj+0xbe>
            const uint8_t base[Config::DIGIT8] =
            {
                100,
                10,
                1
            };
     588:	84 e6       	ldi	r24, 0x64	; 100
     58a:	8f 83       	std	Y+7, r24	; 0x07
     58c:	8a e0       	ldi	r24, 0x0A	; 10
     58e:	88 87       	std	Y+8, r24	; 0x08
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	89 87       	std	Y+9, r24	; 0x09
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
     594:	20 e0       	ldi	r18, 0x00	; 0
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT8; t++)
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	33 30       	cpi	r19, 0x03	; 3
     59a:	d8 f5       	brcc	.+118    	; 0x612 <_Z13lcd_print_u16hj+0xac>
            {
                //If the base is bigger or equal than the number (division is meaningful)
                if (base[t] <= num)
     59c:	e7 e0       	ldi	r30, 0x07	; 7
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 0f       	add	r30, r28
     5a2:	fd 1f       	adc	r31, r29
     5a4:	e3 0f       	add	r30, r19
     5a6:	f1 1d       	adc	r31, r1
     5a8:	40 81       	ld	r20, Z
     5aa:	04 17       	cp	r16, r20
     5ac:	d8 f0       	brcs	.+54     	; 0x5e4 <_Z13lcd_print_u16hj+0x7e>
                {
                    //Divide number by base, get the digit. Bounded to 0 to 9.
                    tmp = num / base[t];
     5ae:	80 2f       	mov	r24, r16
     5b0:	64 2f       	mov	r22, r20
     5b2:	0e 94 be 19 	call	0x337c	; 0x337c <__udivmodqi4>
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     5b6:	62 2f       	mov	r22, r18
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	64 30       	cpi	r22, 0x04	; 4
     5bc:	71 05       	cpc	r23, r1
     5be:	1c f0       	brlt	.+6      	; 0x5c6 <_Z13lcd_print_u16hj+0x60>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     5c0:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     5c2:	00 e0       	ldi	r16, 0x00	; 0
     5c4:	8b c0       	rjmp	.+278    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //Write the digit
                    str[ index ] = '0' +tmp;
     5c6:	e1 e0       	ldi	r30, 0x01	; 1
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	ec 0f       	add	r30, r28
     5cc:	fd 1f       	adc	r31, r29
     5ce:	e2 0f       	add	r30, r18
     5d0:	f1 1d       	adc	r31, r1
     5d2:	90 e3       	ldi	r25, 0x30	; 48
     5d4:	98 0f       	add	r25, r24
     5d6:	90 83       	st	Z, r25
                    //Update the number
                    num = num - base[t] * tmp;
     5d8:	48 9f       	mul	r20, r24
     5da:	00 19       	sub	r16, r0
     5dc:	11 24       	eor	r1, r1
                    //I have found a meaningful digit
                    flag = false;
                    //Jump to the next digit
                    index++;
     5de:	2f 5f       	subi	r18, 0xFF	; 255
                    //Write the digit
                    str[ index ] = '0' +tmp;
                    //Update the number
                    num = num - base[t] * tmp;
                    //I have found a meaningful digit
                    flag = false;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	15 c0       	rjmp	.+42     	; 0x60e <_Z13lcd_print_u16hj+0xa8>
                    //Jump to the next digit
                    index++;
                }
                //If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
                else if ( (flag == true) && (t != (Config::DIGIT8 -1)) )
     5e4:	88 23       	and	r24, r24
     5e6:	11 f0       	breq	.+4      	; 0x5ec <_Z13lcd_print_u16hj+0x86>
     5e8:	32 30       	cpi	r19, 0x02	; 2
     5ea:	89 f4       	brne	.+34     	; 0x60e <_Z13lcd_print_u16hj+0xa8>
                }
                //If: I have a meaningful zero
                else
                {
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     5ec:	42 2f       	mov	r20, r18
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	44 30       	cpi	r20, 0x04	; 4
     5f2:	51 05       	cpc	r21, r1
     5f4:	1c f0       	brlt	.+6      	; 0x5fc <_Z13lcd_print_u16hj+0x96>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     5f6:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	70 c0       	rjmp	.+224    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //It's a zero
                    str[ index ] = '0';
     5fc:	e1 e0       	ldi	r30, 0x01	; 1
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	ec 0f       	add	r30, r28
     602:	fd 1f       	adc	r31, r29
     604:	e2 0f       	add	r30, r18
     606:	f1 1d       	adc	r31, r1
     608:	90 e3       	ldi	r25, 0x30	; 48
     60a:	90 83       	st	Z, r25
                    //Jump to the next digit
                    index++;
     60c:	2f 5f       	subi	r18, 0xFF	; 255
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT8; t++)
     60e:	3f 5f       	subi	r19, 0xFF	; 255
     610:	c3 cf       	rjmp	.-122    	; 0x598 <_Z13lcd_print_u16hj+0x32>
            //----------------------------------------------------------------
            //	RETURN
            //----------------------------------------------------------------

            //Append the terminator
            str[ index ] = Config::TERMINATOR;
     612:	e1 e0       	ldi	r30, 0x01	; 1
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	ec 0f       	add	r30, r28
     618:	fd 1f       	adc	r31, r29
     61a:	e2 0f       	add	r30, r18
     61c:	f1 1d       	adc	r31, r1
     61e:	10 82       	st	Z, r1
            DRETURN_ARG("digits written: %d | output >%s<\n", index, str);
            return index;
     620:	02 2f       	mov	r16, r18
     622:	5c c0       	rjmp	.+184    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                10000,
                1000,
                100,
                10,
                1
            };
     624:	8a e0       	ldi	r24, 0x0A	; 10
     626:	e0 e6       	ldi	r30, 0x60	; 96
     628:	f5 e7       	ldi	r31, 0x75	; 117
     62a:	de 01       	movw	r26, r28
     62c:	17 96       	adiw	r26, 0x07	; 7
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	8a 95       	dec	r24
     634:	e1 f7       	brne	.-8      	; 0x62e <_Z13lcd_print_u16hj+0xc8>
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
            //flag used to blank non meaningful zeros
            bool flag = true;
     636:	81 e0       	ldi	r24, 0x01	; 1
                1
            };
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
     638:	20 e0       	ldi	r18, 0x00	; 0
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT16; t++)
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	35 30       	cpi	r19, 0x05	; 5
     63e:	08 f0       	brcs	.+2      	; 0x642 <_Z13lcd_print_u16hj+0xdc>
     640:	45 c0       	rjmp	.+138    	; 0x6cc <_Z13lcd_print_u16hj+0x166>
            {
                //If the base is bigger or equal than the number (division is meaningful)
                if (base[t] <= num)
     642:	e3 2f       	mov	r30, r19
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	4c 0f       	add	r20, r28
     650:	5d 1f       	adc	r21, r29
     652:	e4 0f       	add	r30, r20
     654:	f5 1f       	adc	r31, r21
     656:	06 80       	ldd	r0, Z+6	; 0x06
     658:	f7 81       	ldd	r31, Z+7	; 0x07
     65a:	e0 2d       	mov	r30, r0
     65c:	0e 17       	cp	r16, r30
     65e:	1f 07       	cpc	r17, r31
     660:	f0 f0       	brcs	.+60     	; 0x69e <_Z13lcd_print_u16hj+0x138>
                {
                    //Divide number by base, get the digit. Bounded to 0 to 9.
                    tmp = num / base[t];
     662:	c8 01       	movw	r24, r16
     664:	bf 01       	movw	r22, r30
     666:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodhi4>
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     66a:	82 2f       	mov	r24, r18
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	04 97       	sbiw	r24, 0x04	; 4
     670:	1c f0       	brlt	.+6      	; 0x678 <_Z13lcd_print_u16hj+0x112>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     672:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     674:	00 e0       	ldi	r16, 0x00	; 0
     676:	32 c0       	rjmp	.+100    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //Write the digit
                    str[ index ] = '0' +tmp;
     678:	a1 e0       	ldi	r26, 0x01	; 1
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	ac 0f       	add	r26, r28
     67e:	bd 1f       	adc	r27, r29
     680:	a2 0f       	add	r26, r18
     682:	b1 1d       	adc	r27, r1
     684:	80 e3       	ldi	r24, 0x30	; 48
     686:	86 0f       	add	r24, r22
     688:	8c 93       	st	X, r24
                    //Update the number
                    num = num - base[t] * tmp;
     68a:	6e 9f       	mul	r22, r30
     68c:	c0 01       	movw	r24, r0
     68e:	6f 9f       	mul	r22, r31
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	08 1b       	sub	r16, r24
     696:	19 0b       	sbc	r17, r25
                    //I have found a meaningful digit
                    flag = false;
                    //Jump to the next digit
                    index++;
     698:	2f 5f       	subi	r18, 0xFF	; 255
                    //Write the digit
                    str[ index ] = '0' +tmp;
                    //Update the number
                    num = num - base[t] * tmp;
                    //I have found a meaningful digit
                    flag = false;
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	15 c0       	rjmp	.+42     	; 0x6c8 <_Z13lcd_print_u16hj+0x162>
                    //Jump to the next digit
                    index++;
                }
                //If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
                else if ( (flag == true) && (t != (Config::DIGIT16 -1)) )
     69e:	88 23       	and	r24, r24
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <_Z13lcd_print_u16hj+0x140>
     6a2:	34 30       	cpi	r19, 0x04	; 4
     6a4:	89 f4       	brne	.+34     	; 0x6c8 <_Z13lcd_print_u16hj+0x162>
                }
                //If: I have a meaningful zero
                else
                {
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     6a6:	42 2f       	mov	r20, r18
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	44 30       	cpi	r20, 0x04	; 4
     6ac:	51 05       	cpc	r21, r1
     6ae:	1c f0       	brlt	.+6      	; 0x6b6 <_Z13lcd_print_u16hj+0x150>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     6b0:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	13 c0       	rjmp	.+38     	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //It's a zero
                    str[ index ] = '0';
     6b6:	e1 e0       	ldi	r30, 0x01	; 1
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	e2 0f       	add	r30, r18
     6c0:	f1 1d       	adc	r31, r1
     6c2:	90 e3       	ldi	r25, 0x30	; 48
     6c4:	90 83       	st	Z, r25
                    //Jump to the next digit
                    index++;
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT16; t++)
     6c8:	3f 5f       	subi	r19, 0xFF	; 255
     6ca:	b8 cf       	rjmp	.-144    	; 0x63c <_Z13lcd_print_u16hj+0xd6>
            //----------------------------------------------------------------
            //	RETURN
            //----------------------------------------------------------------

            //Append the terminator
            str[ index ] = Config::TERMINATOR;
     6cc:	e1 e0       	ldi	r30, 0x01	; 1
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ec 0f       	add	r30, r28
     6d2:	fd 1f       	adc	r31, r29
     6d4:	e2 0f       	add	r30, r18
     6d6:	f1 1d       	adc	r31, r1
     6d8:	10 82       	st	Z, r1
            DRETURN_ARG("digits written: %d | output >%s<\n", index, str);
            return index;
     6da:	02 2f       	mov	r16, r18
	//***********************************************************************

	//convert the number
	ret = User::String::num_to_str( num, User::String::Config::DIGIT16, str );
	//For: every digit
	for (u8t = 0;u8t < User::String::Config::DIGIT16; u8t++)
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	15 30       	cpi	r17, 0x05	; 5
     6e0:	38 f5       	brcc	.+78     	; 0x730 <_Z13lcd_print_u16hj+0x1ca>
	{
		//If: left alignment
		if (IS_BIT_ONE( lcd_cfg_flags, LCD_ADJ_FLAG ))
     6e2:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <lcd_cfg_flags>
     6e6:	80 ff       	sbrs	r24, 0
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <_Z13lcd_print_u16hj+0x198>
		{
			//If: I'm outside the number
			if (u8t >= ret)
     6ea:	10 17       	cp	r17, r16
     6ec:	c0 f4       	brcc	.+48     	; 0x71e <_Z13lcd_print_u16hj+0x1b8>
				u8t1 = ' ';
			}
			else
			{
				//Print number
				u8t1 = str[ u8t ];
     6ee:	e1 e0       	ldi	r30, 0x01	; 1
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ec 0f       	add	r30, r28
     6f4:	fd 1f       	adc	r31, r29
     6f6:	e1 0f       	add	r30, r17
     6f8:	f1 1d       	adc	r31, r1
     6fa:	60 81       	ld	r22, Z
     6fc:	13 c0       	rjmp	.+38     	; 0x724 <_Z13lcd_print_u16hj+0x1be>
		}	//End If: left alignment
		//If: right alignment
		else
		{
			//If: I'm outside the number (yes, that's the condition,right adjustment is messy)
			if ((u8t +ret) < User::String::Config::DIGIT16)
     6fe:	80 2f       	mov	r24, r16
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	81 0f       	add	r24, r17
     704:	91 1d       	adc	r25, r1
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	91 05       	cpc	r25, r1
     70a:	5c f0       	brlt	.+22     	; 0x722 <_Z13lcd_print_u16hj+0x1bc>
			}
			//If: I'm writing a digit
			else
			{
				//print number, I have to write digit in order with this adjust
				u8t1 = str[ u8t +ret -User::String::Config::DIGIT16 ];
     70c:	05 97       	sbiw	r24, 0x05	; 5
     70e:	e1 e0       	ldi	r30, 0x01	; 1
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ec 0f       	add	r30, r28
     714:	fd 1f       	adc	r31, r29
     716:	e8 0f       	add	r30, r24
     718:	f9 1f       	adc	r31, r25
     71a:	60 81       	ld	r22, Z
     71c:	03 c0       	rjmp	.+6      	; 0x724 <_Z13lcd_print_u16hj+0x1be>
		{
			//If: I'm outside the number
			if (u8t >= ret)
			{
				//I write spaces to blank older numbers
				u8t1 = ' ';
     71e:	60 e2       	ldi	r22, 0x20	; 32
     720:	01 c0       	rjmp	.+2      	; 0x724 <_Z13lcd_print_u16hj+0x1be>
		{
			//If: I'm outside the number (yes, that's the condition,right adjustment is messy)
			if ((u8t +ret) < User::String::Config::DIGIT16)
			{
				//I write spaces to blank older numbers
				u8t1 = ' ';
     722:	60 e2       	ldi	r22, 0x20	; 32
				//print number, I have to write digit in order with this adjust
				u8t1 = str[ u8t +ret -User::String::Config::DIGIT16 ];
			}
		}	//End If: right alignment
		//I want to call a single print, I have calculated the argument based on the settings of the print
		lcd_print_char( pos +u8t, u8t1 );
     724:	81 2f       	mov	r24, r17
     726:	8f 0d       	add	r24, r15
     728:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z14lcd_print_charhh>
	//***********************************************************************

	//convert the number
	ret = User::String::num_to_str( num, User::String::Config::DIGIT16, str );
	//For: every digit
	for (u8t = 0;u8t < User::String::Config::DIGIT16; u8t++)
     72c:	1f 5f       	subi	r17, 0xFF	; 255
     72e:	d7 cf       	rjmp	.-82     	; 0x6de <_Z13lcd_print_u16hj+0x178>
	//***********************************************************************
	//	RETURN
	//***********************************************************************

	return;
}   //End function: lcd_print_u16
     730:	60 96       	adiw	r28, 0x10	; 16
     732:	cd bf       	out	0x3d, r28	; 61
     734:	de bf       	out	0x3e, r29	; 62
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	08 95       	ret

00000742 <_Z10init_clockv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Main clock switch
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_gm, CLKCTRL_CLKSEL_gp, (CLKCTRL_CLKSEL_t)CLKCTRL_CLKSEL_OSC20M_gc);
     742:	88 ed       	ldi	r24, 0xD8	; 216
     744:	84 bf       	out	0x34, r24	; 52
     746:	e0 e6       	ldi	r30, 0x60	; 96
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	90 81       	ld	r25, Z
     74c:	9c 7f       	andi	r25, 0xFC	; 252
     74e:	90 83       	st	Z, r25
	//Configure CLK_OUT pin as disabled
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKOUT_bm, CLKCTRL_CLKOUT_bp, 0);
     750:	84 bf       	out	0x34, r24	; 52
     752:	90 81       	ld	r25, Z
     754:	9f 77       	andi	r25, 0x7F	; 127
     756:	90 83       	st	Z, r25
	//Disable the main clock prescaler
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm, CLKCTRL_PEN_bm, 0);
     758:	84 bf       	out	0x34, r24	; 52
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	9e 7f       	andi	r25, 0xFE	; 254
     75e:	91 83       	std	Z+1, r25	; 0x01
	//Set the main clock prescaler to 2
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_gm, CLKCTRL_PDIV_gp, (CLKCTRL_PDIV_t)CLKCTRL_PDIV_2X_gc);
     760:	84 bf       	out	0x34, r24	; 52
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	91 7e       	andi	r25, 0xE1	; 225
     766:	91 83       	std	Z+1, r25	; 0x01
	//Disable the clock multiplexer and prescaler protection
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKLOCK, CLKCTRL_LOCKEN_bm, CLKCTRL_LOCKEN_bp, 0);
     768:	84 bf       	out	0x34, r24	; 52
     76a:	92 81       	ldd	r25, Z+2	; 0x02
     76c:	9e 7f       	andi	r25, 0xFE	; 254
     76e:	92 83       	std	Z+2, r25	; 0x02

	CLKCTRL.OSC20MCTRLA |= CLKCTRL_RUNSTDBY_bm; //1<<1;
     770:	90 89       	ldd	r25, Z+16	; 0x10
     772:	92 60       	ori	r25, 0x02	; 2
     774:	90 8b       	std	Z+16, r25	; 0x10
	CCP = CCP_IOREG_gc;
     776:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCALIBB |= CLKCTRL_LOCK_bm; //1<<7
     778:	82 89       	ldd	r24, Z+18	; 0x12
     77a:	80 68       	ori	r24, 0x80	; 128
     77c:	82 8b       	std	Z+18, r24	; 0x12
     77e:	08 95       	ret

00000780 <_Z8init_pinv>:
	//!	PA5				: 
	//!	PA6				: UC_BTN
	//!	PA7				: LCD PWR#
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_A_CONFIG(	PIN_H,	PIN_R,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_R,	PIN_H );
     780:	e0 e0       	ldi	r30, 0x00	; 0
     782:	f4 e0       	ldi	r31, 0x04	; 4
     784:	81 e8       	ldi	r24, 0x81	; 129
     786:	80 83       	st	Z, r24
     788:	84 83       	std	Z+4, r24	; 0x04
     78a:	12 86       	std	Z+10, r1	; 0x0a
     78c:	10 8a       	std	Z+16, r1	; 0x10
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	81 8b       	std	Z+17, r24	; 0x11
     792:	12 8a       	std	Z+18, r1	; 0x12
     794:	13 8a       	std	Z+19, r1	; 0x13
     796:	14 8a       	std	Z+20, r1	; 0x14
     798:	15 8a       	std	Z+21, r1	; 0x15
     79a:	86 8b       	std	Z+22, r24	; 0x16
     79c:	17 8a       	std	Z+23, r1	; 0x17
	//!	PB5,			: LCD RS
	//!	PB6				:
	//!	PB7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_B_CONFIG(	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
     79e:	e0 e2       	ldi	r30, 0x20	; 32
     7a0:	f4 e0       	ldi	r31, 0x04	; 4
     7a2:	8f e3       	ldi	r24, 0x3F	; 63
     7a4:	80 83       	st	Z, r24
     7a6:	14 82       	std	Z+4, r1	; 0x04
     7a8:	12 86       	std	Z+10, r1	; 0x0a
     7aa:	10 8a       	std	Z+16, r1	; 0x10
     7ac:	11 8a       	std	Z+17, r1	; 0x11
     7ae:	12 8a       	std	Z+18, r1	; 0x12
     7b0:	13 8a       	std	Z+19, r1	; 0x13
     7b2:	14 8a       	std	Z+20, r1	; 0x14
     7b4:	15 8a       	std	Z+21, r1	; 0x15
     7b6:	16 8a       	std	Z+22, r1	; 0x16
     7b8:	17 8a       	std	Z+23, r1	; 0x17
	//!	PC5				: UC_LED1 (BLUE)
	//!	PC6				:
	//!	PC7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_C_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
     7ba:	e0 e4       	ldi	r30, 0x40	; 64
     7bc:	f4 e0       	ldi	r31, 0x04	; 4
     7be:	80 e3       	ldi	r24, 0x30	; 48
     7c0:	80 83       	st	Z, r24
     7c2:	14 82       	std	Z+4, r1	; 0x04
     7c4:	12 86       	std	Z+10, r1	; 0x0a
     7c6:	10 8a       	std	Z+16, r1	; 0x10
     7c8:	11 8a       	std	Z+17, r1	; 0x11
     7ca:	12 8a       	std	Z+18, r1	; 0x12
     7cc:	13 8a       	std	Z+19, r1	; 0x13
     7ce:	14 8a       	std	Z+20, r1	; 0x14
     7d0:	15 8a       	std	Z+21, r1	; 0x15
     7d2:	16 8a       	std	Z+22, r1	; 0x16
     7d4:	17 8a       	std	Z+23, r1	; 0x17
	//!	PD5				:
	//!	PD6				: 
	//!	PD7				:	UC_SERVO_POWER#	| false = allow power to flow from the regulator channel 2 to the servo connectors
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_D_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_H );
     7d6:	e0 e6       	ldi	r30, 0x60	; 96
     7d8:	f4 e0       	ldi	r31, 0x04	; 4
     7da:	80 e8       	ldi	r24, 0x80	; 128
     7dc:	80 83       	st	Z, r24
     7de:	84 83       	std	Z+4, r24	; 0x04
     7e0:	12 86       	std	Z+10, r1	; 0x0a
     7e2:	10 8a       	std	Z+16, r1	; 0x10
     7e4:	11 8a       	std	Z+17, r1	; 0x11
     7e6:	12 8a       	std	Z+18, r1	; 0x12
     7e8:	13 8a       	std	Z+19, r1	; 0x13
     7ea:	14 8a       	std	Z+20, r1	; 0x14
     7ec:	15 8a       	std	Z+21, r1	; 0x15
     7ee:	16 8a       	std	Z+22, r1	; 0x16
     7f0:	17 8a       	std	Z+23, r1	; 0x17
	//!	PE5				: 
	//!	PE6				: 
	//!	PE7				: 
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_E_CONFIG(	PIN_L,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
     7f2:	e0 e8       	ldi	r30, 0x80	; 128
     7f4:	f4 e0       	ldi	r31, 0x04	; 4
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 83       	st	Z, r24
     7fa:	14 82       	std	Z+4, r1	; 0x04
     7fc:	12 86       	std	Z+10, r1	; 0x0a
     7fe:	10 8a       	std	Z+16, r1	; 0x10
     800:	11 8a       	std	Z+17, r1	; 0x11
     802:	12 8a       	std	Z+18, r1	; 0x12
     804:	13 8a       	std	Z+19, r1	; 0x13
     806:	14 8a       	std	Z+20, r1	; 0x14
     808:	15 8a       	std	Z+21, r1	; 0x15
     80a:	16 8a       	std	Z+22, r1	; 0x16
     80c:	17 8a       	std	Z+23, r1	; 0x17
	//!	PF5				: 
	//!	PF6				:
	//!	PF7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_F_CONFIG(	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	8f e0       	ldi	r24, 0x0F	; 15
     814:	80 83       	st	Z, r24
     816:	14 82       	std	Z+4, r1	; 0x04
     818:	12 86       	std	Z+10, r1	; 0x0a
     81a:	10 8a       	std	Z+16, r1	; 0x10
     81c:	11 8a       	std	Z+17, r1	; 0x11
     81e:	12 8a       	std	Z+18, r1	; 0x12
     820:	13 8a       	std	Z+19, r1	; 0x13
     822:	14 8a       	std	Z+20, r1	; 0x14
     824:	15 8a       	std	Z+21, r1	; 0x15
     826:	16 8a       	std	Z+22, r1	; 0x16
     828:	17 8a       	std	Z+23, r1	; 0x17
     82a:	08 95       	ret

0000082c <_Z8init_rtcv>:
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrla_tmp		= RTC.CTRLA;
     82c:	e0 e4       	ldi	r30, 0x40	; 64
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	90 81       	ld	r25, Z
	uint8_t intctrl_tmp		= RTC.INTCTRL;
     832:	42 81       	ldd	r20, Z+2	; 0x02
	uint8_t dgbctrl_tmp		= RTC.DBGCTRL;
     834:	55 81       	ldd	r21, Z+5	; 0x05
	uint8_t clksel_tmp		= RTC.CLKSEL;
     836:	37 81       	ldd	r19, Z+7	; 0x07
	uint8_t pitctrla_tmp	= RTC.PITCTRLA;
     838:	80 89       	ldd	r24, Z+16	; 0x10
	uint8_t pitintctrl_tmp	= RTC.PITINTCTRL;
     83a:	22 89       	ldd	r18, Z+18	; 0x12
	//! RTC Clock Source
	//----------------------------------------------------------------
	//	Clock source for the RTC timer. Select only one

	//Internal 32KHz oscillator
	SET_MASKED_BIT( clksel_tmp, RTC_CLKSEL_gm, RTC_CLKSEL_INT32K_gc );
     83c:	3c 7f       	andi	r19, 0xFC	; 252
     83e:	97 78       	andi	r25, 0x87	; 135
	//----------------------------------------------------------------
	//! RTC Clock Prescaler
	//----------------------------------------------------------------
	//	Set prescaler. Only activate one

	SET_MASKED_BIT( ctrla_tmp, RTC_PRESCALER_gm, RTC_PRESCALER_DIV1_gc );
     840:	91 68       	ori	r25, 0x81	; 129
	//----------------------------------------------------------------
	//! RTC Periodic Interrupt period
	//----------------------------------------------------------------

	//! Enable Periodic Interrupt timer
	SET_BIT( pitctrla_tmp, RTC_PITEN_bp );
     842:	81 60       	ori	r24, 0x01	; 1
	//! Period for the periodic interrupt. Activate only one
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_OFF_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC4_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC8_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC16_gc );
	SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC32_gc );
     844:	87 78       	andi	r24, 0x87	; 135
     846:	80 62       	ori	r24, 0x20	; 32
	//! Enable overflow interrupt
	//SET_BIT( intctrl_tmp, RTC_OVF_bp );
	//! Enable Compare Match interrupt
	//SET_BIT( intctrl_tmp, RTC_CMP_bp );
	//! Enable Periodic Interrupt timer
	SET_BIT( pitintctrl_tmp, RTC_PI_bp );
     848:	21 60       	ori	r18, 0x01	; 1
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Calibration PPM of the RTC counter. Meant to be done in software against more precise clock sources.
	RTC.CALIB = (uint8_t)0x00;
     84a:	16 82       	std	Z+6, r1	; 0x06

	//Wait for the ***
	//while (IS_BIT_ONE(RTC.STATUS, RTC_PERBUSY_bp));
	RTC.PER = (uint16_t)0;
     84c:	12 86       	std	Z+10, r1	; 0x0a
     84e:	13 86       	std	Z+11, r1	; 0x0b
	//Compare register for compare interrupt
	RTC.CMP = (uint16_t)0;
     850:	14 86       	std	Z+12, r1	; 0x0c
     852:	15 86       	std	Z+13, r1	; 0x0d

	//! Registers write back
	//Configuration registers
	RTC.DBGCTRL = dgbctrl_tmp;
     854:	55 83       	std	Z+5, r21	; 0x05
	RTC.CLKSEL = clksel_tmp;
     856:	37 83       	std	Z+7, r19	; 0x07
	RTC.PITCTRLA = pitctrla_tmp;
     858:	80 8b       	std	Z+16, r24	; 0x10
	//Write this register last as it activates the timer
	RTC.CTRLA = ctrla_tmp;
     85a:	90 83       	st	Z, r25
	//Activate interrupts
	RTC.INTCTRL = intctrl_tmp;
     85c:	42 83       	std	Z+2, r20	; 0x02
	RTC.PITINTCTRL = pitintctrl_tmp;
     85e:	22 8b       	std	Z+18, r18	; 0x12
     860:	08 95       	ret

00000862 <_Z4initv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Initialize clock systems
	init_clock();
     862:	0e 94 a1 03 	call	0x742	; 0x742 <_Z10init_clockv>
	
	//initialize pin configuration
	init_pin();
     866:	0e 94 c0 03 	call	0x780	; 0x780 <_Z8init_pinv>
	
	//Initialize RTC timer as Periodic interrupt source: RTC_PIT_vect
	init_rtc();
     86a:	0e 94 16 04 	call	0x82c	; 0x82c <_Z8init_rtcv>
     86e:	08 95       	ret

00000870 <__vector_4>:
//! @details
//! \n Periodic interrupt generated by the RTC from it's independent clock source
/***************************************************************************/

ISR( RTC_PIT_vect )
{	
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
	//	VARS
	//----------------------------------------------------------------
	//Local prescaler
	
	//if: tick is not issued
	if (g_isr_flags.fast_tick == false)
     892:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     896:	80 fd       	sbrc	r24, 0
     898:	06 c0       	rjmp	.+12     	; 0x8a6 <__vector_4+0x36>
	{
		//Issue a tick
		g_isr_flags.fast_tick = true;
     89a:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <g_isr_flags>
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__vector_4+0x3c>
	//if: slow tick is already issued
	else
	{
		//ERR OVERRUN
		//The main application could not keep up with the previous slow tick. Raise the alarm
		report_error( Error_code::ERR_OVERRUN_FAST_TICK );
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12report_error11_Error_code>
	//	Slow tick meant to handle slow services like LEDs
	
	//Prescaler
	static uint16_t pre_slow = 0;	
	//If: Tick
	if (pre_slow == 0)
     8ac:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <_ZZ10__vector_4E8pre_slow>
     8b0:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <_ZZ10__vector_4E8pre_slow+0x1>
     8b4:	89 2b       	or	r24, r25
     8b6:	69 f4       	brne	.+26     	; 0x8d2 <__vector_4+0x62>
	{
		//if: tick is not issued
		if (g_isr_flags.slow_tick == false)
     8b8:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     8bc:	81 fd       	sbrc	r24, 1
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <__vector_4+0x5c>
		{
			//Issue a tick
			g_isr_flags.slow_tick = true;	
     8c0:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     8c4:	82 60       	ori	r24, 0x02	; 2
     8c6:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <g_isr_flags>
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <__vector_4+0x62>
		//if: tick is already issued
		else
		{
			//ERR OVERRUN
			//The main application could not keep up with the previous slow tick. Raise the alarm
			report_error( Error_code::ERR_OVERRUN_SLOW_TICK );
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12report_error11_Error_code>
		}
		
	}
	//Increment, reset if counter is top before increment
	pre_slow = AT_TOP_INC( pre_slow, Prescaler::TOP_SLOW_TICK-1 );
     8d2:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <_ZZ10__vector_4E8pre_slow>
     8d6:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <_ZZ10__vector_4E8pre_slow+0x1>
     8da:	87 3e       	cpi	r24, 0xE7	; 231
     8dc:	23 e0       	ldi	r18, 0x03	; 3
     8de:	92 07       	cpc	r25, r18
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <__vector_4+0x76>
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__vector_4+0x7a>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <_ZZ10__vector_4E8pre_slow>
     8ee:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <_ZZ10__vector_4E8pre_slow+0x1>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	RTC.PITINTFLAGS = RTC_PI_bm;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
}
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <__vector_17>:
//! @details
//! \n initialize clock systems
/***************************************************************************/

ISR( USART0_RXC_vect )
{
     91a:	1f 92       	push	r1
     91c:	0f 92       	push	r0
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	0f 92       	push	r0
     922:	11 24       	eor	r1, r1
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	
	//Execute the UART handler RX
	bool u1_fail = gcl_uart0.isr_rx_exe();
     93c:	84 e1       	ldi	r24, 0x14	; 20
     93e:	99 e2       	ldi	r25, 0x29	; 41
     940:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN4User4Uart10isr_rx_exeEv>
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
}	//End ISR: USART0_RXC_vect
     944:	ff 91       	pop	r31
     946:	ef 91       	pop	r30
     948:	bf 91       	pop	r27
     94a:	af 91       	pop	r26
     94c:	9f 91       	pop	r25
     94e:	8f 91       	pop	r24
     950:	7f 91       	pop	r23
     952:	6f 91       	pop	r22
     954:	5f 91       	pop	r21
     956:	4f 91       	pop	r20
     958:	3f 91       	pop	r19
     95a:	2f 91       	pop	r18
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_7>:
//! \n	>Last Servo Done: set PER to the time needed to do 20ms
//! \n	>Other Servo: Set OCR of said servo
/***************************************************************************/

ISR( TCA0_OVF_vect )
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	2f 93       	push	r18
     972:	3f 93       	push	r19
     974:	4f 93       	push	r20
     976:	5f 93       	push	r21
     978:	6f 93       	push	r22
     97a:	7f 93       	push	r23
     97c:	8f 93       	push	r24
     97e:	9f 93       	push	r25
     980:	af 93       	push	r26
     982:	bf 93       	push	r27
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------
	
	//Execute the servo driver ISR
	gc_servo.hal_timer_isr();
     988:	81 e3       	ldi	r24, 0x31	; 49
     98a:	98 e2       	ldi	r25, 0x28	; 40
     98c:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN9OrangeBot5Servo13hal_timer_isrEv>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <_Z41__static_initialization_and_destruction_0ii>:
//! @return bool | false = OK | true = FAIL
//! @details
/***************************************************************************/

void function_template( void )
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
     9c2:	8b 01       	movw	r16, r22
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	79 f4       	brne	.+30     	; 0x9e6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
     9c8:	6f 3f       	cpi	r22, 0xFF	; 255
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	61 f4       	brne	.+24     	; 0x9e6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
     9ce:	84 e1       	ldi	r24, 0x14	; 20
     9d0:	99 e2       	ldi	r25, 0x29	; 41
     9d2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN4User4UartC1Ev>
     9d6:	8f e9       	ldi	r24, 0x9F	; 159
     9d8:	98 e2       	ldi	r25, 0x28	; 40
     9da:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN9Orangebot9UniparserC1Ev>
     9de:	81 e3       	ldi	r24, 0x31	; 49
     9e0:	98 e2       	ldi	r25, 0x28	; 40
     9e2:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN9OrangeBot5ServoC1Ev>
     9e6:	cd 2b       	or	r28, r29
     9e8:	79 f4       	brne	.+30     	; 0xa08 <_Z41__static_initialization_and_destruction_0ii+0x50>
     9ea:	0f 3f       	cpi	r16, 0xFF	; 255
     9ec:	1f 4f       	sbci	r17, 0xFF	; 255
     9ee:	61 f4       	brne	.+24     	; 0xa08 <_Z41__static_initialization_and_destruction_0ii+0x50>
     9f0:	81 e3       	ldi	r24, 0x31	; 49
     9f2:	98 e2       	ldi	r25, 0x28	; 40
     9f4:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN9OrangeBot5ServoD1Ev>
     9f8:	8f e9       	ldi	r24, 0x9F	; 159
     9fa:	98 e2       	ldi	r25, 0x28	; 40
     9fc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN9Orangebot9UniparserD1Ev>
     a00:	84 e1       	ldi	r24, 0x14	; 20
     a02:	99 e2       	ldi	r25, 0x29	; 41
     a04:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4User4UartD1Ev>
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <_Z12report_error11_Error_code>:
     a12:	90 91 53 29 	lds	r25, 0x2953	; 0x802953 <ge_error_code>
     a16:	91 11       	cpse	r25, r1
     a18:	80 93 53 29 	sts	0x2953, r24	; 0x802953 <ge_error_code>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	08 95       	ret

00000a20 <main>:
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	ce 56       	subi	r28, 0x6E	; 110
     a2a:	d1 09       	sbc	r29, r1
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0e 94 31 04 	call	0x862	; 0x862 <_Z4initv>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f4 e0       	ldi	r31, 0x04	; 4
     a38:	84 81       	ldd	r24, Z+4	; 0x04
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	84 83       	std	Z+4, r24	; 0x04
     a3e:	2f e7       	ldi	r18, 0x7F	; 127
     a40:	34 e8       	ldi	r19, 0x84	; 132
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	30 40       	sbci	r19, 0x00	; 0
     a48:	80 40       	sbci	r24, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <main+0x24>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <main+0x2e>
     a4e:	00 00       	nop
     a50:	84 81       	ldd	r24, Z+4	; 0x04
     a52:	8f 77       	andi	r24, 0x7F	; 127
     a54:	84 83       	std	Z+4, r24	; 0x04
     a56:	9f e7       	ldi	r25, 0x7F	; 127
     a58:	24 e8       	ldi	r18, 0x84	; 132
     a5a:	3e e1       	ldi	r19, 0x1E	; 30
     a5c:	91 50       	subi	r25, 0x01	; 1
     a5e:	20 40       	sbci	r18, 0x00	; 0
     a60:	30 40       	sbci	r19, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <main+0x3c>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <main+0x46>
     a66:	00 00       	nop
     a68:	0e 94 c0 00 	call	0x180	; 0x180 <_Z8lcd_initv>
     a6c:	6a e9       	ldi	r22, 0x9A	; 154
     a6e:	75 e7       	ldi	r23, 0x75	; 117
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 91 02 	call	0x522	; 0x522 <_Z13lcd_print_strhPKc>
     a76:	6f e9       	ldi	r22, 0x9F	; 159
     a78:	75 e7       	ldi	r23, 0x75	; 117
     a7a:	80 e1       	ldi	r24, 0x10	; 16
     a7c:	0e 94 91 02 	call	0x522	; 0x522 <_Z13lcd_print_strhPKc>
     a80:	ce 01       	movw	r24, r28
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN4User4UartC1Ev>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	fe 01       	movw	r30, r28
     a8c:	31 96       	adiw	r30, 0x01	; 1
     a8e:	a4 e1       	ldi	r26, 0x14	; 20
     a90:	b9 e2       	ldi	r27, 0x29	; 41
     a92:	01 90       	ld	r0, Z+
     a94:	0d 92       	st	X+, r0
     a96:	8a 95       	dec	r24
     a98:	e1 f7       	brne	.-8      	; 0xa92 <main+0x72>
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN4User4UartD1Ev>
     aa2:	8f e9       	ldi	r24, 0x9F	; 159
     aa4:	98 e2       	ldi	r25, 0x28	; 40
     aa6:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_Z20init_parser_commandsRN9Orangebot9UniparserE>
     aaa:	88 23       	and	r24, r24
     aac:	19 f0       	breq	.+6      	; 0xab4 <main+0x94>
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12report_error11_Error_code>
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <_ZN9OrangeBot5ServoC1Ev>
     abc:	8e e6       	ldi	r24, 0x6E	; 110
     abe:	fe 01       	movw	r30, r28
     ac0:	31 96       	adiw	r30, 0x01	; 1
     ac2:	a1 e3       	ldi	r26, 0x31	; 49
     ac4:	b8 e2       	ldi	r27, 0x28	; 40
     ac6:	01 90       	ld	r0, Z+
     ac8:	0d 92       	st	X+, r0
     aca:	8a 95       	dec	r24
     acc:	e1 f7       	brne	.-8      	; 0xac6 <main+0xa6>
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN9OrangeBot5ServoD1Ev>
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	81 e3       	ldi	r24, 0x31	; 49
     ada:	98 e2       	ldi	r25, 0x28	; 40
     adc:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN9OrangeBot5Servo5powerEb>
     ae0:	78 94       	sei
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <srand>
     aea:	00 e0       	ldi	r16, 0x00	; 0
     aec:	10 e0       	ldi	r17, 0x00	; 0
     aee:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     af2:	80 ff       	sbrs	r24, 0
     af4:	24 c0       	rjmp	.+72     	; 0xb3e <main+0x11e>
     af6:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     afa:	8e 7f       	andi	r24, 0xFE	; 254
     afc:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <g_isr_flags>
     b00:	e0 e4       	ldi	r30, 0x40	; 64
     b02:	f4 e0       	ldi	r31, 0x04	; 4
     b04:	24 81       	ldd	r18, Z+4	; 0x04
     b06:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f4408>
     b0a:	98 2f       	mov	r25, r24
     b0c:	90 74       	andi	r25, 0x40	; 64
     b0e:	89 2f       	mov	r24, r25
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	08 2e       	mov	r0, r24
     b14:	89 2f       	mov	r24, r25
     b16:	00 0c       	add	r0, r0
     b18:	88 1f       	adc	r24, r24
     b1a:	99 0b       	sbc	r25, r25
     b1c:	00 0c       	add	r0, r0
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	82 95       	swap	r24
     b28:	92 95       	swap	r25
     b2a:	90 7f       	andi	r25, 0xF0	; 240
     b2c:	98 27       	eor	r25, r24
     b2e:	80 7f       	andi	r24, 0xF0	; 240
     b30:	98 27       	eor	r25, r24
     b32:	92 2f       	mov	r25, r18
     b34:	9f 7d       	andi	r25, 0xDF	; 223
     b36:	89 2b       	or	r24, r25
     b38:	84 83       	std	Z+4, r24	; 0x04
     b3a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z10lcd_updatev>
     b3e:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     b42:	81 ff       	sbrs	r24, 1
     b44:	47 c0       	rjmp	.+142    	; 0xbd4 <main+0x1b4>
     b46:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <g_isr_flags>
     b4a:	8d 7f       	andi	r24, 0xFD	; 253
     b4c:	80 93 54 29 	sts	0x2954, r24	; 0x802954 <g_isr_flags>
     b50:	e0 e4       	ldi	r30, 0x40	; 64
     b52:	f4 e0       	ldi	r31, 0x04	; 4
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	87 83       	std	Z+7, r24	; 0x07
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	87 83       	std	Z+7, r24	; 0x07
     b5c:	0f 5f       	subi	r16, 0xFF	; 255
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
     b60:	98 01       	movw	r18, r16
     b62:	ad ec       	ldi	r26, 0xCD	; 205
     b64:	bc ec       	ldi	r27, 0xCC	; 204
     b66:	0e 94 06 1a 	call	0x340c	; 0x340c <__umulhisi3>
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	bc 01       	movw	r22, r24
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	86 0f       	add	r24, r22
     b8a:	97 1f       	adc	r25, r23
     b8c:	28 1b       	sub	r18, r24
     b8e:	39 0b       	sbc	r19, r25
     b90:	60 e3       	ldi	r22, 0x30	; 48
     b92:	62 0f       	add	r22, r18
     b94:	84 e1       	ldi	r24, 0x14	; 20
     b96:	99 e2       	ldi	r25, 0x29	; 41
     b98:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	84 e1       	ldi	r24, 0x14	; 20
     ba4:	99 e2       	ldi	r25, 0x29	; 41
     ba6:	0e 94 12 0c 	call	0x1824	; 0x1824 <_ZN4User4Uart14get_counter_txERj>
     baa:	81 11       	cpse	r24, r1
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <main+0x198>
     bae:	69 81       	ldd	r22, Y+1	; 0x01
     bb0:	7a 81       	ldd	r23, Y+2	; 0x02
     bb2:	84 e0       	ldi	r24, 0x04	; 4
     bb4:	0e 94 b3 02 	call	0x566	; 0x566 <_Z13lcd_print_u16hj>
     bb8:	be 01       	movw	r22, r28
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	84 e1       	ldi	r24, 0x14	; 20
     bc0:	99 e2       	ldi	r25, 0x29	; 41
     bc2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <_ZN4User4Uart14get_counter_rxERj>
     bc6:	81 11       	cpse	r24, r1
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <main+0x1b4>
     bca:	69 81       	ldd	r22, Y+1	; 0x01
     bcc:	7a 81       	ldd	r23, Y+2	; 0x02
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	0e 94 b3 02 	call	0x566	; 0x566 <_Z13lcd_print_u16hj>
     bd4:	be 01       	movw	r22, r28
     bd6:	6f 5f       	subi	r22, 0xFF	; 255
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	84 e1       	ldi	r24, 0x14	; 20
     bdc:	99 e2       	ldi	r25, 0x29	; 41
     bde:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN4User4Uart7receiveERh>
     be2:	81 11       	cpse	r24, r1
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <main+0x1d0>
     be6:	69 81       	ldd	r22, Y+1	; 0x01
     be8:	8f e9       	ldi	r24, 0x9F	; 159
     bea:	98 e2       	ldi	r25, 0x28	; 40
     bec:	0e 94 90 17 	call	0x2f20	; 0x2f20 <_ZN9Orangebot9Uniparser5parseEh>
     bf0:	84 e1       	ldi	r24, 0x14	; 20
     bf2:	99 e2       	ldi	r25, 0x29	; 41
     bf4:	0e 94 80 0c 	call	0x1900	; 0x1900 <_ZN4User4Uart6updateEv>
     bf8:	7a cf       	rjmp	.-268    	; 0xaee <main+0xce>

00000bfa <_GLOBAL__sub_I_g_isr_flags>:
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return;
}	//End function:
     bfa:	6f ef       	ldi	r22, 0xFF	; 255
     bfc:	7f ef       	ldi	r23, 0xFF	; 255
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z41__static_initialization_and_destruction_0ii>
     c06:	08 95       	ret

00000c08 <_GLOBAL__sub_D_g_isr_flags>:
     c08:	6f ef       	ldi	r22, 0xFF	; 255
     c0a:	7f ef       	ldi	r23, 0xFF	; 255
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_Z41__static_initialization_and_destruction_0ii>
     c14:	08 95       	ret

00000c16 <_Z12ping_handlerv>:
	"bst	%D2, 7	\n\t"
	"bld	%D0, 7	"
	: "=r" (__x)
	: "0" (__x), "r" (__y) );
    return __x;
}
     c16:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <g_uart_timeout_cnt>
     c1a:	80 e2       	ldi	r24, 0x20	; 32
     c1c:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7f4447>
     c20:	68 e5       	ldi	r22, 0x58	; 88
     c22:	84 e1       	ldi	r24, 0x14	; 20
     c24:	99 e2       	ldi	r25, 0x29	; 41
     c26:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     c2a:	08 95       	ret

00000c2c <_Z22send_signature_handlerv>:
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <_Z22send_signature_handlerv+0xc>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <_Z22send_signature_handlerv+0xe>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <g_uart_timeout_cnt>
     c42:	60 e2       	ldi	r22, 0x20	; 32
     c44:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <g_board_sign>
     c48:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <g_board_sign+0x1>
     c4c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN4User9String_uc10str_lengthEPhh>
     c50:	08 2f       	mov	r16, r24
     c52:	81 32       	cpi	r24, 0x21	; 33
     c54:	20 f0       	brcs	.+8      	; 0xc5e <_Z22send_signature_handlerv+0x32>
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12report_error11_Error_code>
     c5c:	35 c0       	rjmp	.+106    	; 0xcc8 <_Z22send_signature_handlerv+0x9c>
     c5e:	be 01       	movw	r22, r28
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	7f 4f       	sbci	r23, 0xFF	; 255
     c64:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN4User9String_uc9to_stringIhEEhT_Ph>
     c68:	f8 2e       	mov	r15, r24
     c6a:	66 e4       	ldi	r22, 0x46	; 70
     c6c:	84 e1       	ldi	r24, 0x14	; 20
     c6e:	99 e2       	ldi	r25, 0x29	; 41
     c70:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     c74:	10 e0       	ldi	r17, 0x00	; 0
     c76:	1f 15       	cp	r17, r15
     c78:	68 f4       	brcc	.+26     	; 0xc94 <_Z22send_signature_handlerv+0x68>
     c7a:	e1 e0       	ldi	r30, 0x01	; 1
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	e1 0f       	add	r30, r17
     c84:	f1 1d       	adc	r31, r1
     c86:	60 81       	ld	r22, Z
     c88:	84 e1       	ldi	r24, 0x14	; 20
     c8a:	99 e2       	ldi	r25, 0x29	; 41
     c8c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     c90:	1f 5f       	subi	r17, 0xFF	; 255
     c92:	f1 cf       	rjmp	.-30     	; 0xc76 <_Z22send_signature_handlerv+0x4a>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	84 e1       	ldi	r24, 0x14	; 20
     c98:	99 e2       	ldi	r25, 0x29	; 41
     c9a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	10 17       	cp	r17, r16
     ca2:	68 f4       	brcc	.+26     	; 0xcbe <_Z22send_signature_handlerv+0x92>
     ca4:	e0 91 04 28 	lds	r30, 0x2804	; 0x802804 <g_board_sign>
     ca8:	f0 91 05 28 	lds	r31, 0x2805	; 0x802805 <g_board_sign+0x1>
     cac:	e1 0f       	add	r30, r17
     cae:	f1 1d       	adc	r31, r1
     cb0:	60 81       	ld	r22, Z
     cb2:	84 e1       	ldi	r24, 0x14	; 20
     cb4:	99 e2       	ldi	r25, 0x29	; 41
     cb6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     cba:	1f 5f       	subi	r17, 0xFF	; 255
     cbc:	f1 cf       	rjmp	.-30     	; 0xca0 <_Z22send_signature_handlerv+0x74>
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	84 e1       	ldi	r24, 0x14	; 20
     cc2:	99 e2       	ldi	r25, 0x29	; 41
     cc4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN4User4Uart4sendEh>
     cc8:	24 96       	adiw	r28, 0x04	; 4
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	08 95       	ret

00000cda <_Z13set_servo_ppmhii>:
     cda:	9a 01       	movw	r18, r20
     cdc:	10 92 55 29 	sts	0x2955, r1	; 0x802955 <g_uart_timeout_cnt>
     ce0:	ab 01       	movw	r20, r22
     ce2:	68 2f       	mov	r22, r24
     ce4:	81 e3       	ldi	r24, 0x31	; 49
     ce6:	98 e2       	ldi	r25, 0x28	; 40
     ce8:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN9OrangeBot5Servo9set_servoEhij>
     cec:	88 23       	and	r24, r24
     cee:	19 f0       	breq	.+6      	; 0xcf6 <_Z13set_servo_ppmhii+0x1c>
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12report_error11_Error_code>
     cf6:	08 95       	ret

00000cf8 <_Z20init_parser_commandsRN9Orangebot9UniparserE>:
//! @brief
//! @details
/***************************************************************************/

bool init_parser_commands( Orangebot::Uniparser &parser_tmp )
{
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	8c 01       	movw	r16, r24
	//	BODY
	//----------------------------------------------------------------

	//! Register commands and handler for the universal parser class. A masterpiece :')
	//Register ping command. It's used to reset the communication timeout
	f_ret = parser_tmp.add_cmd( "P", (void *)&ping_handler );
     d00:	4b e0       	ldi	r20, 0x0B	; 11
     d02:	56 e0       	ldi	r21, 0x06	; 6
     d04:	64 ea       	ldi	r22, 0xA4	; 164
     d06:	75 e7       	ldi	r23, 0x75	; 117
     d08:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>
     d0c:	c8 2f       	mov	r28, r24
	//Register the Find command. Board answers with board signature
	f_ret |= parser_tmp.add_cmd( "F", (void *)&send_signature_handler );
     d0e:	46 e1       	ldi	r20, 0x16	; 22
     d10:	56 e0       	ldi	r21, 0x06	; 6
     d12:	66 ea       	ldi	r22, 0xA6	; 166
     d14:	75 e7       	ldi	r23, 0x75	; 117
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>
     d1c:	c8 2b       	or	r28, r24
	//Platform set PPM command
	f_ret |= parser_tmp.add_cmd( "PPM%u:%S", (void *)&set_servo_ppm );
     d1e:	4d e6       	ldi	r20, 0x6D	; 109
     d20:	56 e0       	ldi	r21, 0x06	; 6
     d22:	68 ea       	ldi	r22, 0xA8	; 168
     d24:	75 e7       	ldi	r23, 0x75	; 117
     d26:	c8 01       	movw	r24, r16
     d28:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return f_ret;
}	//End function: init_parser_commands | Orangebot::Uniparser &
     d2c:	8c 2b       	or	r24, r28
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <_ZN9OrangeBot5ServoD1Ev>:
    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return true;    //FAIL
}   //end private method: error_recovery | void |
     d36:	08 95       	ret

00000d38 <_ZN9OrangeBot5Servo11hal_init_ioEv>:
     d38:	e0 e6       	ldi	r30, 0x60	; 96
     d3a:	f4 e0       	ldi	r31, 0x04	; 4
     d3c:	80 81       	ld	r24, Z
     d3e:	80 68       	ori	r24, 0x80	; 128
     d40:	80 83       	st	Z, r24
     d42:	e0 e8       	ldi	r30, 0x80	; 128
     d44:	f4 e0       	ldi	r31, 0x04	; 4
     d46:	80 81       	ld	r24, Z
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	80 83       	st	Z, r24
     d4c:	80 81       	ld	r24, Z
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	80 83       	st	Z, r24
     d52:	80 81       	ld	r24, Z
     d54:	84 60       	ori	r24, 0x04	; 4
     d56:	80 83       	st	Z, r24
     d58:	80 81       	ld	r24, Z
     d5a:	88 60       	ori	r24, 0x08	; 8
     d5c:	80 83       	st	Z, r24
     d5e:	e0 ea       	ldi	r30, 0xA0	; 160
     d60:	f4 e0       	ldi	r31, 0x04	; 4
     d62:	80 81       	ld	r24, Z
     d64:	81 60       	ori	r24, 0x01	; 1
     d66:	80 83       	st	Z, r24
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	80 83       	st	Z, r24
     d6e:	80 81       	ld	r24, Z
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	80 83       	st	Z, r24
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	80 83       	st	Z, r24
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	08 95       	ret

00000d7e <_ZN9OrangeBot5Servo25hal_init_ta0_timeout_modeEj>:
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	fa e0       	ldi	r31, 0x0A	; 10
     d88:	80 81       	ld	r24, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	12 81       	ldd	r17, Z+2	; 0x02
     d8e:	d3 81       	ldd	r29, Z+3	; 0x03
     d90:	c5 81       	ldd	r28, Z+5	; 0x05
     d92:	26 85       	ldd	r18, Z+14	; 0x0e
     d94:	a0 ee       	ldi	r26, 0xE0	; 224
     d96:	b5 e0       	ldi	r27, 0x05	; 5
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	5c 91       	ld	r21, X
     d9c:	14 97       	sbiw	r26, 0x04	; 4
     d9e:	41 85       	ldd	r20, Z+9	; 0x09
     da0:	92 85       	ldd	r25, Z+10	; 0x0a
     da2:	81 7f       	andi	r24, 0xF1	; 241
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	38 7f       	andi	r19, 0xF8	; 248
     da8:	91 60       	ori	r25, 0x01	; 1
     daa:	21 60       	ori	r18, 0x01	; 1
     dac:	31 83       	std	Z+1, r19	; 0x01
     dae:	12 83       	std	Z+2, r17	; 0x02
     db0:	d3 83       	std	Z+3, r29	; 0x03
     db2:	c5 83       	std	Z+5, r28	; 0x05
     db4:	26 87       	std	Z+14, r18	; 0x0e
     db6:	14 96       	adiw	r26, 0x04	; 4
     db8:	5c 93       	st	X, r21
     dba:	66 a3       	std	Z+38, r22	; 0x26
     dbc:	77 a3       	std	Z+39, r23	; 0x27
     dbe:	10 a6       	std	Z+40, r1	; 0x28
     dc0:	11 a6       	std	Z+41, r1	; 0x29
     dc2:	12 a6       	std	Z+42, r1	; 0x2a
     dc4:	13 a6       	std	Z+43, r1	; 0x2b
     dc6:	14 a6       	std	Z+44, r1	; 0x2c
     dc8:	15 a6       	std	Z+45, r1	; 0x2d
     dca:	80 83       	st	Z, r24
     dcc:	41 87       	std	Z+9, r20	; 0x09
     dce:	92 87       	std	Z+10, r25	; 0x0a
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	08 95       	ret

00000dda <_ZN9OrangeBot5Servo12hal_delay_usEv>:
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	8a 95       	dec	r24
     dde:	f1 f7       	brne	.-4      	; 0xddc <_ZN9OrangeBot5Servo12hal_delay_usEv+0x2>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <_ZN9OrangeBot5Servo12hal_delay_usEv+0x8>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	08 95       	ret

00000de6 <_ZN9OrangeBot5Servo9hal_powerEb>:
     de6:	61 11       	cpse	r22, r1
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <_ZN9OrangeBot5Servo9hal_powerEb+0x10>
     dea:	e0 e6       	ldi	r30, 0x60	; 96
     dec:	f4 e0       	ldi	r31, 0x04	; 4
     dee:	84 81       	ldd	r24, Z+4	; 0x04
     df0:	80 68       	ori	r24, 0x80	; 128
     df2:	84 83       	std	Z+4, r24	; 0x04
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <_ZN9OrangeBot5Servo9hal_powerEb+0x1a>
     df6:	e0 e6       	ldi	r30, 0x60	; 96
     df8:	f4 e0       	ldi	r31, 0x04	; 4
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	8f 77       	andi	r24, 0x7F	; 127
     dfe:	84 83       	std	Z+4, r24	; 0x04
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret

00000e04 <_ZN9OrangeBot5Servo11hal_run_isrEb>:
     e04:	61 11       	cpse	r22, r1
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <_ZN9OrangeBot5Servo11hal_run_isrEb+0x10>
     e08:	e0 e0       	ldi	r30, 0x00	; 0
     e0a:	fa e0       	ldi	r31, 0x0A	; 10
     e0c:	80 81       	ld	r24, Z
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	80 83       	st	Z, r24
     e12:	09 c0       	rjmp	.+18     	; 0xe26 <_ZN9OrangeBot5Servo11hal_run_isrEb+0x22>
     e14:	e0 e0       	ldi	r30, 0x00	; 0
     e16:	fa e0       	ldi	r31, 0x0A	; 10
     e18:	87 ea       	ldi	r24, 0xA7	; 167
     e1a:	91 e6       	ldi	r25, 0x61	; 97
     e1c:	86 a3       	std	Z+38, r24	; 0x26
     e1e:	97 a3       	std	Z+39, r25	; 0x27
     e20:	80 81       	ld	r24, Z
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	80 83       	st	Z, r24
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret

00000e2a <_ZN9OrangeBot5Servo15init_class_varsEv>:
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	2d 97       	sbiw	r28, 0x0d	; 13
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	fc 01       	movw	r30, r24
     e3a:	10 82       	st	Z, r1
     e3c:	e7 59       	subi	r30, 0x97	; 151
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	10 82       	st	Z, r1
     e42:	11 82       	std	Z+1, r1	; 0x01
     e44:	19 82       	std	Y+1, r1	; 0x01
     e46:	1a 82       	std	Y+2, r1	; 0x02
     e48:	1b 82       	std	Y+3, r1	; 0x03
     e4a:	1c 82       	std	Y+4, r1	; 0x04
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	2d 83       	std	Y+5, r18	; 0x05
     e50:	2e 83       	std	Y+6, r18	; 0x06
     e52:	18 86       	std	Y+8, r1	; 0x08
     e54:	1f 82       	std	Y+7, r1	; 0x07
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	28 30       	cpi	r18, 0x08	; 8
     e5a:	a0 f4       	brcc	.+40     	; 0xe84 <_ZN9OrangeBot5Servo15init_class_varsEv+0x5a>
     e5c:	a2 2f       	mov	r26, r18
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	aa 0f       	add	r26, r26
     e62:	bb 1f       	adc	r27, r27
     e64:	aa 0f       	add	r26, r26
     e66:	bb 1f       	adc	r27, r27
     e68:	aa 0f       	add	r26, r26
     e6a:	bb 1f       	adc	r27, r27
     e6c:	a8 0f       	add	r26, r24
     e6e:	b9 1f       	adc	r27, r25
     e70:	11 96       	adiw	r26, 0x01	; 1
     e72:	38 e0       	ldi	r19, 0x08	; 8
     e74:	fe 01       	movw	r30, r28
     e76:	31 96       	adiw	r30, 0x01	; 1
     e78:	01 90       	ld	r0, Z+
     e7a:	0d 92       	st	X+, r0
     e7c:	3a 95       	dec	r19
     e7e:	e1 f7       	brne	.-8      	; 0xe78 <_ZN9OrangeBot5Servo15init_class_varsEv+0x4e>
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	ea cf       	rjmp	.-44     	; 0xe58 <_ZN9OrangeBot5Servo15init_class_varsEv+0x2e>
     e84:	19 86       	std	Y+9, r1	; 0x09
     e86:	1a 86       	std	Y+10, r1	; 0x0a
     e88:	1b 86       	std	Y+11, r1	; 0x0b
     e8a:	2c ed       	ldi	r18, 0xDC	; 220
     e8c:	35 e0       	ldi	r19, 0x05	; 5
     e8e:	2c 87       	std	Y+12, r18	; 0x0c
     e90:	3d 87       	std	Y+13, r19	; 0x0d
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	48 30       	cpi	r20, 0x08	; 8
     e96:	b0 f4       	brcc	.+44     	; 0xec4 <_ZN9OrangeBot5Servo15init_class_varsEv+0x9a>
     e98:	24 2f       	mov	r18, r20
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	d9 01       	movw	r26, r18
     e9e:	aa 0f       	add	r26, r26
     ea0:	bb 1f       	adc	r27, r27
     ea2:	aa 0f       	add	r26, r26
     ea4:	bb 1f       	adc	r27, r27
     ea6:	a2 0f       	add	r26, r18
     ea8:	b3 1f       	adc	r27, r19
     eaa:	a8 0f       	add	r26, r24
     eac:	b9 1f       	adc	r27, r25
     eae:	af 5b       	subi	r26, 0xBF	; 191
     eb0:	bf 4f       	sbci	r27, 0xFF	; 255
     eb2:	25 e0       	ldi	r18, 0x05	; 5
     eb4:	fe 01       	movw	r30, r28
     eb6:	39 96       	adiw	r30, 0x09	; 9
     eb8:	01 90       	ld	r0, Z+
     eba:	0d 92       	st	X+, r0
     ebc:	2a 95       	dec	r18
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <_ZN9OrangeBot5Servo15init_class_varsEv+0x8e>
     ec0:	4f 5f       	subi	r20, 0xFF	; 255
     ec2:	e8 cf       	rjmp	.-48     	; 0xe94 <_ZN9OrangeBot5Servo15init_class_varsEv+0x6a>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	2d 96       	adiw	r28, 0x0d	; 13
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>:
     ed2:	fc 01       	movw	r30, r24
     ed4:	e5 59       	subi	r30, 0x95	; 149
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	20 81       	ld	r18, Z
     eda:	21 11       	cpse	r18, r1
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj+0x14>
     ede:	60 83       	st	Z, r22
     ee0:	31 96       	adiw	r30, 0x01	; 1
     ee2:	40 83       	st	Z, r20
     ee4:	51 83       	std	Z+1, r21	; 0x01
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	08 95       	ret

00000eea <_ZN9OrangeBot5Servo9set_servoEhij>:
     eea:	68 30       	cpi	r22, 0x08	; 8
     eec:	38 f0       	brcs	.+14     	; 0xefc <_ZN9OrangeBot5Servo9set_servoEhij+0x12>
     eee:	44 ed       	ldi	r20, 0xD4	; 212
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	67 e0       	ldi	r22, 0x07	; 7
     ef4:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	08 95       	ret
     efc:	fa 01       	movw	r30, r20
     efe:	e0 57       	subi	r30, 0x70	; 112
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	e1 32       	cpi	r30, 0x21	; 33
     f04:	f3 40       	sbci	r31, 0x03	; 3
     f06:	38 f0       	brcs	.+14     	; 0xf16 <_ZN9OrangeBot5Servo9set_servoEhij+0x2c>
     f08:	4a ed       	ldi	r20, 0xDA	; 218
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	08 95       	ret
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	fb 01       	movw	r30, r22
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	e8 0f       	add	r30, r24
     f28:	f9 1f       	adc	r31, r25
     f2a:	01 80       	ldd	r0, Z+1	; 0x01
     f2c:	f2 81       	ldd	r31, Z+2	; 0x02
     f2e:	e0 2d       	mov	r30, r0
     f30:	4e 17       	cp	r20, r30
     f32:	5f 07       	cpc	r21, r31
     f34:	69 f0       	breq	.+26     	; 0xf50 <_ZN9OrangeBot5Servo9set_servoEhij+0x66>
     f36:	fb 01       	movw	r30, r22
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	e8 0f       	add	r30, r24
     f46:	f9 1f       	adc	r31, r25
     f48:	41 83       	std	Z+1, r20	; 0x01
     f4a:	52 83       	std	Z+2, r21	; 0x02
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	45 83       	std	Z+5, r20	; 0x05
     f50:	fb 01       	movw	r30, r22
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	e8 0f       	add	r30, r24
     f60:	f9 1f       	adc	r31, r25
     f62:	43 81       	ldd	r20, Z+3	; 0x03
     f64:	54 81       	ldd	r21, Z+4	; 0x04
     f66:	42 17       	cp	r20, r18
     f68:	53 07       	cpc	r21, r19
     f6a:	79 f0       	breq	.+30     	; 0xf8a <_ZN9OrangeBot5Servo9set_servoEhij+0xa0>
     f6c:	66 0f       	add	r22, r22
     f6e:	77 1f       	adc	r23, r23
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	66 0f       	add	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	fc 01       	movw	r30, r24
     f7a:	e6 0f       	add	r30, r22
     f7c:	f7 1f       	adc	r31, r23
     f7e:	23 83       	std	Z+3, r18	; 0x03
     f80:	34 83       	std	Z+4, r19	; 0x04
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	86 83       	std	Z+6, r24	; 0x06
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	08 95       	ret

00000f8e <_ZN9OrangeBot5Servo4initEv>:
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	8c 01       	movw	r16, r24
     f96:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN9OrangeBot5Servo15init_class_varsEv>
     f9a:	c8 2f       	mov	r28, r24
     f9c:	88 23       	and	r24, r24
     f9e:	31 f0       	breq	.+12     	; 0xfac <_ZN9OrangeBot5Servo4initEv+0x1e>
     fa0:	49 e1       	ldi	r20, 0x19	; 25
     fa2:	51 e0       	ldi	r21, 0x01	; 1
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	c8 01       	movw	r24, r16
     fa8:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     fac:	c8 01       	movw	r24, r16
     fae:	0e 94 9c 06 	call	0xd38	; 0xd38 <_ZN9OrangeBot5Servo11hal_init_ioEv>
     fb2:	c8 2b       	or	r28, r24
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <_ZN9OrangeBot5Servo4initEv+0x34>
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e0       	ldi	r21, 0x01	; 1
     fba:	62 e0       	ldi	r22, 0x02	; 2
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	c8 01       	movw	r24, r16
     fc8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN9OrangeBot5Servo25hal_init_ta0_timeout_modeEj>
     fcc:	c8 2b       	or	r28, r24
     fce:	31 f0       	breq	.+12     	; 0xfdc <_ZN9OrangeBot5Servo4initEv+0x4e>
     fd0:	47 e2       	ldi	r20, 0x27	; 39
     fd2:	51 e0       	ldi	r21, 0x01	; 1
     fd4:	63 e0       	ldi	r22, 0x03	; 3
     fd6:	c8 01       	movw	r24, r16
     fd8:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     fdc:	8c 2f       	mov	r24, r28
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <_ZN9OrangeBot5ServoC1Ev>:
     fe6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN9OrangeBot5Servo4initEv>
     fea:	08 95       	ret

00000fec <_ZN9OrangeBot5Servo12hal_servo_ioEhb>:
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	06 2f       	mov	r16, r22
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	08 30       	cpi	r16, 0x08	; 8
     ff6:	11 05       	cpc	r17, r1
     ff8:	08 f0       	brcs	.+2      	; 0xffc <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0x10>
     ffa:	63 c0       	rjmp	.+198    	; 0x10c2 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xd6>
     ffc:	f8 01       	movw	r30, r16
     ffe:	e0 5b       	subi	r30, 0xB0	; 176
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__tablejump2__>
    1006:	e0 e8       	ldi	r30, 0x80	; 128
    1008:	f4 e0       	ldi	r31, 0x04	; 4
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	48 2b       	or	r20, r24
    1010:	44 83       	std	Z+4, r20	; 0x04
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	5c c0       	rjmp	.+184    	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1016:	e0 e8       	ldi	r30, 0x80	; 128
    1018:	f4 e0       	ldi	r31, 0x04	; 4
    101a:	84 81       	ldd	r24, Z+4	; 0x04
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	44 0f       	add	r20, r20
    1020:	55 1f       	adc	r21, r21
    1022:	8d 7f       	andi	r24, 0xFD	; 253
    1024:	48 2b       	or	r20, r24
    1026:	44 83       	std	Z+4, r20	; 0x04
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	51 c0       	rjmp	.+162    	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    102c:	e0 e8       	ldi	r30, 0x80	; 128
    102e:	f4 e0       	ldi	r31, 0x04	; 4
    1030:	84 81       	ldd	r24, Z+4	; 0x04
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	44 0f       	add	r20, r20
    1036:	55 1f       	adc	r21, r21
    1038:	44 0f       	add	r20, r20
    103a:	55 1f       	adc	r21, r21
    103c:	8b 7f       	andi	r24, 0xFB	; 251
    103e:	48 2b       	or	r20, r24
    1040:	44 83       	std	Z+4, r20	; 0x04
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	44 c0       	rjmp	.+136    	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1046:	e0 e8       	ldi	r30, 0x80	; 128
    1048:	f4 e0       	ldi	r31, 0x04	; 4
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	44 0f       	add	r20, r20
    1054:	55 1f       	adc	r21, r21
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	87 7f       	andi	r24, 0xF7	; 247
    105c:	48 2b       	or	r20, r24
    105e:	44 83       	std	Z+4, r20	; 0x04
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	35 c0       	rjmp	.+106    	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1064:	e0 ea       	ldi	r30, 0xA0	; 160
    1066:	f4 e0       	ldi	r31, 0x04	; 4
    1068:	84 81       	ldd	r24, Z+4	; 0x04
    106a:	8e 7f       	andi	r24, 0xFE	; 254
    106c:	48 2b       	or	r20, r24
    106e:	44 83       	std	Z+4, r20	; 0x04
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	2d c0       	rjmp	.+90     	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1074:	e0 ea       	ldi	r30, 0xA0	; 160
    1076:	f4 e0       	ldi	r31, 0x04	; 4
    1078:	84 81       	ldd	r24, Z+4	; 0x04
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	44 0f       	add	r20, r20
    107e:	55 1f       	adc	r21, r21
    1080:	8d 7f       	andi	r24, 0xFD	; 253
    1082:	48 2b       	or	r20, r24
    1084:	44 83       	std	Z+4, r20	; 0x04
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	22 c0       	rjmp	.+68     	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    108a:	e0 ea       	ldi	r30, 0xA0	; 160
    108c:	f4 e0       	ldi	r31, 0x04	; 4
    108e:	84 81       	ldd	r24, Z+4	; 0x04
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	44 0f       	add	r20, r20
    1094:	55 1f       	adc	r21, r21
    1096:	44 0f       	add	r20, r20
    1098:	55 1f       	adc	r21, r21
    109a:	8b 7f       	andi	r24, 0xFB	; 251
    109c:	48 2b       	or	r20, r24
    109e:	44 83       	std	Z+4, r20	; 0x04
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	15 c0       	rjmp	.+42     	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    10a4:	e0 ea       	ldi	r30, 0xA0	; 160
    10a6:	f4 e0       	ldi	r31, 0x04	; 4
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	44 0f       	add	r20, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	44 0f       	add	r20, r20
    10b2:	55 1f       	adc	r21, r21
    10b4:	44 0f       	add	r20, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	87 7f       	andi	r24, 0xF7	; 247
    10ba:	48 2b       	or	r20, r24
    10bc:	44 83       	std	Z+4, r20	; 0x04
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	06 c0       	rjmp	.+12     	; 0x10ce <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    10c2:	44 e9       	ldi	r20, 0x94	; 148
    10c4:	51 e0       	ldi	r21, 0x01	; 1
    10c6:	64 e0       	ldi	r22, 0x04	; 4
    10c8:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj>:
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	ec 01       	movw	r28, r24
    10da:	9b 01       	movw	r18, r22
    10dc:	a8 ee       	ldi	r26, 0xE8	; 232
    10de:	b3 e0       	ldi	r27, 0x03	; 3
    10e0:	0e 94 06 1a 	call	0x340c	; 0x340c <__umulhisi3>
    10e4:	20 e2       	ldi	r18, 0x20	; 32
    10e6:	33 e0       	ldi	r19, 0x03	; 3
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    10f0:	2e 3f       	cpi	r18, 0xFE	; 254
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	38 07       	cpc	r19, r24
    10f6:	41 05       	cpc	r20, r1
    10f8:	51 05       	cpc	r21, r1
    10fa:	48 f0       	brcs	.+18     	; 0x110e <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj+0x3a>
    10fc:	ce 01       	movw	r24, r28
    10fe:	4c e6       	ldi	r20, 0x6C	; 108
    1100:	53 e0       	ldi	r21, 0x03	; 3
    1102:	66 e0       	ldi	r22, 0x06	; 6
    1104:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj+0x3c>
    110e:	c9 01       	movw	r24, r18
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj>:
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8c 54       	subi	r24, 0x4C	; 76
    1124:	94 40       	sbci	r25, 0x04	; 4
    1126:	85 3d       	cpi	r24, 0xD5	; 213
    1128:	99 44       	sbci	r25, 0x49	; 73
    112a:	40 f0       	brcs	.+16     	; 0x113c <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x26>
    112c:	40 e9       	ldi	r20, 0x90	; 144
    112e:	53 e0       	ldi	r21, 0x03	; 3
    1130:	67 e0       	ldi	r22, 0x07	; 7
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	2c c0       	rjmp	.+88     	; 0x1194 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    113c:	e0 e0       	ldi	r30, 0x00	; 0
    113e:	fa e0       	ldi	r31, 0x0A	; 10
    1140:	80 81       	ld	r24, Z
    1142:	8e 7f       	andi	r24, 0xFE	; 254
    1144:	80 83       	st	Z, r24
    1146:	00 a1       	ldd	r16, Z+32	; 0x20
    1148:	11 a1       	ldd	r17, Z+33	; 0x21
    114a:	ce 01       	movw	r24, r28
    114c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj>
    1150:	9c 01       	movw	r18, r24
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	31 09       	sbc	r19, r1
    1156:	2e 3f       	cpi	r18, 0xFE	; 254
    1158:	4f ef       	ldi	r20, 0xFF	; 255
    115a:	34 07       	cpc	r19, r20
    115c:	40 f0       	brcs	.+16     	; 0x116e <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x58>
    115e:	41 ea       	ldi	r20, 0xA1	; 161
    1160:	53 e0       	ldi	r21, 0x03	; 3
    1162:	66 e0       	ldi	r22, 0x06	; 6
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    116e:	08 17       	cp	r16, r24
    1170:	19 07       	cpc	r17, r25
    1172:	40 f0       	brcs	.+16     	; 0x1184 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x6e>
    1174:	48 ea       	ldi	r20, 0xA8	; 168
    1176:	53 e0       	ldi	r21, 0x03	; 3
    1178:	65 e0       	ldi	r22, 0x05	; 5
    117a:	ce 01       	movw	r24, r28
    117c:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    1184:	e0 e0       	ldi	r30, 0x00	; 0
    1186:	fa e0       	ldi	r31, 0x0A	; 10
    1188:	26 a3       	std	Z+38, r18	; 0x26
    118a:	37 a3       	std	Z+39, r19	; 0x27
    118c:	80 81       	ld	r24, Z
    118e:	81 60       	ori	r24, 0x01	; 1
    1190:	80 83       	st	Z, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <_ZN9OrangeBot5Servo10soft_startEhhhh>:
//!	\n	Blocking hardwired version of the soft start method using delay and direct control of IOs
//!	\n	@TODO: I can use TCA0 to emit pulses to EVOUTD in PWM mode for the soft start
/***************************************************************************/

bool Servo::soft_start( uint8_t iu8_ton, uint8_t iu8_toff, uint8_t iu8_treduce, uint8_t iu8_repeat )
{
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	7c 01       	movw	r14, r24
    11b2:	16 2f       	mov	r17, r22
    11b4:	d4 2f       	mov	r29, r20
    11b6:	c2 2e       	mov	r12, r18
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	bool u1_continue = true;
    11b8:	bb 24       	eor	r11, r11
    11ba:	b3 94       	inc	r11
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While not done
	while (u1_continue == true)
    11bc:	bb 20       	and	r11, r11
    11be:	49 f1       	breq	.+82     	; 0x1212 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x74>
	{
		//if: there is room to reduce Toff
		if (iu8_toff > iu8_treduce)
    11c0:	cd 16       	cp	r12, r29
    11c2:	08 f5       	brcc	.+66     	; 0x1206 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x68>
    11c4:	d1 2c       	mov	r13, r1
		{
			//For each repeat
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
    11c6:	d0 16       	cp	r13, r16
    11c8:	d8 f4       	brcc	.+54     	; 0x1200 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x62>
			{
				//Power on
				CLEAR_BIT( PORTD.OUT, SERVO_PWR_PIN );
    11ca:	e0 e6       	ldi	r30, 0x60	; 96
    11cc:	f4 e0       	ldi	r31, 0x04	; 4
    11ce:	84 81       	ldd	r24, Z+4	; 0x04
    11d0:	8f 77       	andi	r24, 0x7F	; 127
    11d2:	84 83       	std	Z+4, r24	; 0x04
				
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_ton; u8_tmp_b++)
    11d4:	c0 e0       	ldi	r28, 0x00	; 0
    11d6:	c1 17       	cp	r28, r17
    11d8:	28 f4       	brcc	.+10     	; 0x11e4 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x46>
				{
					this->hal_delay_us();
    11da:	c7 01       	movw	r24, r14
    11dc:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN9OrangeBot5Servo12hal_delay_usEv>
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
			{
				//Power on
				CLEAR_BIT( PORTD.OUT, SERVO_PWR_PIN );
				
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_ton; u8_tmp_b++)
    11e0:	cf 5f       	subi	r28, 0xFF	; 255
    11e2:	f9 cf       	rjmp	.-14     	; 0x11d6 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x38>
				{
					this->hal_delay_us();
				}
				
				//Power Off
				this -> hal_power( false );
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	c7 01       	movw	r24, r14
    11e8:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN9OrangeBot5Servo9hal_powerEb>
				
				//Wait
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_toff; u8_tmp_b++)
    11ec:	c0 e0       	ldi	r28, 0x00	; 0
    11ee:	cd 17       	cp	r28, r29
    11f0:	28 f4       	brcc	.+10     	; 0x11fc <_ZN9OrangeBot5Servo10soft_startEhhhh+0x5e>
				{
					this->hal_delay_us();
    11f2:	c7 01       	movw	r24, r14
    11f4:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN9OrangeBot5Servo12hal_delay_usEv>
				
				//Power Off
				this -> hal_power( false );
				
				//Wait
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_toff; u8_tmp_b++)
    11f8:	cf 5f       	subi	r28, 0xFF	; 255
    11fa:	f9 cf       	rjmp	.-14     	; 0x11ee <_ZN9OrangeBot5Servo10soft_startEhhhh+0x50>
	{
		//if: there is room to reduce Toff
		if (iu8_toff > iu8_treduce)
		{
			//For each repeat
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
    11fc:	d3 94       	inc	r13
    11fe:	e3 cf       	rjmp	.-58     	; 0x11c6 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x28>
					this->hal_delay_us();
				}
			}
			
			//Increase Ton
			iu8_ton = iu8_ton+iu8_treduce;
    1200:	1c 0d       	add	r17, r12
			//Reduce Toff
			iu8_toff = iu8_toff-iu8_treduce;
    1202:	dc 19       	sub	r29, r12
    1204:	db cf       	rjmp	.-74     	; 0x11bc <_ZN9OrangeBot5Servo10soft_startEhhhh+0x1e>
		}
		//if: Reached Toff = 0
		else
		{
			//Power on
			this -> hal_power( true );
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	c7 01       	movw	r24, r14
    120a:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN9OrangeBot5Servo9hal_powerEb>
			//Break cycle
			u1_continue = false;
    120e:	b1 2c       	mov	r11, r1
    1210:	d5 cf       	rjmp	.-86     	; 0x11bc <_ZN9OrangeBot5Servo10soft_startEhhhh+0x1e>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return false;	//OK
}	//End private method: soft_start | uint8_t | uint8_t | uint8_t | uint8_t
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	08 95       	ret

00001228 <_ZN9OrangeBot5Servo5powerEb>:
//! \n	power the servomotors
//! \n	starts the ISR driver to scan the servos
/***************************************************************************/

bool Servo::power( bool iu1_powered )
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	ec 01       	movw	r28, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//SERVO OFF
	if (iu1_powered == false)
    1232:	61 11       	cpse	r22, r1
    1234:	08 c0       	rjmp	.+16     	; 0x1246 <_ZN9OrangeBot5Servo5powerEb+0x1e>
	{
		//Turn off SERVO bank
		u1_ret = this -> hal_power( false );
    1236:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN9OrangeBot5Servo9hal_powerEb>
    123a:	18 2f       	mov	r17, r24
		//Stop the ISR
		this ->hal_run_isr( false );
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo11hal_run_isrEb>
    1244:	0b c0       	rjmp	.+22     	; 0x125c <_ZN9OrangeBot5Servo5powerEb+0x34>
	}
	//SERVO ON
	else
	{
		//Use a blocking soft start delay based routine
		u1_ret = this -> soft_start( Config::SOFT_START_TON, Config::SOFT_START_TOFF, Config::SOFT_START_TREDUCE, Config::SOFT_START_REPEAT );
    1246:	02 e0       	ldi	r16, 0x02	; 2
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	44 e6       	ldi	r20, 0x64	; 100
    124c:	6a e0       	ldi	r22, 0x0A	; 10
    124e:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN9OrangeBot5Servo10soft_startEhhhh>
    1252:	18 2f       	mov	r17, r24
		//Start the ISR
		this -> hal_run_isr( true );
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	ce 01       	movw	r24, r28
    1258:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo11hal_run_isrEb>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Success: %d", u1_ret); //Trace Return
	return u1_ret;	//Propagate Error
}   //end public method: power | void
    125c:	81 2f       	mov	r24, r17
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <_ZN9OrangeBot5Servo14clear_servo_ioEv>:
//! @details
//! \n Clear all servo IO lines
/***************************************************************************/

bool Servo::clear_servo_io( void )
{
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	8c 01       	movw	r16, r24
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    1272:	c0 e0       	ldi	r28, 0x00	; 0
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
    1274:	d0 e0       	ldi	r29, 0x00	; 0
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    1276:	c8 30       	cpi	r28, 0x08	; 8
    1278:	40 f4       	brcc	.+16     	; 0x128a <_ZN9OrangeBot5Servo14clear_servo_ioEv+0x22>
	{
		//Try and clear that servo IO and accumulate error
		u1_ret |= this -> hal_servo_io( u8_cnt, false );
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	6c 2f       	mov	r22, r28
    127e:	c8 01       	movw	r24, r16
    1280:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1284:	d8 2b       	or	r29, r24
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    1286:	cf 5f       	subi	r28, 0xFF	; 255
    1288:	f6 cf       	rjmp	.-20     	; 0x1276 <_ZN9OrangeBot5Servo14clear_servo_ioEv+0xe>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("fail? %d\n", u1_ret); //Trace Return
	return u1_ret;	//Propagate error
}   //end private method: clear_servo_io | void
    128a:	8d 2f       	mov	r24, r29
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <_ZN9OrangeBot5Servo14emergency_stopEv>:
//! @details
//! \n Stop driver. Clear IO lines. Reinitialize class vars.
/***************************************************************************/

bool Servo::emergency_stop( void )
{
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	8c 01       	movw	r16, r24
	///--------------------------------------------------------------------------

	//Initialize error to OK
	bool u1_ret = false;
	//Stop timer
	u1_ret |= this -> hal_run_isr( false );
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo11hal_run_isrEb>
    12a4:	c8 2f       	mov	r28, r24
	//Clear servo IOs
	u1_ret |= this -> clear_servo_io();
    12a6:	c8 01       	movw	r24, r16
    12a8:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN9OrangeBot5Servo14clear_servo_ioEv>
    12ac:	c8 2b       	or	r28, r24
	//Reinitialize class vars (except error)
	u1_ret |= this -> init_class_vars();
    12ae:	c8 01       	movw	r24, r16
    12b0:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN9OrangeBot5Servo15init_class_varsEv>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Fail? %d\n", u1_ret); //Trace Return
	return u1_ret;	//Propagate error
}   //end private method: emergency_stop | void
    12b4:	8c 2b       	or	r24, r28
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <_ZN9OrangeBot5Servo19compute_servo_delayEhRj>:
//! @details
//! \n The driver uses command position and speed, and actual delay, to compute next delay
/***************************************************************************/

bool Servo::compute_servo_delay( uint8_t iu8_index, uint16_t &ou16_delay )
{
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	8a 01       	movw	r16, r20
	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//If Servo index is OOB
	if ((Config::PEDANTIC_CHECKS == true) && ((iu8_index < 0) || (iu8_index >= Config::NUM_SERVOS)))
    12cc:	68 30       	cpi	r22, 0x08	; 8
    12ce:	68 f0       	brcs	.+26     	; 0x12ea <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2c>
	{
		this -> report_error( Error_code::ERR_INPUT_OOB, __LINE__ );
    12d0:	45 e1       	ldi	r20, 0x15	; 21
    12d2:	55 e0       	ldi	r21, 0x05	; 5
    12d4:	67 e0       	ldi	r22, 0x07	; 7
    12d6:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
		ou16_delay = Config::HAL_TIMER_MAX_CNT;
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	f8 01       	movw	r30, r16
    12e0:	80 83       	st	Z, r24
    12e2:	91 83       	std	Z+1, r25	; 0x01
		return true;
    12e4:	ff 24       	eor	r15, r15
    12e6:	f3 94       	inc	r15
    12e8:	9c c1       	rjmp	.+824    	; 0x1622 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
	///	COMMAND -> STATUS
	///--------------------------------------------------------------------------
	//	The driver check if command has changed and saves the vars inside the timer status vars

	//If command position changed
	if (gast_command[iu8_index].u1_position_changed == true)
    12ea:	46 2f       	mov	r20, r22
    12ec:	50 e0       	ldi	r21, 0x00	; 0
    12ee:	fa 01       	movw	r30, r20
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	f5 80       	ldd	r15, Z+5	; 0x05
    1302:	ff 20       	and	r15, r15
    1304:	b1 f1       	breq	.+108    	; 0x1372 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0xb4>
	{
		//Fetch position
		int16_t s16_tmp = gast_command[iu8_index].s16_position;
    1306:	fa 01       	movw	r30, r20
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	e8 0f       	add	r30, r24
    1316:	f9 1f       	adc	r31, r25
    1318:	81 81       	ldd	r24, Z+1	; 0x01
    131a:	92 81       	ldd	r25, Z+2	; 0x02
		if ((Config::PEDANTIC_CHECKS == true) && ( (s16_tmp < -(int16_t)Config::SERVO_PPM_MAX_COMMAND) || (s16_tmp > (int16_t)Config::SERVO_PPM_MAX_COMMAND) ))
    131c:	9c 01       	movw	r18, r24
    131e:	20 57       	subi	r18, 0x70	; 112
    1320:	3e 4f       	sbci	r19, 0xFE	; 254
    1322:	21 32       	cpi	r18, 0x21	; 33
    1324:	33 40       	sbci	r19, 0x03	; 3
    1326:	60 f0       	brcs	.+24     	; 0x1340 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x82>
		{
			//Algorithmic error. The class should make sure that user can't write bollocks inside the position
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    1328:	47 e2       	ldi	r20, 0x27	; 39
    132a:	55 e0       	ldi	r21, 0x05	; 5
    132c:	68 e0       	ldi	r22, 0x08	; 8
    132e:	ce 01       	movw	r24, r28
    1330:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			ou16_delay = Config::HAL_TIMER_MAX_CNT;
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	f8 01       	movw	r30, r16
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
			return true;
    133e:	71 c1       	rjmp	.+738    	; 0x1622 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
		}
		//The target delay is the delay to achieve zero position plus the deviation
		gast_timer[iu8_index].u16_target = Config::SERVO_PPM_ZERO +s16_tmp;
    1340:	84 52       	subi	r24, 0x24	; 36
    1342:	9a 4f       	sbci	r25, 0xFA	; 250
    1344:	fa 01       	movw	r30, r20
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e4 0f       	add	r30, r20
    1350:	f5 1f       	adc	r31, r21
    1352:	ec 0f       	add	r30, r28
    1354:	fd 1f       	adc	r31, r29
    1356:	ef 5b       	subi	r30, 0xBF	; 191
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 83       	st	Z, r24
    135c:	91 83       	std	Z+1, r25	; 0x01
		//status and command are synced
		gast_command[iu8_index].u1_position_changed = false;
    135e:	fa 01       	movw	r30, r20
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	ec 0f       	add	r30, r28
    136e:	fd 1f       	adc	r31, r29
    1370:	15 82       	std	Z+5, r1	; 0x05
	}

	//Latch speed limit in microseconds per 20ms
	uint8_t u8_speed = 0;
	//If command speed changed
	if (gast_command[iu8_index].u1_speed_changed == true)
    1372:	fa 01       	movw	r30, r20
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	ec 0f       	add	r30, r28
    1382:	fd 1f       	adc	r31, r29
    1384:	f6 80       	ldd	r15, Z+6	; 0x06
    1386:	ff 20       	and	r15, r15
    1388:	09 f4       	brne	.+2      	; 0x138c <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0xce>
    138a:	4c c0       	rjmp	.+152    	; 0x1424 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x166>
	{
		//Fetch position
		uint16_t u16_tmp = gast_command[iu8_index].u16_speed;
    138c:	fa 01       	movw	r30, r20
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	ec 0f       	add	r30, r28
    139c:	fd 1f       	adc	r31, r29
    139e:	23 81       	ldd	r18, Z+3	; 0x03
    13a0:	34 81       	ldd	r19, Z+4	; 0x04
		//If speed limiter is disabled
		if (u16_tmp == 0)
    13a2:	21 15       	cp	r18, r1
    13a4:	31 05       	cpc	r19, r1
    13a6:	71 f4       	brne	.+28     	; 0x13c4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x106>
		{
			//Update internal timer status
			gast_timer[iu8_index].u8_speed = 0;	
    13a8:	fa 01       	movw	r30, r20
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	e4 0f       	add	r30, r20
    13b4:	f5 1f       	adc	r31, r21
    13b6:	ec 0f       	add	r30, r28
    13b8:	fd 1f       	adc	r31, r29
    13ba:	ed 5b       	subi	r30, 0xBD	; 189
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	10 82       	st	Z, r1
		//status and command are synced
		gast_command[iu8_index].u1_position_changed = false;
	}

	//Latch speed limit in microseconds per 20ms
	uint8_t u8_speed = 0;
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	25 c0       	rjmp	.+74     	; 0x140e <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x150>
		}
		//if speed limiter is active
		else
		{
			//The target speed is the speed multiplied by the number of PPM cycles in a second
			u16_tmp /= Config::SERVO_PPM_FREQUENCY;
    13c4:	36 95       	lsr	r19
    13c6:	27 95       	ror	r18
    13c8:	ab e7       	ldi	r26, 0x7B	; 123
    13ca:	b4 e1       	ldi	r27, 0x14	; 20
    13cc:	0e 94 06 1a 	call	0x340c	; 0x340c <__umulhisi3>
    13d0:	96 95       	lsr	r25
    13d2:	87 95       	ror	r24
			if (u16_tmp > 255)
    13d4:	8f 3f       	cpi	r24, 0xFF	; 255
    13d6:	91 05       	cpc	r25, r1
    13d8:	69 f0       	breq	.+26     	; 0x13f4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x136>
    13da:	60 f0       	brcs	.+24     	; 0x13f4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x136>
			{
				this -> report_error( Error_code::ERR_OVERFLOW, __LINE__ );
    13dc:	45 e4       	ldi	r20, 0x45	; 69
    13de:	55 e0       	ldi	r21, 0x05	; 5
    13e0:	66 e0       	ldi	r22, 0x06	; 6
    13e2:	ce 01       	movw	r24, r28
    13e4:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
				ou16_delay = Config::HAL_TIMER_MAX_CNT;
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	f8 01       	movw	r30, r16
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
				return true;
    13f2:	17 c1       	rjmp	.+558    	; 0x1622 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
			}
			u8_speed = u16_tmp;
    13f4:	68 2f       	mov	r22, r24
			//Update internal timer status
			gast_timer[iu8_index].u8_speed = u8_speed;
    13f6:	fa 01       	movw	r30, r20
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	e4 0f       	add	r30, r20
    1402:	f5 1f       	adc	r31, r21
    1404:	ec 0f       	add	r30, r28
    1406:	fd 1f       	adc	r31, r29
    1408:	ed 5b       	subi	r30, 0xBD	; 189
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 83       	st	Z, r24
		}
		//status and command are synced
		gast_command[iu8_index].u1_speed_changed = false;
    140e:	fa 01       	movw	r30, r20
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ec 0f       	add	r30, r28
    141e:	fd 1f       	adc	r31, r29
    1420:	16 82       	std	Z+6, r1	; 0x06
    1422:	0c c0       	rjmp	.+24     	; 0x143c <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x17e>
	}
	//If speed has not changed
	else
	{
		//Fetch speed
		u8_speed = gast_timer[iu8_index].u8_speed;
    1424:	fa 01       	movw	r30, r20
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	e4 0f       	add	r30, r20
    1430:	f5 1f       	adc	r31, r21
    1432:	ec 0f       	add	r30, r28
    1434:	fd 1f       	adc	r31, r29
    1436:	ed 5b       	subi	r30, 0xBD	; 189
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
	///--------------------------------------------------------------------------

	//Initialize return delay to invalid
	uint16_t u16_delay = Config::HAL_TIMER_MAX_CNT;
	//Fetch target
	uint16_t u16_target = gast_timer[iu8_index].u16_target;
    143c:	ca 01       	movw	r24, r20
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	84 0f       	add	r24, r20
    1448:	95 1f       	adc	r25, r21
    144a:	8c 0f       	add	r24, r28
    144c:	9d 1f       	adc	r25, r29
    144e:	fc 01       	movw	r30, r24
    1450:	ef 5b       	subi	r30, 0xBF	; 191
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	20 81       	ld	r18, Z
    1456:	31 81       	ldd	r19, Z+1	; 0x01
	//Fetch actual
	uint16_t u16_actual = gast_timer[iu8_index].u16_actual;
    1458:	33 96       	adiw	r30, 0x03	; 3
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
	//If: speed limit is inactive
	if (u8_speed == 0)
    145e:	61 11       	cpse	r22, r1
    1460:	3d c0       	rjmp	.+122    	; 0x14dc <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x21e>
	{
		//if already locked
		if (u16_target == u16_actual)
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	b9 f4       	brne	.+46     	; 0x1496 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x1d8>
		{
			//Already locked
			gast_command[iu8_index].u1_idle = true;
    1468:	fa 01       	movw	r30, r20
    146a:	31 96       	adiw	r30, 0x01	; 1
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	ec 0f       	add	r30, r28
    147a:	fd 1f       	adc	r31, r29
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
			gast_command[iu8_index].u1_lock = true;	
    1480:	44 0f       	add	r20, r20
    1482:	55 1f       	adc	r21, r21
    1484:	44 0f       	add	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	44 0f       	add	r20, r20
    148a:	55 1f       	adc	r21, r21
    148c:	fe 01       	movw	r30, r28
    148e:	e4 0f       	add	r30, r20
    1490:	f5 1f       	adc	r31, r21
    1492:	87 83       	std	Z+7, r24	; 0x07
    1494:	ae c0       	rjmp	.+348    	; 0x15f2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
		}
		//Needs to move
		else
		{
			//Not locked
			gast_command[iu8_index].u1_idle = false;
    1496:	fa 01       	movw	r30, r20
    1498:	31 96       	adiw	r30, 0x01	; 1
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	ec 0f       	add	r30, r28
    14a8:	fd 1f       	adc	r31, r29
    14aa:	10 82       	st	Z, r1
			gast_command[iu8_index].u1_lock = false;
    14ac:	fa 01       	movw	r30, r20
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	ec 0f       	add	r30, r28
    14bc:	fd 1f       	adc	r31, r29
    14be:	17 82       	std	Z+7, r1	; 0x07
			//Update actual
			gast_timer[iu8_index].u16_actual = u16_target;
    14c0:	fa 01       	movw	r30, r20
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	e4 0f       	add	r30, r20
    14cc:	f5 1f       	adc	r31, r21
    14ce:	ec 0f       	add	r30, r28
    14d0:	fd 1f       	adc	r31, r29
    14d2:	ec 5b       	subi	r30, 0xBC	; 188
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	20 83       	st	Z, r18
    14d8:	31 83       	std	Z+1, r19	; 0x01
    14da:	8b c0       	rjmp	.+278    	; 0x15f2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
	}
	//if: speed limit active
	else
	{
		//if already locked
		if (u16_target == u16_actual)
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	c1 f4       	brne	.+48     	; 0x1512 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x254>
		{
			//Already locked
			gast_command[iu8_index].u1_idle = true;
    14e2:	fa 01       	movw	r30, r20
    14e4:	31 96       	adiw	r30, 0x01	; 1
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ec 0f       	add	r30, r28
    14f4:	fd 1f       	adc	r31, r29
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	20 83       	st	Z, r18
			gast_command[iu8_index].u1_lock = true;
    14fa:	44 0f       	add	r20, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	44 0f       	add	r20, r20
    1504:	55 1f       	adc	r21, r21
    1506:	fe 01       	movw	r30, r28
    1508:	e4 0f       	add	r30, r20
    150a:	f5 1f       	adc	r31, r21
    150c:	27 83       	std	Z+7, r18	; 0x07
			//Delay of the servo to be returned to caller
			u16_delay = u16_actual;
    150e:	9c 01       	movw	r18, r24
    1510:	70 c0       	rjmp	.+224    	; 0x15f2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
		}
		//if: Needs to move
		else
		{
			//Compute absolute difference
			uint16_t u16_delta = ((u16_target > u16_actual)?(u16_target-u16_actual):(u16_actual-u16_target));
    1512:	82 17       	cp	r24, r18
    1514:	93 07       	cpc	r25, r19
    1516:	20 f4       	brcc	.+8      	; 0x1520 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x262>
    1518:	f9 01       	movw	r30, r18
    151a:	e8 1b       	sub	r30, r24
    151c:	f9 0b       	sbc	r31, r25
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x268>
    1520:	fc 01       	movw	r30, r24
    1522:	e2 1b       	sub	r30, r18
    1524:	f3 0b       	sbc	r31, r19
			//If: I need to move less than my allowed speed limit
			if (u16_delta < u8_speed)
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	e6 17       	cp	r30, r22
    152a:	f7 07       	cpc	r31, r23
    152c:	20 f5       	brcc	.+72     	; 0x1576 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2b8>
			{
				//I'm locked but not IDLE
				gast_command[iu8_index].u1_lock = true;
    152e:	fa 01       	movw	r30, r20
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	ec 0f       	add	r30, r28
    153e:	fd 1f       	adc	r31, r29
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	87 83       	std	Z+7, r24	; 0x07
				gast_command[iu8_index].u1_idle = false;
    1544:	fa 01       	movw	r30, r20
    1546:	31 96       	adiw	r30, 0x01	; 1
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ec 0f       	add	r30, r28
    1556:	fd 1f       	adc	r31, r29
    1558:	10 82       	st	Z, r1
				//Update actual
				gast_timer[iu8_index].u16_actual = u16_target;
    155a:	fa 01       	movw	r30, r20
    155c:	ee 0f       	add	r30, r30
    155e:	ff 1f       	adc	r31, r31
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e4 0f       	add	r30, r20
    1566:	f5 1f       	adc	r31, r21
    1568:	ec 0f       	add	r30, r28
    156a:	fd 1f       	adc	r31, r29
    156c:	ec 5b       	subi	r30, 0xBC	; 188
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	20 83       	st	Z, r18
    1572:	31 83       	std	Z+1, r19	; 0x01
    1574:	3e c0       	rjmp	.+124    	; 0x15f2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
			}
			//if: I need to move more than the speed limit
			else
			{
				//I'm moving in a speed limited way
				gast_command[iu8_index].u1_lock = false;
    1576:	fa 01       	movw	r30, r20
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	ec 0f       	add	r30, r28
    1586:	fd 1f       	adc	r31, r29
    1588:	17 82       	std	Z+7, r1	; 0x07
				gast_command[iu8_index].u1_idle = false;
    158a:	fa 01       	movw	r30, r20
    158c:	31 96       	adiw	r30, 0x01	; 1
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	ec 0f       	add	r30, r28
    159c:	fd 1f       	adc	r31, r29
    159e:	10 82       	st	Z, r1
				//If: moving positive
				if (u16_target > u16_actual)
    15a0:	82 17       	cp	r24, r18
    15a2:	93 07       	cpc	r25, r19
    15a4:	20 f4       	brcc	.+8      	; 0x15ae <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2f0>
				{
					//Move the maximum allowed speed in the positive direction	
					u16_actual += u8_speed;
    15a6:	9c 01       	movw	r18, r24
    15a8:	26 0f       	add	r18, r22
    15aa:	37 1f       	adc	r19, r23
    15ac:	15 c0       	rjmp	.+42     	; 0x15d8 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x31a>
					
				}
				//If: moving negative
				else if (u16_target < u16_actual)
    15ae:	28 17       	cp	r18, r24
    15b0:	39 07       	cpc	r19, r25
    15b2:	20 f4       	brcc	.+8      	; 0x15bc <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2fe>
				{
					//Move the maximum allowed speed in the positive direction
					u16_actual -= u8_speed;
    15b4:	9c 01       	movw	r18, r24
    15b6:	26 1b       	sub	r18, r22
    15b8:	37 0b       	sbc	r19, r23
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x31a>
				}
				else
				{
					this -> report_error( Error_code::ERR_ALGORITHM, __LINE__ );
    15bc:	48 ea       	ldi	r20, 0xA8	; 168
    15be:	55 e0       	ldi	r21, 0x05	; 5
    15c0:	68 e0       	ldi	r22, 0x08	; 8
    15c2:	ce 01       	movw	r24, r28
    15c4:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
					ou16_delay = Config::HAL_TIMER_MAX_CNT;
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
					return true;
    15d2:	ff 24       	eor	r15, r15
    15d4:	f3 94       	inc	r15
    15d6:	25 c0       	rjmp	.+74     	; 0x1622 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
				}
				//Update actual
				gast_timer[iu8_index].u16_actual = u16_actual;
    15d8:	fa 01       	movw	r30, r20
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	e4 0f       	add	r30, r20
    15e4:	f5 1f       	adc	r31, r21
    15e6:	ec 0f       	add	r30, r28
    15e8:	fd 1f       	adc	r31, r29
    15ea:	ec 5b       	subi	r30, 0xBC	; 188
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	20 83       	st	Z, r18
    15f0:	31 83       	std	Z+1, r19	; 0x01
				//Delay of the servo to be returned to caller
				u16_delay = u16_actual;
			} //end if: I need to move more than the speed limit
		}  //end if: Needs to move
	} //end if: speed limit active
	if ((Config::PEDANTIC_CHECKS == true) && ((u16_delay < Config::SERVO_PPM_MIN_PULSE) || (u16_delay> Config::SERVO_PPM_MAX_PULSE)) )
    15f2:	c9 01       	movw	r24, r18
    15f4:	8c 54       	subi	r24, 0x4C	; 76
    15f6:	94 40       	sbci	r25, 0x04	; 4
    15f8:	81 32       	cpi	r24, 0x21	; 33
    15fa:	93 40       	sbci	r25, 0x03	; 3
    15fc:	70 f0       	brcs	.+28     	; 0x161a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x35c>
	{
		this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    15fe:	45 eb       	ldi	r20, 0xB5	; 181
    1600:	55 e0       	ldi	r21, 0x05	; 5
    1602:	68 e0       	ldi	r22, 0x08	; 8
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
		ou16_delay = Config::HAL_TIMER_MAX_CNT;
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	9f ef       	ldi	r25, 0xFF	; 255
    160e:	f8 01       	movw	r30, r16
    1610:	80 83       	st	Z, r24
    1612:	91 83       	std	Z+1, r25	; 0x01
		return true;
    1614:	ff 24       	eor	r15, r15
    1616:	f3 94       	inc	r15
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Delay %d\n", u16_delay); //Trace Return
	ou16_delay = u16_delay;
    161a:	f8 01       	movw	r30, r16
    161c:	20 83       	st	Z, r18
    161e:	31 83       	std	Z+1, r19	; 0x01
	return false;	//OK
    1620:	f1 2c       	mov	r15, r1
}   //end private method: compute_servo_delay | uint8_t | uint16_t |
    1622:	8f 2d       	mov	r24, r15
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	08 95       	ret

00001630 <_ZN9OrangeBot5Servo13hal_timer_isrEv>:
//! \n Toggles the servo pin and compute the next OCR
//! \n Re-arms or Stop the timer
/***************************************************************************/

bool Servo::hal_timer_isr( void )
{
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	00 d0       	rcall	.+0      	; 0x1642 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x12>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	7c 01       	movw	r14, r24
	///	SERVO IOs
	///--------------------------------------------------------------------------
	//	Emit the correct IO lines

	//Fetch scan index
	uint8_t u8_index = this -> gu8_index;
    1648:	fc 01       	movw	r30, r24
    164a:	10 81       	ld	r17, Z
	//First Servo: SET servo line
	if (u8_index == 0)
    164c:	11 11       	cpse	r17, r1
    164e:	05 c0       	rjmp	.+10     	; 0x165a <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x2a>
	{
		u1_ret = this -> hal_servo_io( u8_index, true );
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	61 2f       	mov	r22, r17
    1654:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x56>
	}
	//Inner servos
	else if ((u8_index > 0) && (u8_index < Config::NUM_SERVOS))
    165a:	6f ef       	ldi	r22, 0xFF	; 255
    165c:	61 0f       	add	r22, r17
    165e:	67 30       	cpi	r22, 0x07	; 7
    1660:	58 f4       	brcc	.+22     	; 0x1678 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x48>
	{
		//Clear previous servo line
		u1_ret = this -> hal_servo_io( u8_index-1, false );
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1668:	08 2f       	mov	r16, r24
		//SET current servo line
		u1_ret |= this -> hal_servo_io( u8_index, true );
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	61 2f       	mov	r22, r17
    166e:	c7 01       	movw	r24, r14
    1670:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1674:	80 2b       	or	r24, r16
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x56>
	}
	//Last Servo: CLEAR servo line
	else if (u8_index == Config::NUM_SERVOS)
    1678:	18 30       	cpi	r17, 0x08	; 8
    167a:	21 f4       	brne	.+8      	; 0x1684 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x54>
	{
		//Clear previous servo line
		u1_ret = this -> hal_servo_io( u8_index -1, false );
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x56>
	}
	//Algorithmic Error
	else
	{
		//FAIL
		u1_ret = true;
    1684:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	//If Fail
	if (u1_ret == true)
    1686:	88 23       	and	r24, r24
    1688:	21 f0       	breq	.+8      	; 0x1692 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x62>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    168a:	c7 01       	movw	r24, r14
    168c:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    1690:	58 c0       	rjmp	.+176    	; 0x1742 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
	//	Compute and program the delay for the next cycle
	
	//Temp delay in microseconds. HAL takes care of programming a delay in timer units
	uint16_t u16_delay;
	//Latch accumulator
	uint16_t u16_accumulator = gu16_timer_sum;
    1692:	f7 01       	movw	r30, r14
    1694:	e7 59       	subi	r30, 0x97	; 151
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	c0 80       	ld	r12, Z
    169a:	d1 80       	ldd	r13, Z+1	; 0x01
	//Compute Delay for servos
	if (u8_index < Config::NUM_SERVOS)
    169c:	18 30       	cpi	r17, 0x08	; 8
    169e:	d0 f4       	brcc	.+52     	; 0x16d4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xa4>
	{
		//Driver takes care of updating from user command, maintaining servo status and computing what the next delay is to be
		u1_ret = this -> compute_servo_delay( u8_index, u16_delay );
    16a0:	ae 01       	movw	r20, r28
    16a2:	4f 5f       	subi	r20, 0xFF	; 255
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	61 2f       	mov	r22, r17
    16a8:	c7 01       	movw	r24, r14
    16aa:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN9OrangeBot5Servo19compute_servo_delayEhRj>
		if ((Config::PEDANTIC_CHECKS == true) && ((u16_delay < Config::SERVO_PPM_MIN_PULSE) || (u16_delay > Config::SERVO_PPM_MAX_PULSE)) )
    16ae:	29 81       	ldd	r18, Y+1	; 0x01
    16b0:	3a 81       	ldd	r19, Y+2	; 0x02
    16b2:	a9 01       	movw	r20, r18
    16b4:	4c 54       	subi	r20, 0x4C	; 76
    16b6:	54 40       	sbci	r21, 0x04	; 4
    16b8:	41 32       	cpi	r20, 0x21	; 33
    16ba:	53 40       	sbci	r21, 0x03	; 3
    16bc:	40 f0       	brcs	.+16     	; 0x16ce <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x9e>
		{
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    16be:	4d ee       	ldi	r20, 0xED	; 237
    16c0:	51 e0       	ldi	r21, 0x01	; 1
    16c2:	68 e0       	ldi	r22, 0x08	; 8
    16c4:	c7 01       	movw	r24, r14
    16c6:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			return true;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	3a c0       	rjmp	.+116    	; 0x1742 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
		}
		//Accumulate delay inside accumulator
		u16_accumulator += u16_delay;
    16ce:	c2 0e       	add	r12, r18
    16d0:	d3 1e       	adc	r13, r19
    16d2:	19 c0       	rjmp	.+50     	; 0x1706 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd6>
	}
	//Compute final delay and clear accumulator
	else if (u8_index == Config::NUM_SERVOS)
    16d4:	18 30       	cpi	r17, 0x08	; 8
    16d6:	b1 f4       	brne	.+44     	; 0x1704 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd4>
	{
		//If: the servo scan time exceed the PPM period
		if (u16_accumulator >= Config::SERVO_PPM_PERIOD)
    16d8:	90 e2       	ldi	r25, 0x20	; 32
    16da:	c9 16       	cp	r12, r25
    16dc:	9e e4       	ldi	r25, 0x4E	; 78
    16de:	d9 06       	cpc	r13, r25
    16e0:	40 f0       	brcs	.+16     	; 0x16f2 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xc2>
		{
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    16e2:	49 ef       	ldi	r20, 0xF9	; 249
    16e4:	51 e0       	ldi	r21, 0x01	; 1
    16e6:	68 e0       	ldi	r22, 0x08	; 8
    16e8:	c7 01       	movw	r24, r14
    16ea:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			u1_ret = true;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd6>
		}
		//If: scan time is good
		else
		{
			//Final delay is meant to achieve the PPM period
			u16_delay = Config::SERVO_PPM_PERIOD -u16_accumulator;
    16f2:	20 e2       	ldi	r18, 0x20	; 32
    16f4:	3e e4       	ldi	r19, 0x4E	; 78
    16f6:	2c 19       	sub	r18, r12
    16f8:	3d 09       	sbc	r19, r13
    16fa:	29 83       	std	Y+1, r18	; 0x01
    16fc:	3a 83       	std	Y+2, r19	; 0x02
			//Reset the accumulator for the next cycle
			u16_accumulator = 0;	
    16fe:	c1 2c       	mov	r12, r1
    1700:	d1 2c       	mov	r13, r1
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd6>
	}
	//Algorithmic error
	else
	{
		//Fail
		u1_ret = true;	
    1704:	81 e0       	ldi	r24, 0x01	; 1
	}
	//If fail
	if (u1_ret == true)
    1706:	88 23       	and	r24, r24
    1708:	21 f0       	breq	.+8      	; 0x1712 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xe2>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    170a:	c7 01       	movw	r24, r14
    170c:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    1710:	18 c0       	rjmp	.+48     	; 0x1742 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
	}
	
	//Program the timer with the desired delay. ISR will be called again when said delay has elapsed
	u1_ret = this -> hal_timer_set_delay( u16_delay );
    1712:	69 81       	ldd	r22, Y+1	; 0x01
    1714:	7a 81       	ldd	r23, Y+2	; 0x02
    1716:	c7 01       	movw	r24, r14
    1718:	0e 94 8b 08 	call	0x1116	; 0x1116 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj>
	//Fail
	if (u1_ret == true)
    171c:	88 23       	and	r24, r24
    171e:	21 f0       	breq	.+8      	; 0x1728 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xf8>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    1720:	c7 01       	movw	r24, r14
    1722:	0e 94 4b 09 	call	0x1296	; 0x1296 <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
	}
	//Success
	else
	{
		//Write back accumulator
		gu16_timer_sum = u16_accumulator;
    1728:	f7 01       	movw	r30, r14
    172a:	e7 59       	subi	r30, 0x97	; 151
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	c0 82       	st	Z, r12
    1730:	d1 82       	std	Z+1, r13	; 0x01
	}
	//Next scan. TOP is the last number counted before reset
	u8_index = AT_TOP_INC( u8_index, Config::NUM_SERVOS );
    1732:	18 30       	cpi	r17, 0x08	; 8
    1734:	11 f0       	breq	.+4      	; 0x173a <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x10a>
    1736:	1f 5f       	subi	r17, 0xFF	; 255
    1738:	01 c0       	rjmp	.+2      	; 0x173c <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x10c>
    173a:	10 e0       	ldi	r17, 0x00	; 0
	//Update the scan index
	this -> gu8_index = u8_index;
    173c:	f7 01       	movw	r30, r14
    173e:	10 83       	st	Z, r17

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	return false;	//OK
    1740:	80 e0       	ldi	r24, 0x00	; 0
}   //end public method: hal_timer_isr
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	08 95       	ret

00001758 <_ZN4User9String_uc10str_lengthEPhh>:
//! @details
//!	Compute length of a string
/***************************************************************************/

uint8_t String_uc::str_length( uint8_t *str, uint8_t max_length )
{
    1758:	ac 01       	movw	r20, r24
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//counter
	uint8_t t = 0;
    175a:	80 e0       	ldi	r24, 0x00	; 0
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While string is not over
	while ((t < max_length) && (str[t]!='\0'))
    175c:	86 17       	cp	r24, r22
    175e:	40 f4       	brcc	.+16     	; 0x1770 <_ZN4User9String_uc10str_lengthEPhh+0x18>
    1760:	fa 01       	movw	r30, r20
    1762:	e8 0f       	add	r30, r24
    1764:	f1 1d       	adc	r31, r1
    1766:	20 81       	ld	r18, Z
    1768:	22 23       	and	r18, r18
    176a:	11 f0       	breq	.+4      	; 0x1770 <_ZN4User9String_uc10str_lengthEPhh+0x18>
	{
		//Scan next character
		t++;
    176c:	8f 5f       	subi	r24, 0xFF	; 255
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While string is not over
	while ((t < max_length) && (str[t]!='\0'))
    176e:	f6 cf       	rjmp	.-20     	; 0x175c <_ZN4User9String_uc10str_lengthEPhh+0x4>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	return t;
} //End function: str_len | uint8_t, uint8_t *
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	08 95       	ret

00001774 <_ZN4User9String_uc9to_stringIhEEhT_Ph>:
//! enum User::String_uc::Size:: hold all relevant sizes user need
/***************************************************************************/

template <>
uint8_t String_uc::to_string( uint8_t value, uint8_t *str )
{
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	00 d0       	rcall	.+0      	; 0x177a <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6>
    177a:	1f 92       	push	r1
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	58 2f       	mov	r21, r24
    1782:	db 01       	movw	r26, r22
	uint8_t base[] =
	{
		100,
		10,
		1
	};
    1784:	84 e6       	ldi	r24, 0x64	; 100
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	8a e0       	ldi	r24, 0x0A	; 10
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	8b 83       	std	Y+3, r24	; 0x03
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//index to the string
	uint8_t index = 0;
    1790:	30 e0       	ldi	r19, 0x00	; 0
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//For all bases
	for (t = 0;t < String_uc::Size::DIGIT_U8; t++)
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	23 30       	cpi	r18, 0x03	; 3
    1796:	28 f5       	brcc	.+74     	; 0x17e2 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6e>
	{
		//If the base is bigger or equal than the number (division is meaningful)
		if (base[t] <= value)
    1798:	e1 e0       	ldi	r30, 0x01	; 1
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ec 0f       	add	r30, r28
    179e:	fd 1f       	adc	r31, r29
    17a0:	e2 0f       	add	r30, r18
    17a2:	f1 1d       	adc	r31, r1
    17a4:	40 81       	ld	r20, Z
    17a6:	54 17       	cp	r21, r20
    17a8:	80 f0       	brcs	.+32     	; 0x17ca <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x56>
		{
			//Divide number by base, get the digit
			value_tmp = value/base[t];
    17aa:	85 2f       	mov	r24, r21
    17ac:	64 2f       	mov	r22, r20
    17ae:	0e 94 be 19 	call	0x337c	; 0x337c <__udivmodqi4>
			//Write the digit
			str[ index ] = '0' +value_tmp;
    17b2:	fd 01       	movw	r30, r26
    17b4:	e3 0f       	add	r30, r19
    17b6:	f1 1d       	adc	r31, r1
    17b8:	90 e3       	ldi	r25, 0x30	; 48
    17ba:	98 0f       	add	r25, r24
    17bc:	90 83       	st	Z, r25
			//Update the number
			value = value - base[t] * value_tmp;
    17be:	48 9f       	mul	r20, r24
    17c0:	50 19       	sub	r21, r0
    17c2:	11 24       	eor	r1, r1
			//I have found a meaningful digit
			flag = false;
			//Jump to the next digit
			index++;
    17c4:	3f 5f       	subi	r19, 0xFF	; 255
			//Write the digit
			str[ index ] = '0' +value_tmp;
			//Update the number
			value = value - base[t] * value_tmp;
			//I have found a meaningful digit
			flag = false;
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0a c0       	rjmp	.+20     	; 0x17de <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6a>
			//Jump to the next digit
			index++;
		}
		//If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
		else if ( (flag == true) && (t != (String_uc::Size::DIGIT_U8 -1)) )
    17ca:	88 23       	and	r24, r24
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x5e>
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 f4       	brne	.+12     	; 0x17de <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x6a>
		}
		//If: I have a meaningful zero
		else
		{
			//It's a zero
			str[ index ] = '0';
    17d2:	fd 01       	movw	r30, r26
    17d4:	e3 0f       	add	r30, r19
    17d6:	f1 1d       	adc	r31, r1
    17d8:	90 e3       	ldi	r25, 0x30	; 48
    17da:	90 83       	st	Z, r25
			//Jump to the next digit
			index++;
    17dc:	3f 5f       	subi	r19, 0xFF	; 255
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//For all bases
	for (t = 0;t < String_uc::Size::DIGIT_U8; t++)
    17de:	2f 5f       	subi	r18, 0xFF	; 255
    17e0:	d9 cf       	rjmp	.-78     	; 0x1794 <_ZN4User9String_uc9to_stringIhEEhT_Ph+0x20>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Append the terminator
	str[ index ] = '\0';
    17e2:	a3 0f       	add	r26, r19
    17e4:	b1 1d       	adc	r27, r1
    17e6:	1c 92       	st	X, r1

	//Trace Return
	DRETURN_ARG( "length: %d | return string: >%s<\n", index, str );
	return index;	//OK
}	//end method: to_string<uint8_t> | uint8_t, uint8_t *
    17e8:	83 2f       	mov	r24, r19
    17ea:	23 96       	adiw	r28, 0x03	; 3
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <_ZN4User4UartD1Ev>:
//! @return no return
//!	@details
//! Empty destructor
/***************************************************************************/

Uart::~Uart( void )
    17f6:	08 95       	ret

000017f8 <_ZN4User4Uart4sendEh>:
//!	@details
//! \n	Load a data inside the UART TX buffer
/***************************************************************************/

bool Uart::send( uint8_t iu8_data )
{
    17f8:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//UART DEMO
	AT_BUF_PUSH( this -> rpi_tx_buf, iu8_data );
    17fa:	a5 85       	ldd	r26, Z+13	; 0x0d
    17fc:	b6 85       	ldd	r27, Z+14	; 0x0e
    17fe:	84 85       	ldd	r24, Z+12	; 0x0c
    1800:	a8 0f       	add	r26, r24
    1802:	b1 1d       	adc	r27, r1
    1804:	6c 93       	st	X, r22
    1806:	24 85       	ldd	r18, Z+12	; 0x0c
    1808:	42 2f       	mov	r20, r18
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	82 85       	ldd	r24, Z+10	; 0x0a
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	48 17       	cp	r20, r24
    1814:	59 07       	cpc	r21, r25
    1816:	1c f4       	brge	.+6      	; 0x181e <__DATA_REGION_LENGTH__+0x1e>
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	24 87       	std	Z+12, r18	; 0x0c
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
    181e:	14 86       	std	Z+12, r1	; 0x0c
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace return
	return false;	//OK
}	//end public setter: send | uint8_t |
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	08 95       	ret

00001824 <_ZN4User4Uart14get_counter_txERj>:
	DENTER();	//Trace Enter
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	uint16_t u16_cnt = this -> gu16_tx_cnt;
    1824:	fc 01       	movw	r30, r24
    1826:	83 81       	ldd	r24, Z+3	; 0x03
    1828:	94 81       	ldd	r25, Z+4	; 0x04
	oru16_cnt = u16_cnt;
    182a:	fb 01       	movw	r30, r22
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
	DRETURN_ARG("TX: %d\n", u16_cnt );	//Trace return
	return false;	//OK
}	//end public getter: get_counter_tx | uint16_t & |
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	08 95       	ret

00001834 <_ZN4User4Uart14get_counter_rxERj>:
	DENTER();	//Trace Enter
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	uint16_t u16_cnt = this -> gu16_rx_cnt;
    1834:	fc 01       	movw	r30, r24
    1836:	81 81       	ldd	r24, Z+1	; 0x01
    1838:	92 81       	ldd	r25, Z+2	; 0x02
	oru16_cnt = u16_cnt;
    183a:	fb 01       	movw	r30, r22
    183c:	80 83       	st	Z, r24
    183e:	91 83       	std	Z+1, r25	; 0x01
	DRETURN_ARG("RX: %d\n", u16_cnt );	//Trace return
	return false;	//OK
}	//end public getter: get_counter_rx | uint16_t & |
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	08 95       	ret

00001844 <_ZN4User4Uart7receiveERh>:
//!	@details
//! \n	try to receive a data. if no data has been received, fails
/***************************************************************************/

bool Uart::receive( uint8_t &oru8_data )
{
    1844:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	//If no rx data
	if (AT_BUF_EMPTY( this -> rpi_rx_buf ) == true)
    1846:	87 81       	ldd	r24, Z+7	; 0x07
    1848:	26 81       	ldd	r18, Z+6	; 0x06
    184a:	82 13       	cpse	r24, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <_ZN4User4Uart7receiveERh+0xe>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <_ZN4User4Uart7receiveERh+0x10>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	81 11       	cpse	r24, r1
    1856:	19 c0       	rjmp	.+50     	; 0x188a <_ZN4User4Uart7receiveERh+0x46>
		u1_ret = true;
	}
	else
	{
		//Profile
		this -> gu16_rx_cnt++;
    1858:	81 81       	ldd	r24, Z+1	; 0x01
    185a:	92 81       	ldd	r25, Z+2	; 0x02
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	81 83       	std	Z+1, r24	; 0x01
    1860:	92 83       	std	Z+2, r25	; 0x02
		//Fetch data
		u8_data = AT_BUF_PEEK( this -> rpi_rx_buf );
    1862:	a0 85       	ldd	r26, Z+8	; 0x08
    1864:	b1 85       	ldd	r27, Z+9	; 0x09
    1866:	42 2f       	mov	r20, r18
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	a4 0f       	add	r26, r20
    186c:	b5 1f       	adc	r27, r21
    186e:	3c 91       	ld	r19, X
		AT_BUF_KICK( this -> rpi_rx_buf );
    1870:	85 81       	ldd	r24, Z+5	; 0x05
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	48 17       	cp	r20, r24
    1878:	59 07       	cpc	r21, r25
    187a:	24 f4       	brge	.+8      	; 0x1884 <_ZN4User4Uart7receiveERh+0x40>
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	26 83       	std	Z+6, r18	; 0x06
		u1_ret = false;
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	05 c0       	rjmp	.+10     	; 0x188e <_ZN4User4Uart7receiveERh+0x4a>
	{
		//Profile
		this -> gu16_rx_cnt++;
		//Fetch data
		u8_data = AT_BUF_PEEK( this -> rpi_rx_buf );
		AT_BUF_KICK( this -> rpi_rx_buf );
    1884:	16 82       	std	Z+6, r1	; 0x06
		u1_ret = false;
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <_ZN4User4Uart7receiveERh+0x4a>
	
	//If no rx data
	if (AT_BUF_EMPTY( this -> rpi_rx_buf ) == true)
	{
		//No data
		u8_data = 0x00;
    188a:	30 e0       	ldi	r19, 0x00	; 0
		u1_ret = true;
    188c:	81 e0       	ldi	r24, 0x01	; 1
		u8_data = AT_BUF_PEEK( this -> rpi_rx_buf );
		AT_BUF_KICK( this -> rpi_rx_buf );
		u1_ret = false;
	}
	//Propagate
	oru8_data = u8_data;
    188e:	fb 01       	movw	r30, r22
    1890:	30 83       	st	Z, r19
	DRETURN_ARG("RX: %d %c\n", u1_ret, u8_data );	//Trace return
	return u1_ret;	//OK
}	//end public getter: receive | uint8_t & |
    1892:	08 95       	ret

00001894 <_ZN4User4Uart10isr_rx_exeEv>:
//!	@details
//! Method
/***************************************************************************/

bool Uart::isr_rx_exe( void )
{
    1894:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Fetch the data and clear the interrupt flag
	uint8_t rx_data_tmp = USART0.RXDATAL;
    1896:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	//If: RX buffer overflow
	if (AT_BUF_NUMELEM( this -> rpi_rx_buf )>=(Config::RX_BUFFER_SIZE-1))
    189a:	87 81       	ldd	r24, Z+7	; 0x07
    189c:	96 81       	ldd	r25, Z+6	; 0x06
    189e:	89 17       	cp	r24, r25
    18a0:	50 f0       	brcs	.+20     	; 0x18b6 <_ZN4User4Uart10isr_rx_exeEv+0x22>
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	29 1b       	sub	r18, r25
    18a8:	31 09       	sbc	r19, r1
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	2f 31       	cpi	r18, 0x1F	; 31
    18ae:	31 05       	cpc	r19, r1
    18b0:	74 f4       	brge	.+28     	; 0x18ce <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0c c0       	rjmp	.+24     	; 0x18ce <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    18b6:	55 81       	ldd	r21, Z+5	; 0x05
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	25 0f       	add	r18, r21
    18be:	31 1d       	adc	r19, r1
    18c0:	29 1b       	sub	r18, r25
    18c2:	31 09       	sbc	r19, r1
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	2f 31       	cpi	r18, 0x1F	; 31
    18c8:	31 05       	cpc	r19, r1
    18ca:	0c f4       	brge	.+2      	; 0x18ce <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	99 23       	and	r25, r25
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <_ZN4User4Uart10isr_rx_exeEv+0x44>
	{
		//TODO: This is an error
		AT_BUF_FLUSH( this -> rpi_rx_buf );
    18d2:	17 82       	std	Z+7, r1	; 0x07
    18d4:	16 82       	std	Z+6, r1	; 0x06
    18d6:	12 c0       	rjmp	.+36     	; 0x18fc <_ZN4User4Uart10isr_rx_exeEv+0x68>
	}
	//if: there is space in the RX buffer
	else
	{
		//Push byte into RX buffer for processing
		AT_BUF_PUSH( this -> rpi_rx_buf, rx_data_tmp );
    18d8:	a0 85       	ldd	r26, Z+8	; 0x08
    18da:	b1 85       	ldd	r27, Z+9	; 0x09
    18dc:	a8 0f       	add	r26, r24
    18de:	b1 1d       	adc	r27, r1
    18e0:	4c 93       	st	X, r20
    18e2:	27 81       	ldd	r18, Z+7	; 0x07
    18e4:	42 2f       	mov	r20, r18
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	85 81       	ldd	r24, Z+5	; 0x05
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	48 17       	cp	r20, r24
    18f0:	59 07       	cpc	r21, r25
    18f2:	1c f4       	brge	.+6      	; 0x18fa <_ZN4User4Uart10isr_rx_exeEv+0x66>
    18f4:	2f 5f       	subi	r18, 0xFF	; 255
    18f6:	27 83       	std	Z+7, r18	; 0x07
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <_ZN4User4Uart10isr_rx_exeEv+0x68>
    18fa:	17 82       	std	Z+7, r1	; 0x07
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end public method: isr_rx_exe | void |
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	08 95       	ret

00001900 <_ZN4User4Uart6updateEv>:
//!	@details
//! Background uart driver method. Meant to be executed periodically by the user
/***************************************************************************/

bool Uart::update( void )
{
    1900:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//if: RPI TX buffer is not empty and the RPI TX HW buffer is ready to transmit
	if ( (AT_BUF_NUMELEM( this -> rpi_tx_buf ) > 0) && (IS_BIT_ONE(USART0.STATUS, USART_DREIF_bp)))
    1902:	24 85       	ldd	r18, Z+12	; 0x0c
    1904:	83 85       	ldd	r24, Z+11	; 0x0b
    1906:	28 17       	cp	r18, r24
    1908:	40 f0       	brcs	.+16     	; 0x191a <_ZN4User4Uart6updateEv+0x1a>
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	28 1b       	sub	r18, r24
    190e:	31 09       	sbc	r19, r1
    1910:	12 16       	cp	r1, r18
    1912:	13 06       	cpc	r1, r19
    1914:	5c f0       	brlt	.+22     	; 0x192c <_ZN4User4Uart6updateEv+0x2c>
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	12 c0       	rjmp	.+36     	; 0x193e <_ZN4User4Uart6updateEv+0x3e>
    191a:	92 85       	ldd	r25, Z+10	; 0x0a
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	29 0f       	add	r18, r25
    1920:	31 1d       	adc	r19, r1
    1922:	28 1b       	sub	r18, r24
    1924:	31 09       	sbc	r19, r1
    1926:	12 16       	cp	r1, r18
    1928:	13 06       	cpc	r1, r19
    192a:	34 f4       	brge	.+12     	; 0x1938 <_ZN4User4Uart6updateEv+0x38>
    192c:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    1930:	95 fd       	sbrc	r25, 5
    1932:	04 c0       	rjmp	.+8      	; 0x193c <_ZN4User4Uart6updateEv+0x3c>
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	03 c0       	rjmp	.+6      	; 0x193e <_ZN4User4Uart6updateEv+0x3e>
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	01 c0       	rjmp	.+2      	; 0x193e <_ZN4User4Uart6updateEv+0x3e>
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	99 23       	and	r25, r25
    1940:	c9 f0       	breq	.+50     	; 0x1974 <_ZN4User4Uart6updateEv+0x74>
	{
		//Get the byte to be filtered out
		uint8_t tx_tmp = AT_BUF_PEEK( this -> rpi_tx_buf );
    1942:	a5 85       	ldd	r26, Z+13	; 0x0d
    1944:	b6 85       	ldd	r27, Z+14	; 0x0e
    1946:	48 2f       	mov	r20, r24
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	a4 0f       	add	r26, r20
    194c:	b5 1f       	adc	r27, r21
    194e:	9c 91       	ld	r25, X
		AT_BUF_KICK( this -> rpi_tx_buf );
    1950:	22 85       	ldd	r18, Z+10	; 0x0a
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	21 50       	subi	r18, 0x01	; 1
    1956:	31 09       	sbc	r19, r1
    1958:	42 17       	cp	r20, r18
    195a:	53 07       	cpc	r21, r19
    195c:	1c f4       	brge	.+6      	; 0x1964 <_ZN4User4Uart6updateEv+0x64>
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	83 87       	std	Z+11, r24	; 0x0b
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <_ZN4User4Uart6updateEv+0x66>
    1964:	13 86       	std	Z+11, r1	; 0x0b
		//Send data through the UART
		USART0.TXDATAL = tx_tmp;
    1966:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		//Profile
		this -> gu16_tx_cnt++;
    196a:	83 81       	ldd	r24, Z+3	; 0x03
    196c:	94 81       	ldd	r25, Z+4	; 0x04
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	83 83       	std	Z+3, r24	; 0x03
    1972:	94 83       	std	Z+4, r25	; 0x04
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end : update | void |
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	08 95       	ret

00001978 <_ZN4User4Uart9init_uartER12USART_structj>:
//!	256.0K		||	625		| 20MHz			| Fast		| 265.0KHz
//!	------------------------------------------------------------------------
/***************************************************************************/

bool Uart::init_uart( USART_t &ist_uart, uint16_t iu16_baud )
{
    1978:	fb 01       	movw	r30, r22
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrl_a		= ist_uart.CTRLA;
    197a:	25 81       	ldd	r18, Z+5	; 0x05
	uint8_t ctrl_b		= ist_uart.CTRLB;
    197c:	96 81       	ldd	r25, Z+6	; 0x06
	uint8_t ctrl_c		= ist_uart.CTRLC;
    197e:	87 81       	ldd	r24, Z+7	; 0x07
	uint8_t dbgctrl_tmp	= ist_uart.DBGCTRL;
    1980:	63 85       	ldd	r22, Z+11	; 0x0b
	uint8_t ctrl_ev		= ist_uart.EVCTRL;
    1982:	34 85       	ldd	r19, Z+12	; 0x0c
    1984:	8f 73       	andi	r24, 0x3F	; 63
	//UART will keep running when in debug
	//SET_BIT( dbgctrl_tmp, USART_DBGRUN_bp);
	
	//! UART operation mode
	//Asynchronous UART Mode
	SET_MASKED_BIT( ctrl_c, USART_CMODE_gm, USART_CMODE_ASYNCHRONOUS_gc );
    1986:	88 60       	ori	r24, 0x08	; 8
	//Master SPI Mode
	//SET_MASKED_BIT( ctrl_c, USART_CMODE_gm, USART_CMODE_MSPI_gc );
	
	//! 485 Mode
	//Disable 485 Mode
	SET_MASKED_BIT( ctrl_a, USART_RS485_gm, USART_RS485_OFF_gc );
    1988:	2c 7f       	andi	r18, 0xFC	; 252
    198a:	99 7f       	andi	r25, 0xF9	; 249
	//Internal 485 mode
	//SET_MASKED_BIT( ctrl_a, USART_RS485_gm, USART_RS485_INT_gc );
	
	//!	RX Mode
	//Normal mode
	SET_MASKED_BIT( ctrl_b, USART_RXMODE_gm, USART_RXMODE_NORMAL_gc );
    198c:	90 6c       	ori	r25, 0xC0	; 192
	//6 bit
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_6BIT_gc );
	//7 bit
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_7BIT_gc );
	//8 bit
	SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_8BIT_gc );
    198e:	88 7f       	andi	r24, 0xF8	; 248
    1990:	83 60       	ori	r24, 0x03	; 3
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_9BITH_gc );
	
	
	//! Parity Mode
	//No parity bit
	SET_MASKED_BIT( ctrl_c, USART_PMODE_gm, USART_PMODE_DISABLED_gc );
    1992:	8f 7c       	andi	r24, 0xCF	; 207
	//Enable Data register empty interrupt
	//SET_BIT( ctrl_a, USART_DREIE_bp );
	//Enable TX Interrupt
	//SET_BIT( ctrl_a, USART_TXCIE_bp );
	//Enable RX Interrupt
	SET_BIT( ctrl_a, USART_RXCIE_bp );
    1994:	20 68       	ori	r18, 0x80	; 128
	//	WRITE BACK
	//----------------------------------------------------------------
	
	//! Baud rate register
	//Set the baud rate of the peripheral
	ist_uart.BAUD = iu16_baud;
    1996:	40 87       	std	Z+8, r20	; 0x08
    1998:	51 87       	std	Z+9, r21	; 0x09
	
	//! Infrared mode
	//Infrared transmitter pulse length
	ist_uart.TXPLCTRL = 0;
    199a:	15 86       	std	Z+13, r1	; 0x0d
	//Infrared receiver pulse length
	ist_uart.RXPLCTRL = 0;
    199c:	16 86       	std	Z+14, r1	; 0x0e
	
	//Write back configuration registers
	ist_uart.DBGCTRL = dbgctrl_tmp;
    199e:	63 87       	std	Z+11, r22	; 0x0b
	ist_uart.CTRLC = ctrl_c;
    19a0:	87 83       	std	Z+7, r24	; 0x07
	//Writing back this register enables interrupts
	ist_uart.EVCTRL = ctrl_ev;
    19a2:	34 87       	std	Z+12, r19	; 0x0c
	ist_uart.CTRLA = ctrl_a;
    19a4:	25 83       	std	Z+5, r18	; 0x05
	//Writing back his register will enables the UART
	ist_uart.CTRLB = ctrl_b;
    19a6:	96 83       	std	Z+6, r25	; 0x06

	return false; //OK
}	//End: init_uart
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	08 95       	ret

000019ac <_ZN4User4Uart4initEv>:
//!	@details
//! Method
/***************************************************************************/

bool Uart::init( void )
{
    19ac:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Reset profilers
	this -> gu16_rx_cnt = 0;
    19ae:	11 82       	std	Z+1, r1	; 0x01
    19b0:	12 82       	std	Z+2, r1	; 0x02
	this -> gu16_tx_cnt = 0;
    19b2:	13 82       	std	Z+3, r1	; 0x03
    19b4:	14 82       	std	Z+4, r1	; 0x04
	//attach vector to buffer
	AT_BUF_ATTACH( this -> rpi_rx_buf, this -> v0, Config::RX_BUFFER_SIZE);
    19b6:	0f 96       	adiw	r24, 0x0f	; 15
    19b8:	80 87       	std	Z+8, r24	; 0x08
    19ba:	91 87       	std	Z+9, r25	; 0x09
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	85 83       	std	Z+5, r24	; 0x05
	AT_BUF_FLUSH( this -> rpi_rx_buf );
    19c0:	17 82       	std	Z+7, r1	; 0x07
    19c2:	16 82       	std	Z+6, r1	; 0x06
	//attach vector to buffer
	AT_BUF_ATTACH( this -> rpi_tx_buf, this -> v1, Config::TX_BUFFER_SIZE);
    19c4:	cf 01       	movw	r24, r30
    19c6:	8f 96       	adiw	r24, 0x2f	; 47
    19c8:	85 87       	std	Z+13, r24	; 0x0d
    19ca:	96 87       	std	Z+14, r25	; 0x0e
    19cc:	80 e1       	ldi	r24, 0x10	; 16
    19ce:	82 87       	std	Z+10, r24	; 0x0a
	AT_BUF_FLUSH( this -> rpi_tx_buf );
    19d0:	14 86       	std	Z+12, r1	; 0x0c
    19d2:	13 86       	std	Z+11, r1	; 0x0b
	//Activate USART0 @256Kb/s
	this->init_uart( USART0, 313 );
    19d4:	49 e3       	ldi	r20, 0x39	; 57
    19d6:	51 e0       	ldi	r21, 0x01	; 1
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	78 e0       	ldi	r23, 0x08	; 8
    19dc:	cf 01       	movw	r24, r30
    19de:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN4User4Uart9init_uartER12USART_structj>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end method: init | void
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	08 95       	ret

000019e6 <_ZN4User4UartC1Ev>:
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class
	this -> init();
    19e6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN4User4Uart4initEv>
    19ea:	08 95       	ret

000019ec <_ZN9Orangebot9UniparserD1Ev>:
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
}	//end method: get_arg<int32_t> | uint8_t
    19ec:	08 95       	ret

000019ee <_ZN9Orangebot9Uniparser14accumulate_argEh>:
//!	@details
//! decode an input character and accumulate it into the argument vector
/***************************************************************************/

bool Uniparser::accumulate_arg( uint8_t data )
{
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	9c 01       	movw	r18, r24
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Fetch argument index
	uint8_t arg_index = this -> g_arg_fsm_status.arg_index;
    19fc:	fc 01       	movw	r30, r24
    19fe:	eb 59       	subi	r30, 0x9B	; 155
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	90 81       	ld	r25, Z
    1a04:	e9 2f       	mov	r30, r25
    1a06:	e2 95       	swap	r30
    1a08:	ef 70       	andi	r30, 0x0F	; 15
	//Fetch argument type index
	uint8_t arg_type_index = this -> g_arg_fsm_status.num_arg;
    1a0a:	96 95       	lsr	r25
    1a0c:	97 70       	andi	r25, 0x07	; 7
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d | Num args: %x\n", this -> g_err, __LINE__, arg_type_index );
		return true;	//fail
	}
	//Fetch argument type
	Arg_type arg_type = (Arg_type)this->g_arg_type[arg_type_index];
    1a0e:	d9 01       	movw	r26, r18
    1a10:	a9 0f       	add	r26, r25
    1a12:	b1 1d       	adc	r27, r1
    1a14:	aa 59       	subi	r26, 0x9A	; 154
    1a16:	bf 4f       	sbci	r27, 0xFF	; 255
    1a18:	8c 91       	ld	r24, X
	//	BODY
	//----------------------------------------------------------------

		//!Detect sign
	//if sign
	if (IS_SIGN(data))
    1a1a:	6b 32       	cpi	r22, 0x2B	; 43
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x34>
    1a1e:	6d 32       	cpi	r22, 0x2D	; 45
    1a20:	69 f4       	brne	.+26     	; 0x1a3c <_ZN9Orangebot9Uniparser14accumulate_argEh+0x4e>
	{
		//If sign is minus, argument sign is true which means minus
		this -> g_arg_fsm_status.arg_sign = (data == '-');
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	6d 32       	cpi	r22, 0x2D	; 45
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <_ZN9Orangebot9Uniparser14accumulate_argEh+0x3c>
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	eb 59       	subi	r30, 0x9B	; 155
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	90 fb       	bst	r25, 0
    1a34:	80 f9       	bld	r24, 0
    1a36:	80 83       	st	Z, r24
		DRETURN();
		//I'm done updating argument for now. Next round will come actual numbers.
		return false;
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	57 c1       	rjmp	.+686    	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	}
		//!Decode numeric value


	//decode the argument descriptor
	switch (arg_type)
    1a3c:	85 35       	cpi	r24, 0x55	; 85
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x54>
    1a40:	53 c0       	rjmp	.+166    	; 0x1ae8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xfa>
    1a42:	38 f4       	brcc	.+14     	; 0x1a52 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x64>
    1a44:	84 34       	cpi	r24, 0x44	; 68
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <_ZN9Orangebot9Uniparser14accumulate_argEh+0x5c>
    1a48:	a5 c0       	rjmp	.+330    	; 0x1b94 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x1a6>
    1a4a:	83 35       	cpi	r24, 0x53	; 83
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x62>
    1a4e:	74 c0       	rjmp	.+232    	; 0x1b38 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x14a>
    1a50:	3b c1       	rjmp	.+630    	; 0x1cc8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2da>
    1a52:	83 37       	cpi	r24, 0x73	; 115
    1a54:	51 f1       	breq	.+84     	; 0x1aaa <_ZN9Orangebot9Uniparser14accumulate_argEh+0xbc>
    1a56:	85 37       	cpi	r24, 0x75	; 117
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x74>
    1a5a:	84 36       	cpi	r24, 0x64	; 100
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x72>
    1a5e:	34 c1       	rjmp	.+616    	; 0x1cc8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2da>
    1a60:	e1 c0       	rjmp	.+450    	; 0x1c24 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x236>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	uint8_t *arg_ptr = &this -> g_arg[arg_index];
    1a62:	8e 2f       	mov	r24, r30
    1a64:	90 e0       	ldi	r25, 0x00	; 0
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1a66:	f9 01       	movw	r30, r18
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	e6 59       	subi	r30, 0x96	; 150
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	40 81       	ld	r20, Z
		case (Arg_type::ARG_U8):
		{
			//Fetch old argument
			uint8_t old = this -> get_arg<uint8_t>( arg_index );
			//Check runtime overflow
			if (old > 25)
    1a72:	4a 31       	cpi	r20, 0x1A	; 26
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x8a>
    1a76:	2e c1       	rjmp	.+604    	; 0x1cd4 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2e6>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1a78:	44 0f       	add	r20, r20
    1a7a:	54 2f       	mov	r21, r20
    1a7c:	55 0f       	add	r21, r21
    1a7e:	55 0f       	add	r21, r21
    1a80:	45 0f       	add	r20, r21
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1a82:	f9 01       	movw	r30, r18
    1a84:	eb 59       	subi	r30, 0x9B	; 155
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	50 81       	ld	r21, Z
    1a8a:	50 fd       	sbrc	r21, 0
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xa6>
			{
				//Accumulate new digit
				old += data -'0';
    1a8e:	64 0f       	add	r22, r20
    1a90:	60 53       	subi	r22, 0x30	; 48
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <_ZN9Orangebot9Uniparser14accumulate_argEh+0xac>
			}
			//if: number is negative
			else
			{
				//Accumulate new digit
				old -= data -'0';
    1a94:	46 1b       	sub	r20, r22
    1a96:	64 2f       	mov	r22, r20
    1a98:	60 5d       	subi	r22, 0xD0	; 208
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Save the numeric value of the argument
	this -> g_arg[ arg_index ] = (uint8_t)arg;
    1a9a:	82 0f       	add	r24, r18
    1a9c:	93 1f       	adc	r25, r19
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e6 59       	subi	r30, 0x96	; 150
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 83       	st	Z, r22
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	20 c1       	rjmp	.+576    	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	int8_t *arg_ptr = ARG_CAST( arg_index, int8_t);
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	e6 59       	subi	r30, 0x96	; 150
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	e2 0f       	add	r30, r18
    1ab2:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1ab4:	90 81       	ld	r25, Z
		case (Arg_type::ARG_S8):
		{
			//Fetch old argument
			int8_t old = this -> get_arg<int8_t>( arg_index );
			//Check runtime overflow
			if ((old > 12) || (old < -12))
    1ab6:	8c e0       	ldi	r24, 0x0C	; 12
    1ab8:	89 0f       	add	r24, r25
    1aba:	89 31       	cpi	r24, 0x19	; 25
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xd2>
    1abe:	0c c1       	rjmp	.+536    	; 0x1cd8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2ea>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1ac0:	99 0f       	add	r25, r25
    1ac2:	89 2f       	mov	r24, r25
    1ac4:	88 0f       	add	r24, r24
    1ac6:	88 0f       	add	r24, r24
    1ac8:	98 0f       	add	r25, r24
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1aca:	d9 01       	movw	r26, r18
    1acc:	ab 59       	subi	r26, 0x9B	; 155
    1ace:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad0:	8c 91       	ld	r24, X
    1ad2:	80 fd       	sbrc	r24, 0
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <_ZN9Orangebot9Uniparser14accumulate_argEh+0xee>
			{
				//Accumulate new digit
				old += data -'0';
    1ad6:	69 0f       	add	r22, r25
    1ad8:	60 53       	subi	r22, 0x30	; 48
    1ada:	03 c0       	rjmp	.+6      	; 0x1ae2 <_ZN9Orangebot9Uniparser14accumulate_argEh+0xf4>
			}
			//if: number is negative
			else
			{
				//Accumulate new digit
				old -= data -'0';
    1adc:	96 1b       	sub	r25, r22
    1ade:	69 2f       	mov	r22, r25
    1ae0:	60 5d       	subi	r22, 0xD0	; 208
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int8_t *arg_ptr = ARG_CAST( arg_index, int8_t );
	//Save the numeric value of the argument
	*arg_ptr = (int8_t)arg;
    1ae2:	60 83       	st	Z, r22
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	01 c1       	rjmp	.+514    	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	uint16_t *arg_ptr = ARG_CAST( arg_index, uint16_t);
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	e6 59       	subi	r30, 0x96	; 150
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	e2 0f       	add	r30, r18
    1af0:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
		case (Arg_type::ARG_U16):
		{
			//Fetch old argument
			uint16_t old = this -> get_arg<uint16_t>( arg_index );
			//Check runtime overflow
			if (old > 6553)
    1af6:	8a 39       	cpi	r24, 0x9A	; 154
    1af8:	49 e1       	ldi	r20, 0x19	; 25
    1afa:	94 07       	cpc	r25, r20
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x112>
    1afe:	ee c0       	rjmp	.+476    	; 0x1cdc <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2ee>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1b00:	ac 01       	movw	r20, r24
    1b02:	44 0f       	add	r20, r20
    1b04:	55 1f       	adc	r21, r21
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	84 0f       	add	r24, r20
    1b14:	95 1f       	adc	r25, r21
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1b16:	d9 01       	movw	r26, r18
    1b18:	ab 59       	subi	r26, 0x9B	; 155
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	2c 91       	ld	r18, X
    1b1e:	20 fd       	sbrc	r18, 0
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <_ZN9Orangebot9Uniparser14accumulate_argEh+0x13c>
			{
				//Accumulate new digit
				old += data -'0';
    1b22:	86 0f       	add	r24, r22
    1b24:	91 1d       	adc	r25, r1
    1b26:	c0 97       	sbiw	r24, 0x30	; 48
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x142>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1b2a:	86 1b       	sub	r24, r22
    1b2c:	91 09       	sbc	r25, r1
    1b2e:	c0 96       	adiw	r24, 0x30	; 48
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint16_t *arg_ptr = ARG_CAST( arg_index, uint16_t );
	//Save the numeric value of the argument
	*arg_ptr = (uint16_t)arg;
    1b30:	80 83       	st	Z, r24
    1b32:	91 83       	std	Z+1, r25	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	d9 c0       	rjmp	.+434    	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	int16_t *arg_ptr = ARG_CAST( arg_index, int16_t);
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	e6 59       	subi	r30, 0x96	; 150
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	e2 0f       	add	r30, r18
    1b40:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
		case (Arg_type::ARG_S16):
		{
			//Fetch old argument
			int16_t old = this -> get_arg<int16_t>( arg_index );
			//Check runtime overflow
			if ((old > 3276) || (old < -3276))
    1b46:	ac 01       	movw	r20, r24
    1b48:	44 53       	subi	r20, 0x34	; 52
    1b4a:	53 4f       	sbci	r21, 0xF3	; 243
    1b4c:	49 39       	cpi	r20, 0x99	; 153
    1b4e:	59 41       	sbci	r21, 0x19	; 25
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x166>
    1b52:	c6 c0       	rjmp	.+396    	; 0x1ce0 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2f2>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1b54:	ac 01       	movw	r20, r24
    1b56:	44 0f       	add	r20, r20
    1b58:	55 1f       	adc	r21, r21
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	84 0f       	add	r24, r20
    1b68:	95 1f       	adc	r25, r21
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1b6a:	d9 01       	movw	r26, r18
    1b6c:	ab 59       	subi	r26, 0x9B	; 155
    1b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b70:	2c 91       	ld	r18, X
    1b72:	20 fd       	sbrc	r18, 0
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x194>
			{
				//Accumulate new digit
				old += data -'0';
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	60 53       	subi	r22, 0x30	; 48
    1b7a:	71 09       	sbc	r23, r1
    1b7c:	86 0f       	add	r24, r22
    1b7e:	97 1f       	adc	r25, r23
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <_ZN9Orangebot9Uniparser14accumulate_argEh+0x19e>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	60 53       	subi	r22, 0x30	; 48
    1b86:	71 09       	sbc	r23, r1
    1b88:	86 1b       	sub	r24, r22
    1b8a:	97 0b       	sbc	r25, r23
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int16_t *arg_ptr = ARG_CAST( arg_index, int16_t );
	//Save the numeric value of the argument
	*arg_ptr = (int16_t)arg;
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	ab c0       	rjmp	.+342    	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	uint32_t *arg_ptr = ARG_CAST( arg_index, uint32_t);
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	e6 59       	subi	r30, 0x96	; 150
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ba4:	b3 81       	ldd	r27, Z+3	; 0x03
		case (Arg_type::ARG_U32):
		{
			//Fetch old argument
			uint32_t old = this -> get_arg<uint32_t>( arg_index );
			//Check runtime overflow
			if (old > 429496729)
    1ba6:	8a 39       	cpi	r24, 0x9A	; 154
    1ba8:	49 e9       	ldi	r20, 0x99	; 153
    1baa:	94 07       	cpc	r25, r20
    1bac:	a4 07       	cpc	r26, r20
    1bae:	49 e1       	ldi	r20, 0x19	; 25
    1bb0:	b4 07       	cpc	r27, r20
    1bb2:	08 f0       	brcs	.+2      	; 0x1bb6 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x1c8>
    1bb4:	97 c0       	rjmp	.+302    	; 0x1ce4 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2f6>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	aa 1f       	adc	r26, r26
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	6c 01       	movw	r12, r24
    1bc0:	7d 01       	movw	r14, r26
    1bc2:	cc 0c       	add	r12, r12
    1bc4:	dd 1c       	adc	r13, r13
    1bc6:	ee 1c       	adc	r14, r14
    1bc8:	ff 1c       	adc	r15, r15
    1bca:	cc 0c       	add	r12, r12
    1bcc:	dd 1c       	adc	r13, r13
    1bce:	ee 1c       	adc	r14, r14
    1bd0:	ff 1c       	adc	r15, r15
    1bd2:	8c 0d       	add	r24, r12
    1bd4:	9d 1d       	adc	r25, r13
    1bd6:	ae 1d       	adc	r26, r14
    1bd8:	bf 1d       	adc	r27, r15
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1bda:	e9 01       	movw	r28, r18
    1bdc:	cb 59       	subi	r28, 0x9B	; 155
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	28 81       	ld	r18, Y
    1be2:	20 fd       	sbrc	r18, 0
    1be4:	0d c0       	rjmp	.+26     	; 0x1c00 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x212>
			{
				//Accumulate new digit
				old += data -'0';
    1be6:	46 2f       	mov	r20, r22
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	40 53       	subi	r20, 0x30	; 48
    1bec:	51 09       	sbc	r21, r1
    1bee:	05 2e       	mov	r0, r21
    1bf0:	00 0c       	add	r0, r0
    1bf2:	66 0b       	sbc	r22, r22
    1bf4:	77 0b       	sbc	r23, r23
    1bf6:	84 0f       	add	r24, r20
    1bf8:	95 1f       	adc	r25, r21
    1bfa:	a6 1f       	adc	r26, r22
    1bfc:	b7 1f       	adc	r27, r23
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x22a>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1c00:	46 2f       	mov	r20, r22
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	40 53       	subi	r20, 0x30	; 48
    1c06:	51 09       	sbc	r21, r1
    1c08:	05 2e       	mov	r0, r21
    1c0a:	00 0c       	add	r0, r0
    1c0c:	66 0b       	sbc	r22, r22
    1c0e:	77 0b       	sbc	r23, r23
    1c10:	84 1b       	sub	r24, r20
    1c12:	95 0b       	sbc	r25, r21
    1c14:	a6 0b       	sbc	r26, r22
    1c16:	b7 0b       	sbc	r27, r23
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint32_t *arg_ptr = ARG_CAST( arg_index, uint32_t );
	//Save the numeric value of the argument
	*arg_ptr = (uint32_t)arg;
    1c18:	80 83       	st	Z, r24
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	a2 83       	std	Z+2, r26	; 0x02
    1c1e:	b3 83       	std	Z+3, r27	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	63 c0       	rjmp	.+198    	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Link the pointer to the actual content
	int32_t *arg_ptr = ARG_CAST( arg_index, int32_t);
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	e6 59       	subi	r30, 0x96	; 150
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	e2 0f       	add	r30, r18
    1c2c:	f3 1f       	adc	r31, r19
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN_ARG("Decoded: %d\n", *arg_ptr);
	return *arg_ptr; //OK
    1c2e:	80 81       	ld	r24, Z
    1c30:	91 81       	ldd	r25, Z+1	; 0x01
    1c32:	a2 81       	ldd	r26, Z+2	; 0x02
    1c34:	b3 81       	ldd	r27, Z+3	; 0x03
		case (Arg_type::ARG_S32):
		{
			//Fetch old argument
			int32_t old = this -> get_arg<int32_t>( arg_index );
			//Check runtime overflow
			if ((old > 214748364) || (old < -214748364))
    1c36:	6c 01       	movw	r12, r24
    1c38:	7d 01       	movw	r14, r26
    1c3a:	5c ec       	ldi	r21, 0xCC	; 204
    1c3c:	c5 0e       	add	r12, r21
    1c3e:	d5 1e       	adc	r13, r21
    1c40:	e5 1e       	adc	r14, r21
    1c42:	5c e0       	ldi	r21, 0x0C	; 12
    1c44:	f5 1e       	adc	r15, r21
    1c46:	79 e9       	ldi	r23, 0x99	; 153
    1c48:	c7 16       	cp	r12, r23
    1c4a:	d7 06       	cpc	r13, r23
    1c4c:	e7 06       	cpc	r14, r23
    1c4e:	79 e1       	ldi	r23, 0x19	; 25
    1c50:	f7 06       	cpc	r15, r23
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x268>
    1c54:	49 c0       	rjmp	.+146    	; 0x1ce8 <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fa>
			{
				return true;
			}
			//Shift by one digit left
			old *= 10;
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	aa 1f       	adc	r26, r26
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	6c 01       	movw	r12, r24
    1c60:	7d 01       	movw	r14, r26
    1c62:	cc 0c       	add	r12, r12
    1c64:	dd 1c       	adc	r13, r13
    1c66:	ee 1c       	adc	r14, r14
    1c68:	ff 1c       	adc	r15, r15
    1c6a:	cc 0c       	add	r12, r12
    1c6c:	dd 1c       	adc	r13, r13
    1c6e:	ee 1c       	adc	r14, r14
    1c70:	ff 1c       	adc	r15, r15
    1c72:	c8 0e       	add	r12, r24
    1c74:	d9 1e       	adc	r13, r25
    1c76:	ea 1e       	adc	r14, r26
    1c78:	fb 1e       	adc	r15, r27
			//If number is positive
			if (this -> g_arg_fsm_status.arg_sign == false)
    1c7a:	d9 01       	movw	r26, r18
    1c7c:	ab 59       	subi	r26, 0x9B	; 155
    1c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c80:	8c 91       	ld	r24, X
    1c82:	80 fd       	sbrc	r24, 0
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2b0>
			{
				//Accumulate new digit
				old += data -'0';
    1c86:	86 2f       	mov	r24, r22
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	c0 97       	sbiw	r24, 0x30	; 48
    1c8c:	09 2e       	mov	r0, r25
    1c8e:	00 0c       	add	r0, r0
    1c90:	aa 0b       	sbc	r26, r26
    1c92:	bb 0b       	sbc	r27, r27
    1c94:	8c 0d       	add	r24, r12
    1c96:	9d 1d       	adc	r25, r13
    1c98:	ae 1d       	adc	r26, r14
    1c9a:	bf 1d       	adc	r27, r15
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2ce>
			//if: number is negative
			else
			{

				//Accumulate new digit
				old -= data -'0';
    1c9e:	86 2f       	mov	r24, r22
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	c0 97       	sbiw	r24, 0x30	; 48
    1ca4:	09 2e       	mov	r0, r25
    1ca6:	00 0c       	add	r0, r0
    1ca8:	aa 0b       	sbc	r26, r26
    1caa:	bb 0b       	sbc	r27, r27
    1cac:	a7 01       	movw	r20, r14
    1cae:	96 01       	movw	r18, r12
    1cb0:	28 1b       	sub	r18, r24
    1cb2:	39 0b       	sbc	r19, r25
    1cb4:	4a 0b       	sbc	r20, r26
    1cb6:	5b 0b       	sbc	r21, r27
    1cb8:	da 01       	movw	r26, r20
    1cba:	c9 01       	movw	r24, r18
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int32_t *arg_ptr = ARG_CAST( arg_index, int32_t );
	//Save the numeric value of the argument
	*arg_ptr = (int32_t)arg;
    1cbc:	80 83       	st	Z, r24
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	a2 83       	std	Z+2, r26	; 0x02
    1cc2:	b3 83       	std	Z+3, r27	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	11 c0       	rjmp	.+34     	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			break;
		}
		//Unrecognized argument descriptor in the dictionary
		default:
		{
			this -> g_err = Err_codes::ERR_GENERIC;
    1cc8:	f9 01       	movw	r30, r18
    1cca:	ec 58       	subi	r30, 0x8C	; 140
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	80 83       	st	Z, r24
			DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
			return true;	//fail
    1cd2:	0b c0       	rjmp	.+22     	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			uint8_t old = this -> get_arg<uint8_t>( arg_index );
			//Check runtime overflow
			if (old > 25)
			{
				return true;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			int8_t old = this -> get_arg<int8_t>( arg_index );
			//Check runtime overflow
			if ((old > 12) || (old < -12))
			{
				return true;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	07 c0       	rjmp	.+14     	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			uint16_t old = this -> get_arg<uint16_t>( arg_index );
			//Check runtime overflow
			if (old > 6553)
			{
				return true;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			int16_t old = this -> get_arg<int16_t>( arg_index );
			//Check runtime overflow
			if ((old > 3276) || (old < -3276))
			{
				return true;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			uint32_t old = this -> get_arg<uint32_t>( arg_index );
			//Check runtime overflow
			if (old > 429496729)
			{
				return true;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <_ZN9Orangebot9Uniparser14accumulate_argEh+0x2fc>
			//Fetch old argument
			int32_t old = this -> get_arg<int32_t>( arg_index );
			//Check runtime overflow
			if ((old > 214748364) || (old < -214748364))
			{
				return true;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1

	//Trace Return vith return value
	DRETURN();

	return false; //OK
}	//end method: accumulate_arg | uint8_t
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	08 95       	ret

00001cf8 <_ZN9Orangebot9Uniparser9close_argEv>:
//!	@details
//! Argument has been fully decoded into argument string. Update argument descriptor FSM.
/***************************************************************************/

bool Uniparser::close_arg( void )
{
    1cf8:	ac 01       	movw	r20, r24
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//Fetch argument index
	uint8_t arg_index = this -> g_arg_fsm_status.arg_index;
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	eb 59       	subi	r30, 0x9B	; 155
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	90 81       	ld	r25, Z
    1d02:	29 2f       	mov	r18, r25
    1d04:	22 95       	swap	r18
    1d06:	2f 70       	andi	r18, 0x0F	; 15
	//Fetch argument type index
	uint8_t arg_type_index = this -> g_arg_fsm_status.num_arg;
    1d08:	96 95       	lsr	r25
    1d0a:	97 70       	andi	r25, 0x07	; 7
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d | Num args: %x\n", this -> g_err, __LINE__, arg_type_index );
		return true;	//fail
	}
	//Fetch argument type
	Arg_type arg_type = (Arg_type)this->g_arg_type[arg_type_index];
    1d0c:	fa 01       	movw	r30, r20
    1d0e:	e9 0f       	add	r30, r25
    1d10:	f1 1d       	adc	r31, r1
    1d12:	ea 59       	subi	r30, 0x9A	; 154
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
	//	BODY
	//----------------------------------------------------------------

		//! Advance the argument index to the first free byte in the argument vector
	//If: one byte argument
	if ((arg_type == Arg_type::ARG_U8) || (arg_type == Arg_type::ARG_S8))
    1d18:	85 37       	cpi	r24, 0x75	; 117
    1d1a:	11 f0       	breq	.+4      	; 0x1d20 <_ZN9Orangebot9Uniparser9close_argEv+0x28>
    1d1c:	83 37       	cpi	r24, 0x73	; 115
    1d1e:	11 f4       	brne	.+4      	; 0x1d24 <_ZN9Orangebot9Uniparser9close_argEv+0x2c>
	{
		//Skip the argument descriptor and the argument itself
		arg_index += Arg_size::ARG_S8_SIZE;
    1d20:	2f 5f       	subi	r18, 0xFF	; 255
    1d22:	0b c0       	rjmp	.+22     	; 0x1d3a <_ZN9Orangebot9Uniparser9close_argEv+0x42>
	}
	//If: two bytes argument
	else if ((arg_type == Arg_type::ARG_U16) || (arg_type == Arg_type::ARG_S16))
    1d24:	85 35       	cpi	r24, 0x55	; 85
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <_ZN9Orangebot9Uniparser9close_argEv+0x34>
    1d28:	83 35       	cpi	r24, 0x53	; 83
    1d2a:	11 f4       	brne	.+4      	; 0x1d30 <_ZN9Orangebot9Uniparser9close_argEv+0x38>
	{
		//Skip the argument descriptor and the argument itself
		arg_index += Arg_size::ARG_S16_SIZE;
    1d2c:	2e 5f       	subi	r18, 0xFE	; 254
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <_ZN9Orangebot9Uniparser9close_argEv+0x42>
	}
	//If: four bytes argument
	else if ((arg_type == Arg_type::ARG_U32) || (arg_type == Arg_type::ARG_S32))
    1d30:	84 34       	cpi	r24, 0x44	; 68
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <_ZN9Orangebot9Uniparser9close_argEv+0x40>
    1d34:	84 36       	cpi	r24, 0x64	; 100
    1d36:	e9 f4       	brne	.+58     	; 0x1d72 <_ZN9Orangebot9Uniparser9close_argEv+0x7a>
	{
		//Skip the argument descriptor and the argument itself
		arg_index += Arg_size::ARG_S32_SIZE;
    1d38:	2c 5f       	subi	r18, 0xFC	; 252
		//failure
		return true;
	}
		//! Check that index is valid
	//if: index is above bit width or exceed the argument vector size
	if ((arg_index > UNIPARSER_MAX_ARG_INDEX) || (arg_index > UNIPARSER_ARG_VECTOR_SIZE))
    1d3a:	29 30       	cpi	r18, 0x09	; 9
    1d3c:	40 f0       	brcs	.+16     	; 0x1d4e <_ZN9Orangebot9Uniparser9close_argEv+0x56>
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//Prepare the argument descriptor. zero arguments are in store
	this -> g_arg_fsm_status.num_arg = 0;
    1d3e:	fa 01       	movw	r30, r20
    1d40:	eb 59       	subi	r30, 0x9B	; 155
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
	//First free slot in the argument vector is the first byte
	this -> g_arg_fsm_status.arg_index = 0;
	//if sign is not specified, default argument sign is plus
	this -> g_arg_fsm_status.arg_sign = false;
    1d44:	10 82       	st	Z, r1
	{
		//Restart the argument decoder
		this -> init_arg_decoder();
		//
		DPRINT("ERR: Exceeded alloted argument vector size with index: %d\n", arg_index);
		this -> g_err = Err_codes::ERR_GENERIC;
    1d46:	3f 96       	adiw	r30, 0x0f	; 15
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 83       	st	Z, r24
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
    1d4c:	08 95       	ret
	}
	//Write back index
	this -> g_arg_fsm_status.arg_index = arg_index;
    1d4e:	fa 01       	movw	r30, r20
    1d50:	eb 59       	subi	r30, 0x9B	; 155
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	22 95       	swap	r18
    1d56:	20 7f       	andi	r18, 0xF0	; 240
    1d58:	30 81       	ld	r19, Z
    1d5a:	3f 70       	andi	r19, 0x0F	; 15
    1d5c:	32 2b       	or	r19, r18
	//Update number of decoded arguments
	this -> g_arg_fsm_status.num_arg++;
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	97 70       	andi	r25, 0x07	; 7
    1d62:	29 2f       	mov	r18, r25
    1d64:	22 0f       	add	r18, r18
    1d66:	93 2f       	mov	r25, r19
    1d68:	91 7f       	andi	r25, 0xF1	; 241
    1d6a:	92 2b       	or	r25, r18
    1d6c:	90 83       	st	Z, r25
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN();

	return false; //OK
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	08 95       	ret
		return true;
	}
	else
	{
		//failure
		return true;
    1d72:	81 e0       	ldi	r24, 0x01	; 1

	//Trace Return vith return value
	DRETURN();

	return false; //OK
}	//end method: close_arg | void
    1d74:	08 95       	ret

00001d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Save the error code
	this -> g_err = err_code;
    1d76:	8c 58       	subi	r24, 0x8C	; 140
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	60 83       	st	Z, r22
    1d7e:	08 95       	ret

00001d80 <_ZN9Orangebot9Uniparser7chk_cmdEPKh>:
//! Check command syntax to prevent bad commands from being loaded in the dictionary
//! Saves runtime check for bad dictionary entries
/***************************************************************************/

bool Uniparser::chk_cmd( const uint8_t *cmd )
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//If a null pointer function handler was given
	if (cmd == nullptr)
    1d86:	61 15       	cp	r22, r1
    1d88:	71 05       	cpc	r23, r1
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x16>
	{
		this -> error_handler( Err_codes::SYNTAX_BAD_POINTER );
    1d8c:	68 e0       	ldi	r22, 0x08	; 8
    1d8e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR%d: | Bad handler function pointer\n", Err_codes::SYNTAX_BAD_POINTER);
		return true; //FAIL
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	77 c0       	rjmp	.+238    	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//if: first char is not a letter
	if (!IS_LETTER( cmd[0] ))
    1d96:	fb 01       	movw	r30, r22
    1d98:	80 81       	ld	r24, Z
    1d9a:	9f e9       	ldi	r25, 0x9F	; 159
    1d9c:	98 0f       	add	r25, r24
    1d9e:	9a 31       	cpi	r25, 0x1A	; 26
    1da0:	48 f0       	brcs	.+18     	; 0x1db4 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x34>
    1da2:	81 54       	subi	r24, 0x41	; 65
    1da4:	8a 31       	cpi	r24, 0x1A	; 26
    1da6:	50 f0       	brcs	.+20     	; 0x1dbc <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x3c>
	{
		this -> error_handler( Err_codes::SYNTAX_FIRST_NOLETTER );
    1da8:	6e e0       	ldi	r22, 0x0E	; 14
    1daa:	ce 01       	movw	r24, r28
    1dac:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR%d | First character of a command must be a letter\n", Err_codes::SYNTAX_FIRST_NOLETTER);
		return true; //FAIL
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	68 c0       	rjmp	.+208    	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	a0 e0       	ldi	r26, 0x00	; 0
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x42>
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	a0 e0       	ldi	r26, 0x00	; 0
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
	}

	//Initialize counter
	t = 1;
	//While: parsing is not done
	while ((cmd[t] != '\0') && (t < UNIPARSER_MAX_CMD_LENGTH))
    1dc2:	29 2f       	mov	r18, r25
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	fb 01       	movw	r30, r22
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	40 81       	ld	r20, Z
    1dce:	44 23       	and	r20, r20
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x54>
    1dd2:	4f c0       	rjmp	.+158    	; 0x1e72 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xf2>
    1dd4:	90 32       	cpi	r25, 0x20	; 32
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x5a>
    1dd8:	4c c0       	rjmp	.+152    	; 0x1e72 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xf2>
	{
		//if: argument descriptor
		if (cmd[t] == '%')
    1dda:	45 32       	cpi	r20, 0x25	; 37
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x60>
    1dde:	47 c0       	rjmp	.+142    	; 0x1e6e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xee>
		{
				//!Check number of arguments
			//i have an argument descriptor
			arg_type_cnt++;
    1de0:	5f 5f       	subi	r21, 0xFF	; 255
			//if: exceed number of arguments
			if (arg_type_cnt > UNIPARSER_MAX_ARGS)
    1de2:	55 30       	cpi	r21, 0x05	; 5
    1de4:	30 f0       	brcs	.+12     	; 0x1df2 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x72>
			{
				this -> error_handler( Err_codes::SYNTAX_TOO_MANY_ARGS );
    1de6:	6a e0       	ldi	r22, 0x0A	; 10
    1de8:	ce 01       	movw	r24, r28
    1dea:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR%d in line %d | too many arguments in this command %d\n", Err_codes::SYNTAX_TOO_MANY_ARGS, __LINE__, arg_type_cnt);
				return true; //FAIL
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	49 c0       	rjmp	.+146    	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
			}
				//!Check back to back arguments
			//if: two arguments back to back
			if ( (t >= 2) && (cmd[t -2] == '%') )
    1df2:	92 30       	cpi	r25, 0x02	; 2
    1df4:	70 f0       	brcs	.+28     	; 0x1e12 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x92>
    1df6:	22 50       	subi	r18, 0x02	; 2
    1df8:	31 09       	sbc	r19, r1
    1dfa:	fb 01       	movw	r30, r22
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	80 81       	ld	r24, Z
    1e02:	85 32       	cpi	r24, 0x25	; 37
    1e04:	31 f4       	brne	.+12     	; 0x1e12 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x92>
			{
				this -> error_handler( Err_codes::SYNTAX_ARG_BACKTOBACK );
    1e06:	6b e0       	ldi	r22, 0x0B	; 11
    1e08:	ce 01       	movw	r24, r28
    1e0a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR%d in line %d | Two back to back arguments were given. Add a character in between them\n", Err_codes::SYNTAX_ARG_BACKTOBACK, __LINE__);
				return true;	//FAIL
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	39 c0       	rjmp	.+114    	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
			}

				//!Check total size of arguments
			//Skip the argument descriptor
			t++;
    1e12:	9f 5f       	subi	r25, 0xFF	; 255
			//Switch: argument type
			switch( cmd[t] )
    1e14:	fb 01       	movw	r30, r22
    1e16:	e9 0f       	add	r30, r25
    1e18:	f1 1d       	adc	r31, r1
    1e1a:	20 81       	ld	r18, Z
    1e1c:	25 35       	cpi	r18, 0x55	; 85
    1e1e:	89 f0       	breq	.+34     	; 0x1e42 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xc2>
    1e20:	28 f4       	brcc	.+10     	; 0x1e2c <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xac>
    1e22:	24 34       	cpi	r18, 0x44	; 68
    1e24:	91 f0       	breq	.+36     	; 0x1e4a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xca>
    1e26:	23 35       	cpi	r18, 0x53	; 83
    1e28:	71 f0       	breq	.+28     	; 0x1e46 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xc6>
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xd2>
    1e2c:	23 37       	cpi	r18, 0x73	; 115
    1e2e:	39 f0       	breq	.+14     	; 0x1e3e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xbe>
    1e30:	25 37       	cpi	r18, 0x75	; 117
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xba>
    1e34:	24 36       	cpi	r18, 0x64	; 100
    1e36:	69 f4       	brne	.+26     	; 0x1e52 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xd2>
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xce>
			{
				//Decode type
				case Arg_type::ARG_U8:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_U8_SIZE;
    1e3a:	af 5f       	subi	r26, 0xFF	; 255
					break;
    1e3c:	10 c0       	rjmp	.+32     	; 0x1e5e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_S8:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_S8_SIZE;
    1e3e:	af 5f       	subi	r26, 0xFF	; 255
					break;
    1e40:	0e c0       	rjmp	.+28     	; 0x1e5e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_U16:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_U16_SIZE;
    1e42:	ae 5f       	subi	r26, 0xFE	; 254
					break;
    1e44:	0c c0       	rjmp	.+24     	; 0x1e5e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_S16:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_S16_SIZE;
    1e46:	ae 5f       	subi	r26, 0xFE	; 254
					break;
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_U32:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_U32_SIZE;
    1e4a:	ac 5f       	subi	r26, 0xFC	; 252
					break;
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				//Decode type
				case Arg_type::ARG_S32:
				{
                    //Accumulate
                    arg_cnt += Arg_size::ARG_S32_SIZE;
    1e4e:	ac 5f       	subi	r26, 0xFC	; 252
					break;
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xde>
				}
				default:
				{
					this -> error_handler( Err_codes::SYNTAX_ARG_TYPE_INVALID );
    1e52:	69 e0       	ldi	r22, 0x09	; 9
    1e54:	ce 01       	movw	r24, r28
    1e56:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR%d in line %d | Invalid argument descriptor %x\n", Err_codes::SYNTAX_ARG_TYPE_INVALID , __LINE__, cmd[t]);
					return true;	//FAIL
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	13 c0       	rjmp	.+38     	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
				}
			}	//End Switch: argument type
			//Check size
			if (arg_cnt > UNIPARSER_ARG_VECTOR_SIZE)
    1e5e:	a9 30       	cpi	r26, 0x09	; 9
    1e60:	30 f0       	brcs	.+12     	; 0x1e6e <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0xee>
			{
				this -> error_handler( Err_codes::SYNTAX_ARG_LENGTH );
    1e62:	6c e0       	ldi	r22, 0x0C	; 12
    1e64:	ce 01       	movw	r24, r28
    1e66:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR%d in line %d | Invalid argument descriptor %x\n", Err_codes::SYNTAX_ARG_LENGTH , __LINE__, cmd[t]);
				return true;	//FAIL
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0b c0       	rjmp	.+22     	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
			}
		}	//End if: argument descriptor
		//Parse next byte
		t++;
    1e6e:	9f 5f       	subi	r25, 0xFF	; 255
	}

	//Initialize counter
	t = 1;
	//While: parsing is not done
	while ((cmd[t] != '\0') && (t < UNIPARSER_MAX_CMD_LENGTH))
    1e70:	a8 cf       	rjmp	.-176    	; 0x1dc2 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x42>
		}	//End if: argument descriptor
		//Parse next byte
		t++;
	}	//End While: parsing is not done
	//If command size has been exceeded
	if (t >= UNIPARSER_MAX_CMD_LENGTH)
    1e72:	90 32       	cpi	r25, 0x20	; 32
    1e74:	30 f0       	brcs	.+12     	; 0x1e82 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x102>
	{
		this -> error_handler( Err_codes::SYNTAX_LENGTH );
    1e76:	6d e0       	ldi	r22, 0x0D	; 13
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR%d in line %d | Given command was too long %d\n", Err_codes::SYNTAX_LENGTH , __LINE__, t);
		return true;	//FAIL
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <_ZN9Orangebot9Uniparser7chk_cmdEPKh+0x104>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN();
	return false; //OK
    1e82:	80 e0       	ldi	r24, 0x00	; 0
}	//end method: chk_cmd | const uint8_t *
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <_ZN9Orangebot9Uniparser7add_cmdEPKcPv>:
//! Add a string and a function pointer to the parser
//!	@todo check that command is valid
/***************************************************************************/

bool Uniparser::add_cmd( const char *cmd, void *handler )
{
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
	//----------------------------------------------------------------
	//	INIT
	//----------------------------------------------------------------

	//if: input is invalid
	if ((cmd == nullptr) || (handler == nullptr))
    1e96:	61 15       	cp	r22, r1
    1e98:	71 05       	cpc	r23, r1
    1e9a:	19 f0       	breq	.+6      	; 0x1ea2 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x18>
    1e9c:	41 15       	cp	r20, r1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x26>
	{
		this -> g_err = ERR_INVALID_CMD;
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	ec 58       	subi	r30, 0x8C	; 140
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	25 e0       	ldi	r18, 0x05	; 5
    1eaa:	20 83       	st	Z, r18
		DRETURN_ARG("ERR%d: ERR_INVALID_CMD\n", this -> g_err);
		return true;	//fail
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	21 c0       	rjmp	.+66     	; 0x1ef2 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x68>
		this -> g_err = ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
	}
	//if: maximum number of command has been reached
	if (this -> g_num_cmd >= (UNIPARSER_MAX_CMD-1))
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 81       	ld	r18, Z
    1eb4:	23 31       	cpi	r18, 0x13	; 19
    1eb6:	30 f0       	brcs	.+12     	; 0x1ec4 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x3a>
	{
		this -> g_err = ERR_ADD_MAX_CMD;
    1eb8:	ec 58       	subi	r30, 0x8C	; 140
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	26 e0       	ldi	r18, 0x06	; 6
    1ebe:	20 83       	st	Z, r18
		DRETURN_ARG("ERR%d: ERR_ADD_MAX_CMD in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	17 c0       	rjmp	.+46     	; 0x1ef2 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x68>
    1ec4:	7a 01       	movw	r14, r20
    1ec6:	8b 01       	movw	r16, r22
    1ec8:	ec 01       	movw	r28, r24
	}
	// check the validity of the string
	bool f_ret = this -> chk_cmd((const uint8_t *)cmd);
    1eca:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN9Orangebot9Uniparser7chk_cmdEPKh>
	//If: command had a syntax error
	if (f_ret == true)
    1ece:	81 11       	cpse	r24, r1
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x66>
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Fetch currently used command
	t = this -> g_num_cmd;
    1ed2:	88 81       	ld	r24, Y
	//Link command handler and command text
	this -> g_cmd_txt[t] = (uint8_t *)cmd;
    1ed4:	e8 2f       	mov	r30, r24
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	ec 0f       	add	r30, r28
    1ede:	fd 1f       	adc	r31, r29
    1ee0:	01 83       	std	Z+1, r16	; 0x01
    1ee2:	12 83       	std	Z+2, r17	; 0x02
	this -> g_cmd_handler[t] = handler;
    1ee4:	e5 ae       	std	Z+61, r14	; 0x3d
    1ee6:	f6 ae       	std	Z+62, r15	; 0x3e
	DPRINT("Command >%s< with handler >%p< has been added with index: %d\n", cmd, (void *)handler, t);
	//A command has been added
	this -> g_num_cmd = t +1;
    1ee8:	8f 5f       	subi	r24, 0xFF	; 255
    1eea:	88 83       	st	Y, r24
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	DRETURN();
	return false;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <_ZN9Orangebot9Uniparser7add_cmdEPKcPv+0x68>
	bool f_ret = this -> chk_cmd((const uint8_t *)cmd);
	//If: command had a syntax error
	if (f_ret == true)
	{
		DRETURN_ARG("command didnt get past argument descriptor check\n");
		return true;	//FAIL
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
	//	RETURN
	//----------------------------------------------------------------

	DRETURN();
	return false;
}	//end method: add_command | const char *, void *
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	08 95       	ret

00001f00 <_ZN9Orangebot9Uniparser7add_argEh>:
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
	}
	//Fetch index inside the command
	uint8_t cmd_index = this -> g_cmd_index[ cmd_id ];
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	fc 01       	movw	r30, r24
    1f04:	e6 0f       	add	r30, r22
    1f06:	f7 1f       	adc	r31, r23
    1f08:	21 a5       	ldd	r18, Z+41	; 0x29
		this -> g_err = Err_codes::ERR_GENERIC;
		DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
		return true;	//fail
	}
	//Point to the argument type
    cmd_index++;
    1f0a:	2f 5f       	subi	r18, 0xFF	; 255
	//!	ARG Index points to first free slot in the argument vector
	//! I save argument type and initialize the content

		//! Initialize argument identifier
	//argument descriptor is held in the dictionary
	Arg_type arg_type = (Arg_type)this -> g_cmd_txt[cmd_id][cmd_index];
    1f0c:	66 0f       	add	r22, r22
    1f0e:	77 1f       	adc	r23, r23
    1f10:	fc 01       	movw	r30, r24
    1f12:	e6 0f       	add	r30, r22
    1f14:	f7 1f       	adc	r31, r23
    1f16:	01 80       	ldd	r0, Z+1	; 0x01
    1f18:	f2 81       	ldd	r31, Z+2	; 0x02
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	e2 0f       	add	r30, r18
    1f1e:	f1 1d       	adc	r31, r1
    1f20:	30 81       	ld	r19, Z
	//Fetch index to the next free argument slot
	uint8_t arg_type_index = this -> g_arg_fsm_status.num_arg;
    1f22:	fc 01       	movw	r30, r24
    1f24:	eb 59       	subi	r30, 0x9B	; 155
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	20 81       	ld	r18, Z
    1f2a:	26 95       	lsr	r18
    1f2c:	27 70       	andi	r18, 0x07	; 7
	//Store argument type in the argument type vector
	this -> g_arg_type[ arg_type_index ] = arg_type;
    1f2e:	dc 01       	movw	r26, r24
    1f30:	a2 0f       	add	r26, r18
    1f32:	b1 1d       	adc	r27, r1
    1f34:	aa 59       	subi	r26, 0x9A	; 154
    1f36:	bf 4f       	sbci	r27, 0xFF	; 255
    1f38:	3c 93       	st	X, r19
	//A new argument is being added. Reset the argument sign (@TODO: do this earlier)
	this -> g_arg_fsm_status.arg_sign = false;
    1f3a:	20 81       	ld	r18, Z
    1f3c:	2e 7f       	andi	r18, 0xFE	; 254
    1f3e:	20 83       	st	Z, r18
	//fetch argument index
	uint8_t arg_index = this -> g_arg_fsm_status.arg_index;
    1f40:	22 95       	swap	r18
    1f42:	2f 70       	andi	r18, 0x0F	; 15
	DPRINT("argument of type >%c< added | Num arguments: %d | Arg index: %d | Arg sign %c \n", arg_type, this -> g_arg_fsm_status.num_arg, arg_index, (this -> g_arg_fsm_status.arg_sign)?('-'):('+') );

		//! Initialize argument content
	//switch: decode argument desriptor
	switch (arg_type)
    1f44:	35 35       	cpi	r19, 0x55	; 85
    1f46:	09 f1       	breq	.+66     	; 0x1f8a <_ZN9Orangebot9Uniparser7add_argEh+0x8a>
    1f48:	28 f4       	brcc	.+10     	; 0x1f54 <_ZN9Orangebot9Uniparser7add_argEh+0x54>
    1f4a:	34 34       	cpi	r19, 0x44	; 68
    1f4c:	91 f1       	breq	.+100    	; 0x1fb2 <_ZN9Orangebot9Uniparser7add_argEh+0xb2>
    1f4e:	33 35       	cpi	r19, 0x53	; 83
    1f50:	31 f1       	breq	.+76     	; 0x1f9e <_ZN9Orangebot9Uniparser7add_argEh+0x9e>
    1f52:	47 c0       	rjmp	.+142    	; 0x1fe2 <_ZN9Orangebot9Uniparser7add_argEh+0xe2>
    1f54:	33 37       	cpi	r19, 0x73	; 115
    1f56:	71 f0       	breq	.+28     	; 0x1f74 <_ZN9Orangebot9Uniparser7add_argEh+0x74>
    1f58:	35 37       	cpi	r19, 0x75	; 117
    1f5a:	21 f0       	breq	.+8      	; 0x1f64 <_ZN9Orangebot9Uniparser7add_argEh+0x64>
    1f5c:	34 36       	cpi	r19, 0x64	; 100
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <_ZN9Orangebot9Uniparser7add_argEh+0x62>
    1f60:	40 c0       	rjmp	.+128    	; 0x1fe2 <_ZN9Orangebot9Uniparser7add_argEh+0xe2>
    1f62:	33 c0       	rjmp	.+102    	; 0x1fca <_ZN9Orangebot9Uniparser7add_argEh+0xca>
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Save the numeric value of the argument
	this -> g_arg[ arg_index ] = (uint8_t)arg;
    1f64:	fc 01       	movw	r30, r24
    1f66:	e2 0f       	add	r30, r18
    1f68:	f1 1d       	adc	r31, r1
    1f6a:	e6 59       	subi	r30, 0x96	; 150
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	10 82       	st	Z, r1
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    1f70:	80 e0       	ldi	r24, 0x00	; 0
	{
		case Arg_type::ARG_U8:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<uint8_t>( arg_index, (uint8_t)0 );
			break;
    1f72:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int8_t *arg_ptr = ARG_CAST( arg_index, int8_t );
    1f74:	e2 2f       	mov	r30, r18
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	9f 01       	movw	r18, r30
    1f7a:	26 59       	subi	r18, 0x96	; 150
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (int8_t)arg;
    1f84:	10 82       	st	Z, r1
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    1f86:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_S8:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<int8_t>( arg_index, (int8_t)0 );
			break;
    1f88:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint16_t *arg_ptr = ARG_CAST( arg_index, uint16_t );
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	26 59       	subi	r18, 0x96	; 150
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (uint16_t)arg;
    1f96:	10 82       	st	Z, r1
    1f98:	11 82       	std	Z+1, r1	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_U16:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<uint16_t>( arg_index, (uint16_t)0 );
			break;
    1f9c:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int16_t *arg_ptr = ARG_CAST( arg_index, int16_t );
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	26 59       	subi	r18, 0x96	; 150
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e2 0f       	add	r30, r18
    1fa8:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (int16_t)arg;
    1faa:	10 82       	st	Z, r1
    1fac:	11 82       	std	Z+1, r1	; 0x01
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    1fae:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_S16:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<int16_t>( arg_index, (int16_t)0 );
			break;
    1fb0:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	uint32_t *arg_ptr = ARG_CAST( arg_index, uint32_t );
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	26 59       	subi	r18, 0x96	; 150
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (uint32_t)arg;
    1fbe:	10 82       	st	Z, r1
    1fc0:	11 82       	std	Z+1, r1	; 0x01
    1fc2:	12 82       	std	Z+2, r1	; 0x02
    1fc4:	13 82       	std	Z+3, r1	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_U32:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<uint32_t>( arg_index, (uint32_t)0 );
			break;
    1fc8:	08 95       	ret
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Link pointer to the correct data type
	int32_t *arg_ptr = ARG_CAST( arg_index, int32_t );
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	26 59       	subi	r18, 0x96	; 150
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
	//Save the numeric value of the argument
	*arg_ptr = (int32_t)arg;
    1fd6:	10 82       	st	Z, r1
    1fd8:	11 82       	std	Z+1, r1	; 0x01
    1fda:	12 82       	std	Z+2, r1	; 0x02
    1fdc:	13 82       	std	Z+3, r1	; 0x03
	//----------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
    1fde:	80 e0       	ldi	r24, 0x00	; 0
		}
		case Arg_type::ARG_S32:
		{
			//Write zero inside the argument
			f_ret = this -> set_arg<int32_t>( arg_index, (int32_t)0 );
			break;
    1fe0:	08 95       	ret
		}
		//if: type is not handled
		default:
		{
			this -> error_handler( Err_codes::ERR_UNHANDLED_ARG_TYPE );
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d\n", __LINE__, arg_type_index);
			return true; //FAIL
    1fe8:	81 e0       	ldi	r24, 0x01	; 1

	//Trace Return vith return value
	DRETURN_ARG("Success: %x\n", f_ret);

	return f_ret; //OK
}	//end method: add_arg | uint8_t
    1fea:	08 95       	ret

00001fec <_ZN9Orangebot9Uniparser16execute_callbackEPv>:
//!	(arg type limit)
//! Calls work equally with signed or unsiged arguments
/***************************************************************************/

bool Uniparser::execute_callback( void *callback_ptr )
{
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	fb 01       	movw	r30, r22
	///--------------------------------------------------------------------------

	//Argument index counter
	uint8_t arg_cnt = 0;
	//Number of arguments
	uint8_t arg_num_types = this -> g_arg_fsm_status.num_arg;
    1ffc:	ec 01       	movw	r28, r24
    1ffe:	cb 59       	subi	r28, 0x9B	; 155
    2000:	df 4f       	sbci	r29, 0xFF	; 255
    2002:	98 81       	ld	r25, Y
    2004:	96 95       	lsr	r25
    2006:	97 70       	andi	r25, 0x07	; 7
	//Count the index of the current argument type being decoded
	uint8_t arg_type_cnt = 0;
	//Link argument type vector
	Arg_type *arg_type = this -> g_arg_type;
    2008:	21 96       	adiw	r28, 0x01	; 1
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//if: no arguments
	if (arg_num_types == 0)
    200a:	91 11       	cpse	r25, r1
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x28>
		///--------------------------------------------------------------------------

		//Declare specialized function pointer and link it to the general registered function callback address
		FUNCTION_PTR_VAR( f_ptr, void ) = FUNCTION_PTR_CAST(void)callback_ptr;
		//Execute function from its specialized pointer
		FUNCTION_PTR_EXE_VOID( f_ptr );
    200e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	7f c7       	rjmp	.+3838   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
		//Execute function from its specialized pointer
		FUNCTION_PTR_EXE_VOID( f_ptr );
		DPRINT("Executing void -> void: %p | Args: NONE \n", (void *)f_ptr );
	}
	//if: first argument is U8 or S8
	else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2014:	28 81       	ld	r18, Y
    2016:	25 37       	cpi	r18, 0x75	; 117
    2018:	19 f0       	breq	.+6      	; 0x2020 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x34>
    201a:	23 37       	cpi	r18, 0x73	; 115
    201c:	09 f0       	breq	.+2      	; 0x2020 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x34>
    201e:	2a c3       	rjmp	.+1620   	; 0x2674 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x688>
		//Accumulate argument size
		arg_cnt += Arg_size::ARG_U8_SIZE;
		//I decoded an argument
		arg_type_cnt++;
		//If: it's the only argument
		if (arg_num_types == arg_type_cnt)
    2020:	91 30       	cpi	r25, 0x01	; 1
    2022:	31 f4       	brne	.+12     	; 0x2030 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x44>
			///--------------------------------------------------------------------------

			//Declare specialized function pointer and link it to the general registered function callback address
			FUNCTION_PTR_VAR( f_ptr, uint8_t ) = FUNCTION_PTR_CAST( uint8_t )callback_ptr;
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
    2024:	a6 59       	subi	r26, 0x96	; 150
    2026:	bf 4f       	sbci	r27, 0xFF	; 255
    2028:	8c 91       	ld	r24, X
    202a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	71 c7       	rjmp	.+3810   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
			DPRINT("Executing uint8_t -> void: %p | Args: %d \n", (void *)f_ptr, (*arg_a_ptr) );
		}	//End If: it's the only argument
		//if: second argument is U8 or S8
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	85 37       	cpi	r24, 0x75	; 117
    2034:	19 f0       	breq	.+6      	; 0x203c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x50>
    2036:	83 37       	cpi	r24, 0x73	; 115
    2038:	09 f0       	breq	.+2      	; 0x203c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x50>
    203a:	35 c1       	rjmp	.+618    	; 0x22a6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ba>
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U8_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    203c:	92 30       	cpi	r25, 0x02	; 2
    203e:	51 f4       	brne	.+20     	; 0x2054 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x68>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2040:	ed 01       	movw	r28, r26
    2042:	c5 59       	subi	r28, 0x95	; 149
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	68 81       	ld	r22, Y
    2048:	a6 59       	subi	r26, 0x96	; 150
    204a:	bf 4f       	sbci	r27, 0xFF	; 255
    204c:	8c 91       	ld	r24, X
    204e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	5f c7       	rjmp	.+3774   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint8_t, uint8_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	85 37       	cpi	r24, 0x75	; 117
    2058:	19 f0       	breq	.+6      	; 0x2060 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x74>
    205a:	83 37       	cpi	r24, 0x73	; 115
    205c:	09 f0       	breq	.+2      	; 0x2060 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x74>
    205e:	58 c0       	rjmp	.+176    	; 0x2110 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x124>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2060:	93 30       	cpi	r25, 0x03	; 3
    2062:	61 f4       	brne	.+24     	; 0x207c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x90>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2064:	ed 01       	movw	r28, r26
    2066:	c4 59       	subi	r28, 0x94	; 148
    2068:	df 4f       	sbci	r29, 0xFF	; 255
    206a:	48 81       	ld	r20, Y
    206c:	21 97       	sbiw	r28, 0x01	; 1
    206e:	68 81       	ld	r22, Y
    2070:	a6 59       	subi	r26, 0x96	; 150
    2072:	bf 4f       	sbci	r27, 0xFF	; 255
    2074:	8c 91       	ld	r24, X
    2076:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	4b c7       	rjmp	.+3734   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	85 37       	cpi	r24, 0x75	; 117
    2080:	11 f0       	breq	.+4      	; 0x2086 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9a>
    2082:	83 37       	cpi	r24, 0x73	; 115
    2084:	89 f4       	brne	.+34     	; 0x20a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbc>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2086:	94 30       	cpi	r25, 0x04	; 4
    2088:	09 f0       	breq	.+2      	; 0x208c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa0>
    208a:	06 c7       	rjmp	.+3596   	; 0x2e98 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeac>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    208c:	ed 01       	movw	r28, r26
    208e:	c3 59       	subi	r28, 0x93	; 147
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	28 81       	ld	r18, Y
    2094:	21 97       	sbiw	r28, 0x01	; 1
    2096:	48 81       	ld	r20, Y
    2098:	21 97       	sbiw	r28, 0x01	; 1
    209a:	68 81       	ld	r22, Y
    209c:	a6 59       	subi	r26, 0x96	; 150
    209e:	bf 4f       	sbci	r27, 0xFF	; 255
    20a0:	8c 91       	ld	r24, X
    20a2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	35 c7       	rjmp	.+3690   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    20a8:	85 35       	cpi	r24, 0x55	; 85
    20aa:	11 f0       	breq	.+4      	; 0x20b0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc4>
    20ac:	83 35       	cpi	r24, 0x53	; 83
    20ae:	91 f4       	brne	.+36     	; 0x20d4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe8>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    20b0:	ed 01       	movw	r28, r26
    20b2:	c3 59       	subi	r28, 0x93	; 147
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    20b6:	94 30       	cpi	r25, 0x04	; 4
    20b8:	09 f0       	breq	.+2      	; 0x20bc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd0>
    20ba:	f0 c6       	rjmp	.+3552   	; 0x2e9c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeb0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    20bc:	28 81       	ld	r18, Y
    20be:	39 81       	ldd	r19, Y+1	; 0x01
    20c0:	21 97       	sbiw	r28, 0x01	; 1
    20c2:	48 81       	ld	r20, Y
    20c4:	21 97       	sbiw	r28, 0x01	; 1
    20c6:	68 81       	ld	r22, Y
    20c8:	a6 59       	subi	r26, 0x96	; 150
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	8c 91       	ld	r24, X
    20ce:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	1f c7       	rjmp	.+3646   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    20d4:	84 34       	cpi	r24, 0x44	; 68
    20d6:	11 f0       	breq	.+4      	; 0x20dc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf0>
    20d8:	84 36       	cpi	r24, 0x64	; 100
    20da:	a1 f4       	brne	.+40     	; 0x2104 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x118>
				{
					//Decode second argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    20dc:	ed 01       	movw	r28, r26
    20de:	c3 59       	subi	r28, 0x93	; 147
    20e0:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    20e2:	94 30       	cpi	r25, 0x04	; 4
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xfc>
    20e6:	dc c6       	rjmp	.+3512   	; 0x2ea0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeb4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint8_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    20e8:	08 81       	ld	r16, Y
    20ea:	19 81       	ldd	r17, Y+1	; 0x01
    20ec:	2a 81       	ldd	r18, Y+2	; 0x02
    20ee:	3b 81       	ldd	r19, Y+3	; 0x03
    20f0:	21 97       	sbiw	r28, 0x01	; 1
    20f2:	48 81       	ld	r20, Y
    20f4:	21 97       	sbiw	r28, 0x01	; 1
    20f6:	68 81       	ld	r22, Y
    20f8:	a6 59       	subi	r26, 0x96	; 150
    20fa:	bf 4f       	sbci	r27, 0xFF	; 255
    20fc:	8c 91       	ld	r24, X
    20fe:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	07 c7       	rjmp	.+3598   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2104:	63 e0       	ldi	r22, 0x03	; 3
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	01 c7       	rjmp	.+3586   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2110:	85 35       	cpi	r24, 0x55	; 85
    2112:	19 f0       	breq	.+6      	; 0x211a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x12e>
    2114:	83 35       	cpi	r24, 0x53	; 83
    2116:	09 f0       	breq	.+2      	; 0x211a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x12e>
    2118:	63 c0       	rjmp	.+198    	; 0x21e0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1f4>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    211a:	ad 01       	movw	r20, r26
    211c:	44 59       	subi	r20, 0x94	; 148
    211e:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2120:	93 30       	cpi	r25, 0x03	; 3
    2122:	59 f4       	brne	.+22     	; 0x213a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x14e>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2124:	ea 01       	movw	r28, r20
    2126:	48 81       	ld	r20, Y
    2128:	59 81       	ldd	r21, Y+1	; 0x01
    212a:	21 97       	sbiw	r28, 0x01	; 1
    212c:	68 81       	ld	r22, Y
    212e:	a6 59       	subi	r26, 0x96	; 150
    2130:	bf 4f       	sbci	r27, 0xFF	; 255
    2132:	8c 91       	ld	r24, X
    2134:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	ec c6       	rjmp	.+3544   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	85 37       	cpi	r24, 0x75	; 117
    213e:	11 f0       	breq	.+4      	; 0x2144 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x158>
    2140:	83 37       	cpi	r24, 0x73	; 115
    2142:	a1 f4       	brne	.+40     	; 0x216c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x180>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2144:	94 30       	cpi	r25, 0x04	; 4
    2146:	09 f0       	breq	.+2      	; 0x214a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x15e>
    2148:	ad c6       	rjmp	.+3418   	; 0x2ea4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeb8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    214a:	ed 01       	movw	r28, r26
    214c:	c2 59       	subi	r28, 0x92	; 146
    214e:	df 4f       	sbci	r29, 0xFF	; 255
    2150:	28 81       	ld	r18, Y
    2152:	ea 01       	movw	r28, r20
    2154:	48 81       	ld	r20, Y
    2156:	59 81       	ldd	r21, Y+1	; 0x01
    2158:	ed 01       	movw	r28, r26
    215a:	c5 59       	subi	r28, 0x95	; 149
    215c:	df 4f       	sbci	r29, 0xFF	; 255
    215e:	68 81       	ld	r22, Y
    2160:	a6 59       	subi	r26, 0x96	; 150
    2162:	bf 4f       	sbci	r27, 0xFF	; 255
    2164:	8c 91       	ld	r24, X
    2166:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	d3 c6       	rjmp	.+3494   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    216c:	85 35       	cpi	r24, 0x55	; 85
    216e:	11 f0       	breq	.+4      	; 0x2174 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x188>
    2170:	83 35       	cpi	r24, 0x53	; 83
    2172:	a9 f4       	brne	.+42     	; 0x219e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1b2>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2174:	ed 01       	movw	r28, r26
    2176:	c2 59       	subi	r28, 0x92	; 146
    2178:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    217a:	94 30       	cpi	r25, 0x04	; 4
    217c:	09 f0       	breq	.+2      	; 0x2180 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x194>
    217e:	94 c6       	rjmp	.+3368   	; 0x2ea8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xebc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2180:	28 81       	ld	r18, Y
    2182:	39 81       	ldd	r19, Y+1	; 0x01
    2184:	ea 01       	movw	r28, r20
    2186:	48 81       	ld	r20, Y
    2188:	59 81       	ldd	r21, Y+1	; 0x01
    218a:	ed 01       	movw	r28, r26
    218c:	c5 59       	subi	r28, 0x95	; 149
    218e:	df 4f       	sbci	r29, 0xFF	; 255
    2190:	68 81       	ld	r22, Y
    2192:	a6 59       	subi	r26, 0x96	; 150
    2194:	bf 4f       	sbci	r27, 0xFF	; 255
    2196:	8c 91       	ld	r24, X
    2198:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	ba c6       	rjmp	.+3444   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    219e:	84 34       	cpi	r24, 0x44	; 68
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1ba>
    21a2:	84 36       	cpi	r24, 0x64	; 100
    21a4:	b9 f4       	brne	.+46     	; 0x21d4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1e8>
				{
					//Decode second argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    21a6:	ed 01       	movw	r28, r26
    21a8:	c2 59       	subi	r28, 0x92	; 146
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    21ac:	94 30       	cpi	r25, 0x04	; 4
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1c6>
    21b0:	7d c6       	rjmp	.+3322   	; 0x2eac <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xec0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint16_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    21b2:	08 81       	ld	r16, Y
    21b4:	19 81       	ldd	r17, Y+1	; 0x01
    21b6:	2a 81       	ldd	r18, Y+2	; 0x02
    21b8:	3b 81       	ldd	r19, Y+3	; 0x03
    21ba:	ea 01       	movw	r28, r20
    21bc:	48 81       	ld	r20, Y
    21be:	59 81       	ldd	r21, Y+1	; 0x01
    21c0:	ed 01       	movw	r28, r26
    21c2:	c5 59       	subi	r28, 0x95	; 149
    21c4:	df 4f       	sbci	r29, 0xFF	; 255
    21c6:	68 81       	ld	r22, Y
    21c8:	a6 59       	subi	r26, 0x96	; 150
    21ca:	bf 4f       	sbci	r27, 0xFF	; 255
    21cc:	8c 91       	ld	r24, X
    21ce:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	9f c6       	rjmp	.+3390   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    21d4:	63 e0       	ldi	r22, 0x03	; 3
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	99 c6       	rjmp	.+3378   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    21e0:	84 34       	cpi	r24, 0x44	; 68
    21e2:	19 f0       	breq	.+6      	; 0x21ea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1fe>
    21e4:	84 36       	cpi	r24, 0x64	; 100
    21e6:	09 f0       	breq	.+2      	; 0x21ea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x1fe>
    21e8:	58 c0       	rjmp	.+176    	; 0x229a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ae>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    21ea:	9d 01       	movw	r18, r26
    21ec:	24 59       	subi	r18, 0x94	; 148
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    21f0:	93 30       	cpi	r25, 0x03	; 3
    21f2:	69 f4       	brne	.+26     	; 0x220e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x222>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    21f4:	e9 01       	movw	r28, r18
    21f6:	28 81       	ld	r18, Y
    21f8:	39 81       	ldd	r19, Y+1	; 0x01
    21fa:	4a 81       	ldd	r20, Y+2	; 0x02
    21fc:	5b 81       	ldd	r21, Y+3	; 0x03
    21fe:	21 97       	sbiw	r28, 0x01	; 1
    2200:	68 81       	ld	r22, Y
    2202:	a6 59       	subi	r26, 0x96	; 150
    2204:	bf 4f       	sbci	r27, 0xFF	; 255
    2206:	8c 91       	ld	r24, X
    2208:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	82 c6       	rjmp	.+3332   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint8_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	85 37       	cpi	r24, 0x75	; 117
    2212:	11 f0       	breq	.+4      	; 0x2218 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x22c>
    2214:	83 37       	cpi	r24, 0x73	; 115
    2216:	b1 f4       	brne	.+44     	; 0x2244 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x258>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2218:	94 30       	cpi	r25, 0x04	; 4
    221a:	09 f0       	breq	.+2      	; 0x221e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x232>
    221c:	49 c6       	rjmp	.+3218   	; 0x2eb0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xec4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint32_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    221e:	ed 01       	movw	r28, r26
    2220:	c0 59       	subi	r28, 0x90	; 144
    2222:	df 4f       	sbci	r29, 0xFF	; 255
    2224:	08 81       	ld	r16, Y
    2226:	e9 01       	movw	r28, r18
    2228:	28 81       	ld	r18, Y
    222a:	39 81       	ldd	r19, Y+1	; 0x01
    222c:	4a 81       	ldd	r20, Y+2	; 0x02
    222e:	5b 81       	ldd	r21, Y+3	; 0x03
    2230:	ed 01       	movw	r28, r26
    2232:	c5 59       	subi	r28, 0x95	; 149
    2234:	df 4f       	sbci	r29, 0xFF	; 255
    2236:	68 81       	ld	r22, Y
    2238:	a6 59       	subi	r26, 0x96	; 150
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	8c 91       	ld	r24, X
    223e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	67 c6       	rjmp	.+3278   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2244:	85 35       	cpi	r24, 0x55	; 85
    2246:	11 f0       	breq	.+4      	; 0x224c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x260>
    2248:	83 35       	cpi	r24, 0x53	; 83
    224a:	b9 f4       	brne	.+46     	; 0x227a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x28e>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    224c:	ed 01       	movw	r28, r26
    224e:	c0 59       	subi	r28, 0x90	; 144
    2250:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2252:	94 30       	cpi	r25, 0x04	; 4
    2254:	09 f0       	breq	.+2      	; 0x2258 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x26c>
    2256:	2e c6       	rjmp	.+3164   	; 0x2eb4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xec8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint8_t, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint8_t, uint32_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2258:	08 81       	ld	r16, Y
    225a:	19 81       	ldd	r17, Y+1	; 0x01
    225c:	e9 01       	movw	r28, r18
    225e:	28 81       	ld	r18, Y
    2260:	39 81       	ldd	r19, Y+1	; 0x01
    2262:	4a 81       	ldd	r20, Y+2	; 0x02
    2264:	5b 81       	ldd	r21, Y+3	; 0x03
    2266:	ed 01       	movw	r28, r26
    2268:	c5 59       	subi	r28, 0x95	; 149
    226a:	df 4f       	sbci	r29, 0xFF	; 255
    226c:	68 81       	ld	r22, Y
    226e:	a6 59       	subi	r26, 0x96	; 150
    2270:	bf 4f       	sbci	r27, 0xFF	; 255
    2272:	8c 91       	ld	r24, X
    2274:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	4c c6       	rjmp	.+3224   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint8_t, uint32_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    227a:	84 34       	cpi	r24, 0x44	; 68
    227c:	11 f0       	breq	.+4      	; 0x2282 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x296>
    227e:	84 36       	cpi	r24, 0x64	; 100
    2280:	31 f4       	brne	.+12     	; 0x228e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2a2>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2282:	62 e0       	ldi	r22, 0x02	; 2
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	42 c6       	rjmp	.+3204   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    228e:	63 e0       	ldi	r22, 0x03	; 3
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	3c c6       	rjmp	.+3192   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    229a:	64 e0       	ldi	r22, 0x04	; 4
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	36 c6       	rjmp	.+3180   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U8 or S8
		//if: second argument is U16 or S16
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    22a6:	85 35       	cpi	r24, 0x55	; 85
    22a8:	19 f0       	breq	.+6      	; 0x22b0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2c4>
    22aa:	83 35       	cpi	r24, 0x53	; 83
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2c4>
    22ae:	18 c1       	rjmp	.+560    	; 0x24e0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4f4>
		{
			//Decode second argument
			uint16_t *arg_b_ptr = ARG_CAST( arg_cnt, uint16_t );
    22b0:	bd 01       	movw	r22, r26
    22b2:	65 59       	subi	r22, 0x95	; 149
    22b4:	7f 4f       	sbci	r23, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U16_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    22b6:	92 30       	cpi	r25, 0x02	; 2
    22b8:	49 f4       	brne	.+18     	; 0x22cc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2e0>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    22ba:	eb 01       	movw	r28, r22
    22bc:	68 81       	ld	r22, Y
    22be:	79 81       	ldd	r23, Y+1	; 0x01
    22c0:	a6 59       	subi	r26, 0x96	; 150
    22c2:	bf 4f       	sbci	r27, 0xFF	; 255
    22c4:	8c 91       	ld	r24, X
    22c6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	23 c6       	rjmp	.+3142   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint8_t, uint16_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	85 37       	cpi	r24, 0x75	; 117
    22d0:	19 f0       	breq	.+6      	; 0x22d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ec>
    22d2:	83 37       	cpi	r24, 0x73	; 115
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x2ec>
    22d6:	5c c0       	rjmp	.+184    	; 0x2390 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3a4>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    22d8:	93 30       	cpi	r25, 0x03	; 3
    22da:	69 f4       	brne	.+26     	; 0x22f6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x30a>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    22dc:	ed 01       	movw	r28, r26
    22de:	c3 59       	subi	r28, 0x93	; 147
    22e0:	df 4f       	sbci	r29, 0xFF	; 255
    22e2:	48 81       	ld	r20, Y
    22e4:	eb 01       	movw	r28, r22
    22e6:	68 81       	ld	r22, Y
    22e8:	79 81       	ldd	r23, Y+1	; 0x01
    22ea:	a6 59       	subi	r26, 0x96	; 150
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	8c 91       	ld	r24, X
    22f0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	0e c6       	rjmp	.+3100   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	85 37       	cpi	r24, 0x75	; 117
    22fa:	11 f0       	breq	.+4      	; 0x2300 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x314>
    22fc:	83 37       	cpi	r24, 0x73	; 115
    22fe:	91 f4       	brne	.+36     	; 0x2324 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x338>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2300:	94 30       	cpi	r25, 0x04	; 4
    2302:	09 f0       	breq	.+2      	; 0x2306 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x31a>
    2304:	d9 c5       	rjmp	.+2994   	; 0x2eb8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xecc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2306:	ed 01       	movw	r28, r26
    2308:	c2 59       	subi	r28, 0x92	; 146
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	28 81       	ld	r18, Y
    230e:	21 97       	sbiw	r28, 0x01	; 1
    2310:	48 81       	ld	r20, Y
    2312:	eb 01       	movw	r28, r22
    2314:	68 81       	ld	r22, Y
    2316:	79 81       	ldd	r23, Y+1	; 0x01
    2318:	a6 59       	subi	r26, 0x96	; 150
    231a:	bf 4f       	sbci	r27, 0xFF	; 255
    231c:	8c 91       	ld	r24, X
    231e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	f7 c5       	rjmp	.+3054   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2324:	85 35       	cpi	r24, 0x55	; 85
    2326:	11 f0       	breq	.+4      	; 0x232c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x340>
    2328:	83 35       	cpi	r24, 0x53	; 83
    232a:	99 f4       	brne	.+38     	; 0x2352 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x366>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    232c:	ed 01       	movw	r28, r26
    232e:	c2 59       	subi	r28, 0x92	; 146
    2330:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2332:	94 30       	cpi	r25, 0x04	; 4
    2334:	09 f0       	breq	.+2      	; 0x2338 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x34c>
    2336:	c2 c5       	rjmp	.+2948   	; 0x2ebc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xed0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2338:	28 81       	ld	r18, Y
    233a:	39 81       	ldd	r19, Y+1	; 0x01
    233c:	21 97       	sbiw	r28, 0x01	; 1
    233e:	48 81       	ld	r20, Y
    2340:	eb 01       	movw	r28, r22
    2342:	68 81       	ld	r22, Y
    2344:	79 81       	ldd	r23, Y+1	; 0x01
    2346:	a6 59       	subi	r26, 0x96	; 150
    2348:	bf 4f       	sbci	r27, 0xFF	; 255
    234a:	8c 91       	ld	r24, X
    234c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	e0 c5       	rjmp	.+3008   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2352:	84 34       	cpi	r24, 0x44	; 68
    2354:	11 f0       	breq	.+4      	; 0x235a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x36e>
    2356:	84 36       	cpi	r24, 0x64	; 100
    2358:	a9 f4       	brne	.+42     	; 0x2384 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x398>
				{
					//Decode fourth argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    235a:	ed 01       	movw	r28, r26
    235c:	c2 59       	subi	r28, 0x92	; 146
    235e:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2360:	94 30       	cpi	r25, 0x04	; 4
    2362:	09 f0       	breq	.+2      	; 0x2366 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x37a>
    2364:	ad c5       	rjmp	.+2906   	; 0x2ec0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xed4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint8_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2366:	08 81       	ld	r16, Y
    2368:	19 81       	ldd	r17, Y+1	; 0x01
    236a:	2a 81       	ldd	r18, Y+2	; 0x02
    236c:	3b 81       	ldd	r19, Y+3	; 0x03
    236e:	21 97       	sbiw	r28, 0x01	; 1
    2370:	48 81       	ld	r20, Y
    2372:	eb 01       	movw	r28, r22
    2374:	68 81       	ld	r22, Y
    2376:	79 81       	ldd	r23, Y+1	; 0x01
    2378:	a6 59       	subi	r26, 0x96	; 150
    237a:	bf 4f       	sbci	r27, 0xFF	; 255
    237c:	8c 91       	ld	r24, X
    237e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	c7 c5       	rjmp	.+2958   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2384:	63 e0       	ldi	r22, 0x03	; 3
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	c1 c5       	rjmp	.+2946   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2390:	85 35       	cpi	r24, 0x55	; 85
    2392:	19 f0       	breq	.+6      	; 0x239a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3ae>
    2394:	83 35       	cpi	r24, 0x53	; 83
    2396:	09 f0       	breq	.+2      	; 0x239a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3ae>
    2398:	51 c0       	rjmp	.+162    	; 0x243c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x450>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    239a:	ad 01       	movw	r20, r26
    239c:	43 59       	subi	r20, 0x93	; 147
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    23a0:	93 30       	cpi	r25, 0x03	; 3
    23a2:	61 f4       	brne	.+24     	; 0x23bc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3d0>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    23a4:	ea 01       	movw	r28, r20
    23a6:	48 81       	ld	r20, Y
    23a8:	59 81       	ldd	r21, Y+1	; 0x01
    23aa:	eb 01       	movw	r28, r22
    23ac:	68 81       	ld	r22, Y
    23ae:	79 81       	ldd	r23, Y+1	; 0x01
    23b0:	a6 59       	subi	r26, 0x96	; 150
    23b2:	bf 4f       	sbci	r27, 0xFF	; 255
    23b4:	8c 91       	ld	r24, X
    23b6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	ab c5       	rjmp	.+2902   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	85 37       	cpi	r24, 0x75	; 117
    23c0:	11 f0       	breq	.+4      	; 0x23c6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3da>
    23c2:	83 37       	cpi	r24, 0x73	; 115
    23c4:	99 f4       	brne	.+38     	; 0x23ec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x400>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    23c6:	94 30       	cpi	r25, 0x04	; 4
    23c8:	09 f0       	breq	.+2      	; 0x23cc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x3e0>
    23ca:	7c c5       	rjmp	.+2808   	; 0x2ec4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xed8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    23cc:	ed 01       	movw	r28, r26
    23ce:	c1 59       	subi	r28, 0x91	; 145
    23d0:	df 4f       	sbci	r29, 0xFF	; 255
    23d2:	28 81       	ld	r18, Y
    23d4:	ea 01       	movw	r28, r20
    23d6:	48 81       	ld	r20, Y
    23d8:	59 81       	ldd	r21, Y+1	; 0x01
    23da:	eb 01       	movw	r28, r22
    23dc:	68 81       	ld	r22, Y
    23de:	79 81       	ldd	r23, Y+1	; 0x01
    23e0:	a6 59       	subi	r26, 0x96	; 150
    23e2:	bf 4f       	sbci	r27, 0xFF	; 255
    23e4:	8c 91       	ld	r24, X
    23e6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	93 c5       	rjmp	.+2854   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    23ec:	85 35       	cpi	r24, 0x55	; 85
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x408>
    23f0:	83 35       	cpi	r24, 0x53	; 83
    23f2:	a1 f4       	brne	.+40     	; 0x241c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x430>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    23f4:	ed 01       	movw	r28, r26
    23f6:	c1 59       	subi	r28, 0x91	; 145
    23f8:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    23fa:	94 30       	cpi	r25, 0x04	; 4
    23fc:	09 f0       	breq	.+2      	; 0x2400 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x414>
    23fe:	64 c5       	rjmp	.+2760   	; 0x2ec8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xedc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2400:	28 81       	ld	r18, Y
    2402:	39 81       	ldd	r19, Y+1	; 0x01
    2404:	ea 01       	movw	r28, r20
    2406:	48 81       	ld	r20, Y
    2408:	59 81       	ldd	r21, Y+1	; 0x01
    240a:	eb 01       	movw	r28, r22
    240c:	68 81       	ld	r22, Y
    240e:	79 81       	ldd	r23, Y+1	; 0x01
    2410:	a6 59       	subi	r26, 0x96	; 150
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	8c 91       	ld	r24, X
    2416:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	7b c5       	rjmp	.+2806   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    241c:	84 34       	cpi	r24, 0x44	; 68
    241e:	11 f0       	breq	.+4      	; 0x2424 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x438>
    2420:	84 36       	cpi	r24, 0x64	; 100
    2422:	31 f4       	brne	.+12     	; 0x2430 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x444>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2424:	62 e0       	ldi	r22, 0x02	; 2
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	71 c5       	rjmp	.+2786   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2430:	63 e0       	ldi	r22, 0x03	; 3
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	6b c5       	rjmp	.+2774   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    243c:	84 34       	cpi	r24, 0x44	; 68
    243e:	19 f0       	breq	.+6      	; 0x2446 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x45a>
    2440:	84 36       	cpi	r24, 0x64	; 100
    2442:	09 f0       	breq	.+2      	; 0x2446 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x45a>
    2444:	47 c0       	rjmp	.+142    	; 0x24d4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4e8>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    2446:	9d 01       	movw	r18, r26
    2448:	23 59       	subi	r18, 0x93	; 147
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    244c:	93 30       	cpi	r25, 0x03	; 3
    244e:	71 f4       	brne	.+28     	; 0x246c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x480>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2450:	e9 01       	movw	r28, r18
    2452:	28 81       	ld	r18, Y
    2454:	39 81       	ldd	r19, Y+1	; 0x01
    2456:	4a 81       	ldd	r20, Y+2	; 0x02
    2458:	5b 81       	ldd	r21, Y+3	; 0x03
    245a:	eb 01       	movw	r28, r22
    245c:	68 81       	ld	r22, Y
    245e:	79 81       	ldd	r23, Y+1	; 0x01
    2460:	a6 59       	subi	r26, 0x96	; 150
    2462:	bf 4f       	sbci	r27, 0xFF	; 255
    2464:	8c 91       	ld	r24, X
    2466:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	53 c5       	rjmp	.+2726   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint16_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	85 37       	cpi	r24, 0x75	; 117
    2470:	11 f0       	breq	.+4      	; 0x2476 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x48a>
    2472:	83 37       	cpi	r24, 0x73	; 115
    2474:	a9 f4       	brne	.+42     	; 0x24a0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4b4>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2476:	94 30       	cpi	r25, 0x04	; 4
    2478:	09 f0       	breq	.+2      	; 0x247c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x490>
    247a:	28 c5       	rjmp	.+2640   	; 0x2ecc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xee0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint16_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint16_t, uint32_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    247c:	ed 01       	movw	r28, r26
    247e:	cf 58       	subi	r28, 0x8F	; 143
    2480:	df 4f       	sbci	r29, 0xFF	; 255
    2482:	08 81       	ld	r16, Y
    2484:	e9 01       	movw	r28, r18
    2486:	28 81       	ld	r18, Y
    2488:	39 81       	ldd	r19, Y+1	; 0x01
    248a:	4a 81       	ldd	r20, Y+2	; 0x02
    248c:	5b 81       	ldd	r21, Y+3	; 0x03
    248e:	eb 01       	movw	r28, r22
    2490:	68 81       	ld	r22, Y
    2492:	79 81       	ldd	r23, Y+1	; 0x01
    2494:	a6 59       	subi	r26, 0x96	; 150
    2496:	bf 4f       	sbci	r27, 0xFF	; 255
    2498:	8c 91       	ld	r24, X
    249a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	39 c5       	rjmp	.+2674   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint16_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    24a0:	85 35       	cpi	r24, 0x55	; 85
    24a2:	11 f0       	breq	.+4      	; 0x24a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4bc>
    24a4:	83 35       	cpi	r24, 0x53	; 83
    24a6:	31 f4       	brne	.+12     	; 0x24b4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4c8>
				{
					this -> error_handler( ERR_ARG_SIZE );
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	2f c5       	rjmp	.+2654   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    24b4:	84 34       	cpi	r24, 0x44	; 68
    24b6:	11 f0       	breq	.+4      	; 0x24bc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4d0>
    24b8:	84 36       	cpi	r24, 0x64	; 100
    24ba:	31 f4       	brne	.+12     	; 0x24c8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4dc>
				{
					this -> error_handler( ERR_ARG_SIZE );
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	25 c5       	rjmp	.+2634   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    24c8:	63 e0       	ldi	r22, 0x03	; 3
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	1f c5       	rjmp	.+2622   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>

			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    24d4:	64 e0       	ldi	r22, 0x04	; 4
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	19 c5       	rjmp	.+2610   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U16 or S16
		//if: second argument is U32 or S32
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    24e0:	84 34       	cpi	r24, 0x44	; 68
    24e2:	19 f0       	breq	.+6      	; 0x24ea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4fe>
    24e4:	84 36       	cpi	r24, 0x64	; 100
    24e6:	09 f0       	breq	.+2      	; 0x24ea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x4fe>
    24e8:	bf c0       	rjmp	.+382    	; 0x2668 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x67c>
		{
			//Decode second argument
			uint32_t *arg_b_ptr = ARG_CAST( arg_cnt, uint32_t );
    24ea:	ad 01       	movw	r20, r26
    24ec:	45 59       	subi	r20, 0x95	; 149
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U32_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    24f0:	92 30       	cpi	r25, 0x02	; 2
    24f2:	59 f4       	brne	.+22     	; 0x250a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x51e>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    24f4:	ea 01       	movw	r28, r20
    24f6:	48 81       	ld	r20, Y
    24f8:	59 81       	ldd	r21, Y+1	; 0x01
    24fa:	6a 81       	ldd	r22, Y+2	; 0x02
    24fc:	7b 81       	ldd	r23, Y+3	; 0x03
    24fe:	a6 59       	subi	r26, 0x96	; 150
    2500:	bf 4f       	sbci	r27, 0xFF	; 255
    2502:	8c 91       	ld	r24, X
    2504:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	04 c5       	rjmp	.+2568   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint8_t, uint32_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if: third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	85 37       	cpi	r24, 0x75	; 117
    250e:	19 f0       	breq	.+6      	; 0x2516 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x52a>
    2510:	83 37       	cpi	r24, 0x73	; 115
    2512:	09 f0       	breq	.+2      	; 0x2516 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x52a>
    2514:	53 c0       	rjmp	.+166    	; 0x25bc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5d0>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2516:	93 30       	cpi	r25, 0x03	; 3
    2518:	79 f4       	brne	.+30     	; 0x2538 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x54c>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    251a:	ed 01       	movw	r28, r26
    251c:	c1 59       	subi	r28, 0x91	; 145
    251e:	df 4f       	sbci	r29, 0xFF	; 255
    2520:	28 81       	ld	r18, Y
    2522:	ea 01       	movw	r28, r20
    2524:	48 81       	ld	r20, Y
    2526:	59 81       	ldd	r21, Y+1	; 0x01
    2528:	6a 81       	ldd	r22, Y+2	; 0x02
    252a:	7b 81       	ldd	r23, Y+3	; 0x03
    252c:	a6 59       	subi	r26, 0x96	; 150
    252e:	bf 4f       	sbci	r27, 0xFF	; 255
    2530:	8c 91       	ld	r24, X
    2532:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	ed c4       	rjmp	.+2522   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	85 37       	cpi	r24, 0x75	; 117
    253c:	11 f0       	breq	.+4      	; 0x2542 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x556>
    253e:	83 37       	cpi	r24, 0x73	; 115
    2540:	a1 f4       	brne	.+40     	; 0x256a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x57e>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2542:	94 30       	cpi	r25, 0x04	; 4
    2544:	09 f0       	breq	.+2      	; 0x2548 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x55c>
    2546:	c4 c4       	rjmp	.+2440   	; 0x2ed0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xee4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2548:	ed 01       	movw	r28, r26
    254a:	c0 59       	subi	r28, 0x90	; 144
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	08 81       	ld	r16, Y
    2550:	21 97       	sbiw	r28, 0x01	; 1
    2552:	28 81       	ld	r18, Y
    2554:	ea 01       	movw	r28, r20
    2556:	48 81       	ld	r20, Y
    2558:	59 81       	ldd	r21, Y+1	; 0x01
    255a:	6a 81       	ldd	r22, Y+2	; 0x02
    255c:	7b 81       	ldd	r23, Y+3	; 0x03
    255e:	a6 59       	subi	r26, 0x96	; 150
    2560:	bf 4f       	sbci	r27, 0xFF	; 255
    2562:	8c 91       	ld	r24, X
    2564:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	d4 c4       	rjmp	.+2472   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint32_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    256a:	85 35       	cpi	r24, 0x55	; 85
    256c:	11 f0       	breq	.+4      	; 0x2572 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x586>
    256e:	83 35       	cpi	r24, 0x53	; 83
    2570:	a9 f4       	brne	.+42     	; 0x259c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5b0>
				{
					//Decode second argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2572:	ed 01       	movw	r28, r26
    2574:	c0 59       	subi	r28, 0x90	; 144
    2576:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2578:	94 30       	cpi	r25, 0x04	; 4
    257a:	09 f0       	breq	.+2      	; 0x257e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x592>
    257c:	ab c4       	rjmp	.+2390   	; 0x2ed4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xee8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    257e:	08 81       	ld	r16, Y
    2580:	19 81       	ldd	r17, Y+1	; 0x01
    2582:	21 97       	sbiw	r28, 0x01	; 1
    2584:	28 81       	ld	r18, Y
    2586:	ea 01       	movw	r28, r20
    2588:	48 81       	ld	r20, Y
    258a:	59 81       	ldd	r21, Y+1	; 0x01
    258c:	6a 81       	ldd	r22, Y+2	; 0x02
    258e:	7b 81       	ldd	r23, Y+3	; 0x03
    2590:	a6 59       	subi	r26, 0x96	; 150
    2592:	bf 4f       	sbci	r27, 0xFF	; 255
    2594:	8c 91       	ld	r24, X
    2596:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	bb c4       	rjmp	.+2422   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint32_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    259c:	84 34       	cpi	r24, 0x44	; 68
    259e:	11 f0       	breq	.+4      	; 0x25a4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5b8>
    25a0:	84 36       	cpi	r24, 0x64	; 100
    25a2:	31 f4       	brne	.+12     	; 0x25b0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5c4>
				{
					this -> error_handler( ERR_ARG_SIZE );
    25a4:	62 e0       	ldi	r22, 0x02	; 2
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	b1 c4       	rjmp	.+2402   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    25b0:	63 e0       	ldi	r22, 0x03	; 3
    25b2:	cd 01       	movw	r24, r26
    25b4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	ab c4       	rjmp	.+2390   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    25bc:	85 35       	cpi	r24, 0x55	; 85
    25be:	19 f0       	breq	.+6      	; 0x25c6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5da>
    25c0:	83 35       	cpi	r24, 0x53	; 83
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x5da>
    25c4:	41 c0       	rjmp	.+130    	; 0x2648 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x65c>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    25c6:	9d 01       	movw	r18, r26
    25c8:	21 59       	subi	r18, 0x91	; 145
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    25cc:	93 30       	cpi	r25, 0x03	; 3
    25ce:	71 f4       	brne	.+28     	; 0x25ec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x600>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    25d0:	e9 01       	movw	r28, r18
    25d2:	28 81       	ld	r18, Y
    25d4:	39 81       	ldd	r19, Y+1	; 0x01
    25d6:	ea 01       	movw	r28, r20
    25d8:	48 81       	ld	r20, Y
    25da:	59 81       	ldd	r21, Y+1	; 0x01
    25dc:	6a 81       	ldd	r22, Y+2	; 0x02
    25de:	7b 81       	ldd	r23, Y+3	; 0x03
    25e0:	a6 59       	subi	r26, 0x96	; 150
    25e2:	bf 4f       	sbci	r27, 0xFF	; 255
    25e4:	8c 91       	ld	r24, X
    25e6:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	93 c4       	rjmp	.+2342   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint8_t, uint32_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	85 37       	cpi	r24, 0x75	; 117
    25f0:	11 f0       	breq	.+4      	; 0x25f6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x60a>
    25f2:	83 37       	cpi	r24, 0x73	; 115
    25f4:	a9 f4       	brne	.+42     	; 0x2620 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x634>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    25f6:	94 30       	cpi	r25, 0x04	; 4
    25f8:	09 f0       	breq	.+2      	; 0x25fc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x610>
    25fa:	6e c4       	rjmp	.+2268   	; 0x2ed8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xeec>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint8_t, uint32_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint8_t, uint32_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    25fc:	ed 01       	movw	r28, r26
    25fe:	cf 58       	subi	r28, 0x8F	; 143
    2600:	df 4f       	sbci	r29, 0xFF	; 255
    2602:	08 81       	ld	r16, Y
    2604:	e9 01       	movw	r28, r18
    2606:	28 81       	ld	r18, Y
    2608:	39 81       	ldd	r19, Y+1	; 0x01
    260a:	ea 01       	movw	r28, r20
    260c:	48 81       	ld	r20, Y
    260e:	59 81       	ldd	r21, Y+1	; 0x01
    2610:	6a 81       	ldd	r22, Y+2	; 0x02
    2612:	7b 81       	ldd	r23, Y+3	; 0x03
    2614:	a6 59       	subi	r26, 0x96	; 150
    2616:	bf 4f       	sbci	r27, 0xFF	; 255
    2618:	8c 91       	ld	r24, X
    261a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	79 c4       	rjmp	.+2290   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint8_t, uint32_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16 or U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2620:	85 35       	cpi	r24, 0x55	; 85
    2622:	31 f0       	breq	.+12     	; 0x2630 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x644>
    2624:	83 35       	cpi	r24, 0x53	; 83
    2626:	21 f0       	breq	.+8      	; 0x2630 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x644>
    2628:	84 34       	cpi	r24, 0x44	; 68
    262a:	11 f0       	breq	.+4      	; 0x2630 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x644>
    262c:	84 36       	cpi	r24, 0x64	; 100
    262e:	31 f4       	brne	.+12     	; 0x263c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x650>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2630:	62 e0       	ldi	r22, 0x02	; 2
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	6b c4       	rjmp	.+2262   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16 or U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    263c:	63 e0       	ldi	r22, 0x03	; 3
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	65 c4       	rjmp	.+2250   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2648:	84 34       	cpi	r24, 0x44	; 68
    264a:	11 f0       	breq	.+4      	; 0x2650 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x664>
    264c:	84 36       	cpi	r24, 0x64	; 100
    264e:	31 f4       	brne	.+12     	; 0x265c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x670>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	5b c4       	rjmp	.+2230   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    265c:	64 e0       	ldi	r22, 0x04	; 4
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	55 c4       	rjmp	.+2218   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled		}
		}	//if: second argument is U32 or S32
		//If: second argument is unhandled
		else
		{
			this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2668:	64 e0       	ldi	r22, 0x04	; 4
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
			return true; //FAIL
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	4f c4       	rjmp	.+2206   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
		} //End If: second argument is unhandled
	}	//end if: first argument is U8 or S8
	//if: first argument is U16 or S16
	else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2674:	25 35       	cpi	r18, 0x55	; 85
    2676:	19 f0       	breq	.+6      	; 0x267e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x692>
    2678:	23 35       	cpi	r18, 0x53	; 83
    267a:	09 f0       	breq	.+2      	; 0x267e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x692>
    267c:	8e c2       	rjmp	.+1308   	; 0x2b9a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbae>
	{
		//Decode first argument
		uint16_t *arg_a_ptr = ARG_CAST( arg_cnt, uint16_t );
    267e:	7d 01       	movw	r14, r26
    2680:	8a e6       	ldi	r24, 0x6A	; 106
    2682:	e8 0e       	add	r14, r24
    2684:	f1 1c       	adc	r15, r1
		//Accumulate argument size
		arg_cnt += Arg_size::ARG_U16_SIZE;
		//I decoded an argument
		arg_type_cnt++;
		//If: it's the only argument
		if (arg_num_types == arg_type_cnt)
    2686:	91 30       	cpi	r25, 0x01	; 1
    2688:	31 f4       	brne	.+12     	; 0x2696 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6aa>
			///--------------------------------------------------------------------------

			//Declare specialized function pointer and link it to the general registered function callback address
			FUNCTION_PTR_VAR( f_ptr, uint16_t ) = FUNCTION_PTR_CAST( uint16_t )callback_ptr;
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
    268a:	d7 01       	movw	r26, r14
    268c:	8d 91       	ld	r24, X+
    268e:	9c 91       	ld	r25, X
    2690:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	3e c4       	rjmp	.+2172   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
			DPRINT("Executing uint16_t -> void: %p | Args: %d \n", (void *)f_ptr, (*arg_a_ptr) );
		}
		//if: second argument is U8 or S8
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	85 37       	cpi	r24, 0x75	; 117
    269a:	19 f0       	breq	.+6      	; 0x26a2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6b6>
    269c:	83 37       	cpi	r24, 0x73	; 115
    269e:	09 f0       	breq	.+2      	; 0x26a2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6b6>
    26a0:	0f c1       	rjmp	.+542    	; 0x28c0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8d4>
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U8_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    26a2:	92 30       	cpi	r25, 0x02	; 2
    26a4:	49 f4       	brne	.+18     	; 0x26b8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6cc>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    26a6:	a4 59       	subi	r26, 0x94	; 148
    26a8:	bf 4f       	sbci	r27, 0xFF	; 255
    26aa:	6c 91       	ld	r22, X
    26ac:	e7 01       	movw	r28, r14
    26ae:	88 81       	ld	r24, Y
    26b0:	99 81       	ldd	r25, Y+1	; 0x01
    26b2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	2d c4       	rjmp	.+2138   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint8_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	85 37       	cpi	r24, 0x75	; 117
    26bc:	19 f0       	breq	.+6      	; 0x26c4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6d8>
    26be:	83 37       	cpi	r24, 0x73	; 115
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6d8>
    26c2:	5c c0       	rjmp	.+184    	; 0x277c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x790>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    26c4:	93 30       	cpi	r25, 0x03	; 3
    26c6:	69 f4       	brne	.+26     	; 0x26e2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x6f6>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    26c8:	ed 01       	movw	r28, r26
    26ca:	c3 59       	subi	r28, 0x93	; 147
    26cc:	df 4f       	sbci	r29, 0xFF	; 255
    26ce:	48 81       	ld	r20, Y
    26d0:	a4 59       	subi	r26, 0x94	; 148
    26d2:	bf 4f       	sbci	r27, 0xFF	; 255
    26d4:	6c 91       	ld	r22, X
    26d6:	d7 01       	movw	r26, r14
    26d8:	8d 91       	ld	r24, X+
    26da:	9c 91       	ld	r25, X
    26dc:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	18 c4       	rjmp	.+2096   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	85 37       	cpi	r24, 0x75	; 117
    26e6:	11 f0       	breq	.+4      	; 0x26ec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x700>
    26e8:	83 37       	cpi	r24, 0x73	; 115
    26ea:	91 f4       	brne	.+36     	; 0x2710 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x724>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    26ec:	94 30       	cpi	r25, 0x04	; 4
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x706>
    26f0:	f5 c3       	rjmp	.+2026   	; 0x2edc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xef0>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    26f2:	ed 01       	movw	r28, r26
    26f4:	c2 59       	subi	r28, 0x92	; 146
    26f6:	df 4f       	sbci	r29, 0xFF	; 255
    26f8:	28 81       	ld	r18, Y
    26fa:	21 97       	sbiw	r28, 0x01	; 1
    26fc:	48 81       	ld	r20, Y
    26fe:	a4 59       	subi	r26, 0x94	; 148
    2700:	bf 4f       	sbci	r27, 0xFF	; 255
    2702:	6c 91       	ld	r22, X
    2704:	e7 01       	movw	r28, r14
    2706:	88 81       	ld	r24, Y
    2708:	99 81       	ldd	r25, Y+1	; 0x01
    270a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	01 c4       	rjmp	.+2050   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2710:	85 35       	cpi	r24, 0x55	; 85
    2712:	11 f0       	breq	.+4      	; 0x2718 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x72c>
    2714:	83 35       	cpi	r24, 0x53	; 83
    2716:	99 f4       	brne	.+38     	; 0x273e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x752>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2718:	ed 01       	movw	r28, r26
    271a:	c2 59       	subi	r28, 0x92	; 146
    271c:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    271e:	94 30       	cpi	r25, 0x04	; 4
    2720:	09 f0       	breq	.+2      	; 0x2724 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x738>
    2722:	de c3       	rjmp	.+1980   	; 0x2ee0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xef4>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2724:	28 81       	ld	r18, Y
    2726:	39 81       	ldd	r19, Y+1	; 0x01
    2728:	21 97       	sbiw	r28, 0x01	; 1
    272a:	48 81       	ld	r20, Y
    272c:	a4 59       	subi	r26, 0x94	; 148
    272e:	bf 4f       	sbci	r27, 0xFF	; 255
    2730:	6c 91       	ld	r22, X
    2732:	d7 01       	movw	r26, r14
    2734:	8d 91       	ld	r24, X+
    2736:	9c 91       	ld	r25, X
    2738:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	ea c3       	rjmp	.+2004   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    273e:	84 34       	cpi	r24, 0x44	; 68
    2740:	11 f0       	breq	.+4      	; 0x2746 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x75a>
    2742:	84 36       	cpi	r24, 0x64	; 100
    2744:	a9 f4       	brne	.+42     	; 0x2770 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x784>
				{
					//Decode fourth argument
					uint32_t *arg_d_ptr = ARG_CAST( arg_cnt, uint32_t );
    2746:	ed 01       	movw	r28, r26
    2748:	c2 59       	subi	r28, 0x92	; 146
    274a:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U32_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    274c:	94 30       	cpi	r25, 0x04	; 4
    274e:	09 f0       	breq	.+2      	; 0x2752 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x766>
    2750:	c9 c3       	rjmp	.+1938   	; 0x2ee4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xef8>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint8_t, uint32_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2752:	08 81       	ld	r16, Y
    2754:	19 81       	ldd	r17, Y+1	; 0x01
    2756:	2a 81       	ldd	r18, Y+2	; 0x02
    2758:	3b 81       	ldd	r19, Y+3	; 0x03
    275a:	21 97       	sbiw	r28, 0x01	; 1
    275c:	48 81       	ld	r20, Y
    275e:	a4 59       	subi	r26, 0x94	; 148
    2760:	bf 4f       	sbci	r27, 0xFF	; 255
    2762:	6c 91       	ld	r22, X
    2764:	e7 01       	movw	r28, r14
    2766:	88 81       	ld	r24, Y
    2768:	99 81       	ldd	r25, Y+1	; 0x01
    276a:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	d1 c3       	rjmp	.+1954   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						DPRINT("Executing uint16_t, uint8_t, uint8_t, uint32_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	cb c3       	rjmp	.+1942   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    277c:	85 35       	cpi	r24, 0x55	; 85
    277e:	19 f0       	breq	.+6      	; 0x2786 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x79a>
    2780:	83 35       	cpi	r24, 0x53	; 83
    2782:	09 f0       	breq	.+2      	; 0x2786 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x79a>
    2784:	51 c0       	rjmp	.+162    	; 0x2828 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x83c>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2786:	ad 01       	movw	r20, r26
    2788:	43 59       	subi	r20, 0x93	; 147
    278a:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    278c:	93 30       	cpi	r25, 0x03	; 3
    278e:	61 f4       	brne	.+24     	; 0x27a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7bc>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2790:	ea 01       	movw	r28, r20
    2792:	48 81       	ld	r20, Y
    2794:	59 81       	ldd	r21, Y+1	; 0x01
    2796:	a4 59       	subi	r26, 0x94	; 148
    2798:	bf 4f       	sbci	r27, 0xFF	; 255
    279a:	6c 91       	ld	r22, X
    279c:	d7 01       	movw	r26, r14
    279e:	8d 91       	ld	r24, X+
    27a0:	9c 91       	ld	r25, X
    27a2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	b5 c3       	rjmp	.+1898   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	85 37       	cpi	r24, 0x75	; 117
    27ac:	11 f0       	breq	.+4      	; 0x27b2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7c6>
    27ae:	83 37       	cpi	r24, 0x73	; 115
    27b0:	99 f4       	brne	.+38     	; 0x27d8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7ec>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    27b2:	94 30       	cpi	r25, 0x04	; 4
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7cc>
    27b6:	98 c3       	rjmp	.+1840   	; 0x2ee8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xefc>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    27b8:	ed 01       	movw	r28, r26
    27ba:	c1 59       	subi	r28, 0x91	; 145
    27bc:	df 4f       	sbci	r29, 0xFF	; 255
    27be:	28 81       	ld	r18, Y
    27c0:	ea 01       	movw	r28, r20
    27c2:	48 81       	ld	r20, Y
    27c4:	59 81       	ldd	r21, Y+1	; 0x01
    27c6:	a4 59       	subi	r26, 0x94	; 148
    27c8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ca:	6c 91       	ld	r22, X
    27cc:	d7 01       	movw	r26, r14
    27ce:	8d 91       	ld	r24, X+
    27d0:	9c 91       	ld	r25, X
    27d2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	9d c3       	rjmp	.+1850   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    27d8:	85 35       	cpi	r24, 0x55	; 85
    27da:	11 f0       	breq	.+4      	; 0x27e0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x7f4>
    27dc:	83 35       	cpi	r24, 0x53	; 83
    27de:	a1 f4       	brne	.+40     	; 0x2808 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x81c>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    27e0:	ed 01       	movw	r28, r26
    27e2:	c1 59       	subi	r28, 0x91	; 145
    27e4:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    27e6:	94 30       	cpi	r25, 0x04	; 4
    27e8:	09 f0       	breq	.+2      	; 0x27ec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x800>
    27ea:	80 c3       	rjmp	.+1792   	; 0x2eec <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf00>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    27ec:	28 81       	ld	r18, Y
    27ee:	39 81       	ldd	r19, Y+1	; 0x01
    27f0:	ea 01       	movw	r28, r20
    27f2:	48 81       	ld	r20, Y
    27f4:	59 81       	ldd	r21, Y+1	; 0x01
    27f6:	a4 59       	subi	r26, 0x94	; 148
    27f8:	bf 4f       	sbci	r27, 0xFF	; 255
    27fa:	6c 91       	ld	r22, X
    27fc:	d7 01       	movw	r26, r14
    27fe:	8d 91       	ld	r24, X+
    2800:	9c 91       	ld	r25, X
    2802:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	85 c3       	rjmp	.+1802   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2808:	84 34       	cpi	r24, 0x44	; 68
    280a:	11 f0       	breq	.+4      	; 0x2810 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x824>
    280c:	84 36       	cpi	r24, 0x64	; 100
    280e:	31 f4       	brne	.+12     	; 0x281c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x830>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	7b c3       	rjmp	.+1782   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    281c:	63 e0       	ldi	r22, 0x03	; 3
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	75 c3       	rjmp	.+1770   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2828:	84 34       	cpi	r24, 0x44	; 68
    282a:	19 f0       	breq	.+6      	; 0x2832 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x846>
    282c:	84 36       	cpi	r24, 0x64	; 100
    282e:	09 f0       	breq	.+2      	; 0x2832 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x846>
    2830:	41 c0       	rjmp	.+130    	; 0x28b4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8c8>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    2832:	9d 01       	movw	r18, r26
    2834:	23 59       	subi	r18, 0x93	; 147
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2838:	93 30       	cpi	r25, 0x03	; 3
    283a:	71 f4       	brne	.+28     	; 0x2858 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x86c>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    283c:	e9 01       	movw	r28, r18
    283e:	28 81       	ld	r18, Y
    2840:	39 81       	ldd	r19, Y+1	; 0x01
    2842:	4a 81       	ldd	r20, Y+2	; 0x02
    2844:	5b 81       	ldd	r21, Y+3	; 0x03
    2846:	a4 59       	subi	r26, 0x94	; 148
    2848:	bf 4f       	sbci	r27, 0xFF	; 255
    284a:	6c 91       	ld	r22, X
    284c:	d7 01       	movw	r26, r14
    284e:	8d 91       	ld	r24, X+
    2850:	9c 91       	ld	r25, X
    2852:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	5d c3       	rjmp	.+1722   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint8_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	85 37       	cpi	r24, 0x75	; 117
    285c:	11 f0       	breq	.+4      	; 0x2862 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x876>
    285e:	83 37       	cpi	r24, 0x73	; 115
    2860:	a9 f4       	brne	.+42     	; 0x288c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8a0>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2862:	94 30       	cpi	r25, 0x04	; 4
    2864:	09 f0       	breq	.+2      	; 0x2868 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x87c>
    2866:	44 c3       	rjmp	.+1672   	; 0x2ef0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf04>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint8_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint8_t, uint32_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2868:	ed 01       	movw	r28, r26
    286a:	cf 58       	subi	r28, 0x8F	; 143
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	08 81       	ld	r16, Y
    2870:	e9 01       	movw	r28, r18
    2872:	28 81       	ld	r18, Y
    2874:	39 81       	ldd	r19, Y+1	; 0x01
    2876:	4a 81       	ldd	r20, Y+2	; 0x02
    2878:	5b 81       	ldd	r21, Y+3	; 0x03
    287a:	a4 59       	subi	r26, 0x94	; 148
    287c:	bf 4f       	sbci	r27, 0xFF	; 255
    287e:	6c 91       	ld	r22, X
    2880:	d7 01       	movw	r26, r14
    2882:	8d 91       	ld	r24, X+
    2884:	9c 91       	ld	r25, X
    2886:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	43 c3       	rjmp	.+1670   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint8_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16 or U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    288c:	85 35       	cpi	r24, 0x55	; 85
    288e:	31 f0       	breq	.+12     	; 0x289c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8b0>
    2890:	83 35       	cpi	r24, 0x53	; 83
    2892:	21 f0       	breq	.+8      	; 0x289c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8b0>
    2894:	84 34       	cpi	r24, 0x44	; 68
    2896:	11 f0       	breq	.+4      	; 0x289c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8b0>
    2898:	84 36       	cpi	r24, 0x64	; 100
    289a:	31 f4       	brne	.+12     	; 0x28a8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8bc>
				{
					this -> error_handler( ERR_ARG_SIZE );
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	35 c3       	rjmp	.+1642   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    28a8:	63 e0       	ldi	r22, 0x03	; 3
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	2f c3       	rjmp	.+1630   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	29 c3       	rjmp	.+1618   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U8 or S8
		//if: second argument is U16 or S16
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    28c0:	85 35       	cpi	r24, 0x55	; 85
    28c2:	19 f0       	breq	.+6      	; 0x28ca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8de>
    28c4:	83 35       	cpi	r24, 0x53	; 83
    28c6:	09 f0       	breq	.+2      	; 0x28ca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8de>
    28c8:	de c0       	rjmp	.+444    	; 0x2a86 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa9a>
		{
			//Decode second argument
			uint16_t *arg_b_ptr = ARG_CAST( arg_cnt, uint16_t );
    28ca:	bd 01       	movw	r22, r26
    28cc:	64 59       	subi	r22, 0x94	; 148
    28ce:	7f 4f       	sbci	r23, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U16_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    28d0:	92 30       	cpi	r25, 0x02	; 2
    28d2:	49 f4       	brne	.+18     	; 0x28e6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x8fa>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    28d4:	eb 01       	movw	r28, r22
    28d6:	68 81       	ld	r22, Y
    28d8:	79 81       	ldd	r23, Y+1	; 0x01
    28da:	d7 01       	movw	r26, r14
    28dc:	8d 91       	ld	r24, X+
    28de:	9c 91       	ld	r25, X
    28e0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	16 c3       	rjmp	.+1580   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint16_t -> void: %p | Args: %d %d\n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	85 37       	cpi	r24, 0x75	; 117
    28ea:	19 f0       	breq	.+6      	; 0x28f2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x906>
    28ec:	83 37       	cpi	r24, 0x73	; 115
    28ee:	09 f0       	breq	.+2      	; 0x28f2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x906>
    28f0:	4e c0       	rjmp	.+156    	; 0x298e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9a2>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    28f2:	93 30       	cpi	r25, 0x03	; 3
    28f4:	61 f4       	brne	.+24     	; 0x290e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x922>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    28f6:	a2 59       	subi	r26, 0x92	; 146
    28f8:	bf 4f       	sbci	r27, 0xFF	; 255
    28fa:	4c 91       	ld	r20, X
    28fc:	eb 01       	movw	r28, r22
    28fe:	68 81       	ld	r22, Y
    2900:	79 81       	ldd	r23, Y+1	; 0x01
    2902:	d7 01       	movw	r26, r14
    2904:	8d 91       	ld	r24, X+
    2906:	9c 91       	ld	r25, X
    2908:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	02 c3       	rjmp	.+1540   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	85 37       	cpi	r24, 0x75	; 117
    2912:	11 f0       	breq	.+4      	; 0x2918 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x92c>
    2914:	83 37       	cpi	r24, 0x73	; 115
    2916:	99 f4       	brne	.+38     	; 0x293e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x952>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2918:	94 30       	cpi	r25, 0x04	; 4
    291a:	09 f0       	breq	.+2      	; 0x291e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x932>
    291c:	eb c2       	rjmp	.+1494   	; 0x2ef4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf08>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    291e:	ed 01       	movw	r28, r26
    2920:	c1 59       	subi	r28, 0x91	; 145
    2922:	df 4f       	sbci	r29, 0xFF	; 255
    2924:	28 81       	ld	r18, Y
    2926:	a2 59       	subi	r26, 0x92	; 146
    2928:	bf 4f       	sbci	r27, 0xFF	; 255
    292a:	4c 91       	ld	r20, X
    292c:	eb 01       	movw	r28, r22
    292e:	68 81       	ld	r22, Y
    2930:	79 81       	ldd	r23, Y+1	; 0x01
    2932:	d7 01       	movw	r26, r14
    2934:	8d 91       	ld	r24, X+
    2936:	9c 91       	ld	r25, X
    2938:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	ea c2       	rjmp	.+1492   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    293e:	85 35       	cpi	r24, 0x55	; 85
    2940:	11 f0       	breq	.+4      	; 0x2946 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x95a>
    2942:	83 35       	cpi	r24, 0x53	; 83
    2944:	a1 f4       	brne	.+40     	; 0x296e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x982>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2946:	ed 01       	movw	r28, r26
    2948:	c1 59       	subi	r28, 0x91	; 145
    294a:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    294c:	94 30       	cpi	r25, 0x04	; 4
    294e:	09 f0       	breq	.+2      	; 0x2952 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x966>
    2950:	d3 c2       	rjmp	.+1446   	; 0x2ef8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf0c>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2952:	28 81       	ld	r18, Y
    2954:	39 81       	ldd	r19, Y+1	; 0x01
    2956:	a2 59       	subi	r26, 0x92	; 146
    2958:	bf 4f       	sbci	r27, 0xFF	; 255
    295a:	4c 91       	ld	r20, X
    295c:	eb 01       	movw	r28, r22
    295e:	68 81       	ld	r22, Y
    2960:	79 81       	ldd	r23, Y+1	; 0x01
    2962:	d7 01       	movw	r26, r14
    2964:	8d 91       	ld	r24, X+
    2966:	9c 91       	ld	r25, X
    2968:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	d2 c2       	rjmp	.+1444   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint16_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    296e:	84 34       	cpi	r24, 0x44	; 68
    2970:	11 f0       	breq	.+4      	; 0x2976 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x98a>
    2972:	84 36       	cpi	r24, 0x64	; 100
    2974:	31 f4       	brne	.+12     	; 0x2982 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x996>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2976:	62 e0       	ldi	r22, 0x02	; 2
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	c8 c2       	rjmp	.+1424   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2982:	63 e0       	ldi	r22, 0x03	; 3
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	c2 c2       	rjmp	.+1412   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    298e:	85 35       	cpi	r24, 0x55	; 85
    2990:	19 f0       	breq	.+6      	; 0x2998 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9ac>
    2992:	83 35       	cpi	r24, 0x53	; 83
    2994:	09 f0       	breq	.+2      	; 0x2998 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9ac>
    2996:	55 c0       	rjmp	.+170    	; 0x2a42 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa56>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2998:	ad 01       	movw	r20, r26
    299a:	42 59       	subi	r20, 0x92	; 146
    299c:	5f 4f       	sbci	r21, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    299e:	93 30       	cpi	r25, 0x03	; 3
    29a0:	61 f4       	brne	.+24     	; 0x29ba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9ce>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    29a2:	ea 01       	movw	r28, r20
    29a4:	48 81       	ld	r20, Y
    29a6:	59 81       	ldd	r21, Y+1	; 0x01
    29a8:	db 01       	movw	r26, r22
    29aa:	6d 91       	ld	r22, X+
    29ac:	7c 91       	ld	r23, X
    29ae:	e7 01       	movw	r28, r14
    29b0:	88 81       	ld	r24, Y
    29b2:	99 81       	ldd	r25, Y+1	; 0x01
    29b4:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	ac c2       	rjmp	.+1368   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	85 37       	cpi	r24, 0x75	; 117
    29be:	11 f0       	breq	.+4      	; 0x29c4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9d8>
    29c0:	83 37       	cpi	r24, 0x73	; 115
    29c2:	91 f4       	brne	.+36     	; 0x29e8 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9fc>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    29c4:	94 30       	cpi	r25, 0x04	; 4
    29c6:	09 f0       	breq	.+2      	; 0x29ca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0x9de>
    29c8:	99 c2       	rjmp	.+1330   	; 0x2efc <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf10>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    29ca:	a0 59       	subi	r26, 0x90	; 144
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
    29ce:	2c 91       	ld	r18, X
    29d0:	da 01       	movw	r26, r20
    29d2:	4d 91       	ld	r20, X+
    29d4:	5c 91       	ld	r21, X
    29d6:	eb 01       	movw	r28, r22
    29d8:	68 81       	ld	r22, Y
    29da:	79 81       	ldd	r23, Y+1	; 0x01
    29dc:	d7 01       	movw	r26, r14
    29de:	8d 91       	ld	r24, X+
    29e0:	9c 91       	ld	r25, X
    29e2:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	95 c2       	rjmp	.+1322   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint16_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    29e8:	85 35       	cpi	r24, 0x55	; 85
    29ea:	11 f0       	breq	.+4      	; 0x29f0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa04>
    29ec:	83 35       	cpi	r24, 0x53	; 83
    29ee:	c9 f4       	brne	.+50     	; 0x2a22 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa36>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    29f0:	ed 01       	movw	r28, r26
    29f2:	c0 59       	subi	r28, 0x90	; 144
    29f4:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    29f6:	94 30       	cpi	r25, 0x04	; 4
    29f8:	71 f4       	brne	.+28     	; 0x2a16 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa2a>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint16_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    29fa:	28 81       	ld	r18, Y
    29fc:	39 81       	ldd	r19, Y+1	; 0x01
    29fe:	ea 01       	movw	r28, r20
    2a00:	48 81       	ld	r20, Y
    2a02:	59 81       	ldd	r21, Y+1	; 0x01
    2a04:	db 01       	movw	r26, r22
    2a06:	6d 91       	ld	r22, X+
    2a08:	7c 91       	ld	r23, X
    2a0a:	e7 01       	movw	r28, r14
    2a0c:	88 81       	ld	r24, Y
    2a0e:	99 81       	ldd	r25, Y+1	; 0x01
    2a10:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2a12:	80 e0       	ldi	r24, 0x00	; 0
					else
					{
						this -> error_handler( ERR_ARG_SIZE );
						DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
						return true; //FAIL
					} //end if fifth argument
    2a14:	7e c2       	rjmp	.+1276   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						DPRINT("Executing uint16_t, uint16_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
					//if: fifth argument
					else
					{
						this -> error_handler( ERR_ARG_SIZE );
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
						DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
						return true; //FAIL
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	78 c2       	rjmp	.+1264   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					} //end if fifth argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2a22:	84 34       	cpi	r24, 0x44	; 68
    2a24:	11 f0       	breq	.+4      	; 0x2a2a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa3e>
    2a26:	84 36       	cpi	r24, 0x64	; 100
    2a28:	31 f4       	brne	.+12     	; 0x2a36 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa4a>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	6e c2       	rjmp	.+1244   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2a36:	63 e0       	ldi	r22, 0x03	; 3
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	68 c2       	rjmp	.+1232   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2a42:	84 34       	cpi	r24, 0x44	; 68
    2a44:	11 f0       	breq	.+4      	; 0x2a4a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa5e>
    2a46:	84 36       	cpi	r24, 0x64	; 100
    2a48:	c1 f4       	brne	.+48     	; 0x2a7a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa8e>
			{
				//Decode second argument
				uint32_t *arg_c_ptr = ARG_CAST( arg_cnt, uint32_t );
    2a4a:	ed 01       	movw	r28, r26
    2a4c:	c2 59       	subi	r28, 0x92	; 146
    2a4e:	df 4f       	sbci	r29, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U32_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2a50:	93 30       	cpi	r25, 0x03	; 3
    2a52:	69 f4       	brne	.+26     	; 0x2a6e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xa82>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint16_t, uint32_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2a54:	28 81       	ld	r18, Y
    2a56:	39 81       	ldd	r19, Y+1	; 0x01
    2a58:	4a 81       	ldd	r20, Y+2	; 0x02
    2a5a:	5b 81       	ldd	r21, Y+3	; 0x03
    2a5c:	db 01       	movw	r26, r22
    2a5e:	6d 91       	ld	r22, X+
    2a60:	7c 91       	ld	r23, X
    2a62:	e7 01       	movw	r28, r14
    2a64:	88 81       	ld	r24, Y
    2a66:	99 81       	ldd	r25, Y+1	; 0x01
    2a68:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
				} //end if fourth argument
    2a6c:	52 c2       	rjmp	.+1188   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					DPRINT("Executing uint16_t, uint16_t, uint32_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if: fourth argument
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
    2a6e:	62 e0       	ldi	r22, 0x02	; 2
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	4c c2       	rjmp	.+1176   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2a7a:	64 e0       	ldi	r22, 0x04	; 4
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	46 c2       	rjmp	.+1164   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U16 or S16
		//if: second argument is U32 or S32
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2a86:	84 34       	cpi	r24, 0x44	; 68
    2a88:	19 f0       	breq	.+6      	; 0x2a90 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaa4>
    2a8a:	84 36       	cpi	r24, 0x64	; 100
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaa4>
    2a8e:	7f c0       	rjmp	.+254    	; 0x2b8e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xba2>
		{
			//Decode second argument
			uint32_t *arg_b_ptr = ARG_CAST( arg_cnt, uint32_t );
    2a90:	ad 01       	movw	r20, r26
    2a92:	44 59       	subi	r20, 0x94	; 148
    2a94:	5f 4f       	sbci	r21, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U32_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2a96:	92 30       	cpi	r25, 0x02	; 2
    2a98:	59 f4       	brne	.+22     	; 0x2ab0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xac4>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2a9a:	da 01       	movw	r26, r20
    2a9c:	4d 91       	ld	r20, X+
    2a9e:	5d 91       	ld	r21, X+
    2aa0:	6d 91       	ld	r22, X+
    2aa2:	7c 91       	ld	r23, X
    2aa4:	e7 01       	movw	r28, r14
    2aa6:	88 81       	ld	r24, Y
    2aa8:	99 81       	ldd	r25, Y+1	; 0x01
    2aaa:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	31 c2       	rjmp	.+1122   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint32_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	85 37       	cpi	r24, 0x75	; 117
    2ab4:	11 f0       	breq	.+4      	; 0x2aba <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xace>
    2ab6:	83 37       	cpi	r24, 0x73	; 115
    2ab8:	f1 f5       	brne	.+124    	; 0x2b36 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb4a>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2aba:	93 30       	cpi	r25, 0x03	; 3
    2abc:	71 f4       	brne	.+28     	; 0x2ada <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaee>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2abe:	a0 59       	subi	r26, 0x90	; 144
    2ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac2:	2c 91       	ld	r18, X
    2ac4:	da 01       	movw	r26, r20
    2ac6:	4d 91       	ld	r20, X+
    2ac8:	5d 91       	ld	r21, X+
    2aca:	6d 91       	ld	r22, X+
    2acc:	7c 91       	ld	r23, X
    2ace:	e7 01       	movw	r28, r14
    2ad0:	88 81       	ld	r24, Y
    2ad2:	99 81       	ldd	r25, Y+1	; 0x01
    2ad4:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	1c c2       	rjmp	.+1080   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint16_t, uint32_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	85 37       	cpi	r24, 0x75	; 117
    2ade:	11 f0       	breq	.+4      	; 0x2ae4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xaf8>
    2ae0:	83 37       	cpi	r24, 0x73	; 115
    2ae2:	a9 f4       	brne	.+42     	; 0x2b0e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb22>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2ae4:	94 30       	cpi	r25, 0x04	; 4
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xafe>
    2ae8:	0b c2       	rjmp	.+1046   	; 0x2f00 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf14>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2aea:	ed 01       	movw	r28, r26
    2aec:	cf 58       	subi	r28, 0x8F	; 143
    2aee:	df 4f       	sbci	r29, 0xFF	; 255
    2af0:	08 81       	ld	r16, Y
    2af2:	a0 59       	subi	r26, 0x90	; 144
    2af4:	bf 4f       	sbci	r27, 0xFF	; 255
    2af6:	2c 91       	ld	r18, X
    2af8:	da 01       	movw	r26, r20
    2afa:	4d 91       	ld	r20, X+
    2afc:	5d 91       	ld	r21, X+
    2afe:	6d 91       	ld	r22, X+
    2b00:	7c 91       	ld	r23, X
    2b02:	e7 01       	movw	r28, r14
    2b04:	88 81       	ld	r24, Y
    2b06:	99 81       	ldd	r25, Y+1	; 0x01
    2b08:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	02 c2       	rjmp	.+1028   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint16_t, uint32_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16 or U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2b0e:	85 35       	cpi	r24, 0x55	; 85
    2b10:	31 f0       	breq	.+12     	; 0x2b1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb32>
    2b12:	83 35       	cpi	r24, 0x53	; 83
    2b14:	21 f0       	breq	.+8      	; 0x2b1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb32>
    2b16:	84 34       	cpi	r24, 0x44	; 68
    2b18:	11 f0       	breq	.+4      	; 0x2b1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb32>
    2b1a:	84 36       	cpi	r24, 0x64	; 100
    2b1c:	31 f4       	brne	.+12     	; 0x2b2a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb3e>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2b1e:	62 e0       	ldi	r22, 0x02	; 2
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	f4 c1       	rjmp	.+1000   	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U16 or S16 or U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2b2a:	63 e0       	ldi	r22, 0x03	; 3
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	ee c1       	rjmp	.+988    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2b36:	85 35       	cpi	r24, 0x55	; 85
    2b38:	11 f0       	breq	.+4      	; 0x2b3e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb52>
    2b3a:	83 35       	cpi	r24, 0x53	; 83
    2b3c:	c1 f4       	brne	.+48     	; 0x2b6e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb82>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2b3e:	ed 01       	movw	r28, r26
    2b40:	c0 59       	subi	r28, 0x90	; 144
    2b42:	df 4f       	sbci	r29, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2b44:	93 30       	cpi	r25, 0x03	; 3
    2b46:	69 f4       	brne	.+26     	; 0x2b62 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb76>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint16_t, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint16_t, uint32_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2b48:	28 81       	ld	r18, Y
    2b4a:	39 81       	ldd	r19, Y+1	; 0x01
    2b4c:	da 01       	movw	r26, r20
    2b4e:	4d 91       	ld	r20, X+
    2b50:	5d 91       	ld	r21, X+
    2b52:	6d 91       	ld	r22, X+
    2b54:	7c 91       	ld	r23, X
    2b56:	e7 01       	movw	r28, r14
    2b58:	88 81       	ld	r24, Y
    2b5a:	99 81       	ldd	r25, Y+1	; 0x01
    2b5c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
				} //end if fourth argument
    2b60:	d8 c1       	rjmp	.+944    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					DPRINT("Executing uint16_t, uint32_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if: fourth argument
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
    2b62:	62 e0       	ldi	r22, 0x02	; 2
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	d2 c1       	rjmp	.+932    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2b6e:	84 34       	cpi	r24, 0x44	; 68
    2b70:	11 f0       	breq	.+4      	; 0x2b76 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb8a>
    2b72:	84 36       	cpi	r24, 0x64	; 100
    2b74:	31 f4       	brne	.+12     	; 0x2b82 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xb96>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2b76:	62 e0       	ldi	r22, 0x02	; 2
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	c8 c1       	rjmp	.+912    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2b82:	64 e0       	ldi	r22, 0x04	; 4
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	c2 c1       	rjmp	.+900    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>

		}	//if: second argument is U32 or S32
		//If: second argument is unhandled
		else
		{
			this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2b8e:	64 e0       	ldi	r22, 0x04	; 4
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
			return true; //FAIL
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	bc c1       	rjmp	.+888    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
		} //End If: second argument is unhandled
	}	//end if: first argument is U16 or S16
	//if: first argument is S32
	else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2b9a:	24 34       	cpi	r18, 0x44	; 68
    2b9c:	19 f0       	breq	.+6      	; 0x2ba4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbb8>
    2b9e:	24 36       	cpi	r18, 0x64	; 100
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbb8>
    2ba2:	74 c1       	rjmp	.+744    	; 0x2e8c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xea0>
	{
		//Decode first argument
		uint32_t *arg_a_ptr = ARG_CAST( arg_cnt, uint32_t );
    2ba4:	bd 01       	movw	r22, r26
    2ba6:	66 59       	subi	r22, 0x96	; 150
    2ba8:	7f 4f       	sbci	r23, 0xFF	; 255
		arg_cnt += Arg_size::ARG_S32_SIZE;
		//I decoded an argument
		arg_type_cnt++;
		DPRINT("Decoded argument | arg_type_cnt: %d | arg_cnt: %d | arg: %d\n", arg_type_cnt, arg_cnt, (*arg_a_ptr));
		//If: it's the only argument
		if (arg_num_types == arg_type_cnt)
    2baa:	91 30       	cpi	r25, 0x01	; 1
    2bac:	41 f4       	brne	.+16     	; 0x2bbe <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbd2>
			///--------------------------------------------------------------------------

			//Passing an unsigned 32 bit pointer is decoded successfully as signed of same size
			FUNCTION_PTR_VAR( f_ptr, uint32_t ) = FUNCTION_PTR_CAST( uint32_t )callback_ptr;
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
    2bae:	db 01       	movw	r26, r22
    2bb0:	6d 91       	ld	r22, X+
    2bb2:	7d 91       	ld	r23, X+
    2bb4:	8d 91       	ld	r24, X+
    2bb6:	9c 91       	ld	r25, X
    2bb8:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	aa c1       	rjmp	.+852    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			//Execute function from its specialized pointer
			FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr) );
			DPRINT("Executing int32_t -> void: %p | Args: %d\n", (void *)f_ptr, (*arg_a_ptr) );
		}
		//if: second argument is U8 or S8
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	85 37       	cpi	r24, 0x75	; 117
    2bc2:	19 f0       	breq	.+6      	; 0x2bca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbde>
    2bc4:	83 37       	cpi	r24, 0x73	; 115
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbde>
    2bc8:	bc c0       	rjmp	.+376    	; 0x2d42 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd56>
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U8_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2bca:	92 30       	cpi	r25, 0x02	; 2
    2bcc:	59 f4       	brne	.+22     	; 0x2be4 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xbf8>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2bce:	a2 59       	subi	r26, 0x92	; 146
    2bd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd2:	4c 91       	ld	r20, X
    2bd4:	eb 01       	movw	r28, r22
    2bd6:	68 81       	ld	r22, Y
    2bd8:	79 81       	ldd	r23, Y+1	; 0x01
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	97 c1       	rjmp	.+814    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint8_t -> void: %p | Args: %d %d\n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	85 37       	cpi	r24, 0x75	; 117
    2be8:	19 f0       	breq	.+6      	; 0x2bf0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc04>
    2bea:	83 37       	cpi	r24, 0x73	; 115
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc04>
    2bee:	53 c0       	rjmp	.+166    	; 0x2c96 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcaa>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2bf0:	93 30       	cpi	r25, 0x03	; 3
    2bf2:	79 f4       	brne	.+30     	; 0x2c12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc26>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2bf4:	ed 01       	movw	r28, r26
    2bf6:	c1 59       	subi	r28, 0x91	; 145
    2bf8:	df 4f       	sbci	r29, 0xFF	; 255
    2bfa:	28 81       	ld	r18, Y
    2bfc:	a2 59       	subi	r26, 0x92	; 146
    2bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2c00:	4c 91       	ld	r20, X
    2c02:	db 01       	movw	r26, r22
    2c04:	6d 91       	ld	r22, X+
    2c06:	7d 91       	ld	r23, X+
    2c08:	8d 91       	ld	r24, X+
    2c0a:	9c 91       	ld	r25, X
    2c0c:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	80 c1       	rjmp	.+768    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint32_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	85 37       	cpi	r24, 0x75	; 117
    2c16:	11 f0       	breq	.+4      	; 0x2c1c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc30>
    2c18:	83 37       	cpi	r24, 0x73	; 115
    2c1a:	a1 f4       	brne	.+40     	; 0x2c44 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc58>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2c1c:	94 30       	cpi	r25, 0x04	; 4
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc36>
    2c20:	71 c1       	rjmp	.+738    	; 0x2f04 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf18>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2c22:	ed 01       	movw	r28, r26
    2c24:	c0 59       	subi	r28, 0x90	; 144
    2c26:	df 4f       	sbci	r29, 0xFF	; 255
    2c28:	08 81       	ld	r16, Y
    2c2a:	21 97       	sbiw	r28, 0x01	; 1
    2c2c:	28 81       	ld	r18, Y
    2c2e:	a2 59       	subi	r26, 0x92	; 146
    2c30:	bf 4f       	sbci	r27, 0xFF	; 255
    2c32:	4c 91       	ld	r20, X
    2c34:	eb 01       	movw	r28, r22
    2c36:	68 81       	ld	r22, Y
    2c38:	79 81       	ldd	r23, Y+1	; 0x01
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	67 c1       	rjmp	.+718    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint8_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U16 or S16
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2c44:	85 35       	cpi	r24, 0x55	; 85
    2c46:	11 f0       	breq	.+4      	; 0x2c4c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc60>
    2c48:	83 35       	cpi	r24, 0x53	; 83
    2c4a:	a9 f4       	brne	.+42     	; 0x2c76 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc8a>
				{
					//Decode fourth argument
					uint16_t *arg_d_ptr = ARG_CAST( arg_cnt, uint16_t );
    2c4c:	ed 01       	movw	r28, r26
    2c4e:	c0 59       	subi	r28, 0x90	; 144
    2c50:	df 4f       	sbci	r29, 0xFF	; 255
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U16_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2c52:	94 30       	cpi	r25, 0x04	; 4
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc6c>
    2c56:	58 c1       	rjmp	.+688    	; 0x2f08 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf1c>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint8_t, uint16_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2c58:	08 81       	ld	r16, Y
    2c5a:	19 81       	ldd	r17, Y+1	; 0x01
    2c5c:	21 97       	sbiw	r28, 0x01	; 1
    2c5e:	28 81       	ld	r18, Y
    2c60:	a2 59       	subi	r26, 0x92	; 146
    2c62:	bf 4f       	sbci	r27, 0xFF	; 255
    2c64:	4c 91       	ld	r20, X
    2c66:	db 01       	movw	r26, r22
    2c68:	6d 91       	ld	r22, X+
    2c6a:	7d 91       	ld	r23, X+
    2c6c:	8d 91       	ld	r24, X+
    2c6e:	9c 91       	ld	r25, X
    2c70:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	4e c1       	rjmp	.+668    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint8_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );					}	//End If: it's the only argument
				} //end if fourth argument is U16 or S16
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2c76:	84 34       	cpi	r24, 0x44	; 68
    2c78:	11 f0       	breq	.+4      	; 0x2c7e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc92>
    2c7a:	84 36       	cpi	r24, 0x64	; 100
    2c7c:	31 f4       	brne	.+12     	; 0x2c8a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xc9e>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2c7e:	62 e0       	ldi	r22, 0x02	; 2
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	44 c1       	rjmp	.+648    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2c8a:	63 e0       	ldi	r22, 0x03	; 3
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	3e c1       	rjmp	.+636    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2c96:	85 35       	cpi	r24, 0x55	; 85
    2c98:	19 f0       	breq	.+6      	; 0x2ca0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcb4>
    2c9a:	83 35       	cpi	r24, 0x53	; 83
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcb4>
    2c9e:	41 c0       	rjmp	.+130    	; 0x2d22 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd36>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2ca0:	9d 01       	movw	r18, r26
    2ca2:	21 59       	subi	r18, 0x91	; 145
    2ca4:	3f 4f       	sbci	r19, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2ca6:	93 30       	cpi	r25, 0x03	; 3
    2ca8:	71 f4       	brne	.+28     	; 0x2cc6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcda>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2caa:	e9 01       	movw	r28, r18
    2cac:	28 81       	ld	r18, Y
    2cae:	39 81       	ldd	r19, Y+1	; 0x01
    2cb0:	a2 59       	subi	r26, 0x92	; 146
    2cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb4:	4c 91       	ld	r20, X
    2cb6:	db 01       	movw	r26, r22
    2cb8:	6d 91       	ld	r22, X+
    2cba:	7d 91       	ld	r23, X+
    2cbc:	8d 91       	ld	r24, X+
    2cbe:	9c 91       	ld	r25, X
    2cc0:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	26 c1       	rjmp	.+588    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint32_t, uint8_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	85 37       	cpi	r24, 0x75	; 117
    2cca:	11 f0       	breq	.+4      	; 0x2cd0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xce4>
    2ccc:	83 37       	cpi	r24, 0x73	; 115
    2cce:	a9 f4       	brne	.+42     	; 0x2cfa <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd0e>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2cd0:	94 30       	cpi	r25, 0x04	; 4
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xcea>
    2cd4:	1b c1       	rjmp	.+566    	; 0x2f0c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf20>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint8_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint8_t, uint16_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2cd6:	ed 01       	movw	r28, r26
    2cd8:	cf 58       	subi	r28, 0x8F	; 143
    2cda:	df 4f       	sbci	r29, 0xFF	; 255
    2cdc:	08 81       	ld	r16, Y
    2cde:	e9 01       	movw	r28, r18
    2ce0:	28 81       	ld	r18, Y
    2ce2:	39 81       	ldd	r19, Y+1	; 0x01
    2ce4:	a2 59       	subi	r26, 0x92	; 146
    2ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce8:	4c 91       	ld	r20, X
    2cea:	db 01       	movw	r26, r22
    2cec:	6d 91       	ld	r22, X+
    2cee:	7d 91       	ld	r23, X+
    2cf0:	8d 91       	ld	r24, X+
    2cf2:	9c 91       	ld	r25, X
    2cf4:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	0c c1       	rjmp	.+536    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint8_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2cfa:	85 35       	cpi	r24, 0x55	; 85
    2cfc:	31 f0       	breq	.+12     	; 0x2d0a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd1e>
    2cfe:	83 35       	cpi	r24, 0x53	; 83
    2d00:	21 f0       	breq	.+8      	; 0x2d0a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd1e>
    2d02:	84 34       	cpi	r24, 0x44	; 68
    2d04:	11 f0       	breq	.+4      	; 0x2d0a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd1e>
    2d06:	84 36       	cpi	r24, 0x64	; 100
    2d08:	31 f4       	brne	.+12     	; 0x2d16 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd2a>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2d0a:	62 e0       	ldi	r22, 0x02	; 2
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	fe c0       	rjmp	.+508    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2d16:	63 e0       	ldi	r22, 0x03	; 3
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	f8 c0       	rjmp	.+496    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2d22:	84 34       	cpi	r24, 0x44	; 68
    2d24:	11 f0       	breq	.+4      	; 0x2d2a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd3e>
    2d26:	84 36       	cpi	r24, 0x64	; 100
    2d28:	31 f4       	brne	.+12     	; 0x2d36 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd4a>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2d2a:	62 e0       	ldi	r22, 0x02	; 2
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	ee c0       	rjmp	.+476    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	e8 c0       	rjmp	.+464    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U8 or S8
		//if: second argument is U16 or S16
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2d42:	85 35       	cpi	r24, 0x55	; 85
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd60>
    2d46:	83 35       	cpi	r24, 0x53	; 83
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd60>
    2d4a:	7f c0       	rjmp	.+254    	; 0x2e4a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe5e>
		{
			//Decode second argument
			uint16_t *arg_b_ptr = ARG_CAST( arg_cnt, uint16_t );
    2d4c:	ad 01       	movw	r20, r26
    2d4e:	42 59       	subi	r20, 0x92	; 146
    2d50:	5f 4f       	sbci	r21, 0xFF	; 255
			//Accumulate argument size
			arg_cnt += Arg_size::ARG_U16_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2d52:	92 30       	cpi	r25, 0x02	; 2
    2d54:	59 f4       	brne	.+22     	; 0x2d6c <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd80>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2d56:	ea 01       	movw	r28, r20
    2d58:	48 81       	ld	r20, Y
    2d5a:	59 81       	ldd	r21, Y+1	; 0x01
    2d5c:	db 01       	movw	r26, r22
    2d5e:	6d 91       	ld	r22, X+
    2d60:	7d 91       	ld	r23, X+
    2d62:	8d 91       	ld	r24, X+
    2d64:	9c 91       	ld	r25, X
    2d66:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	d3 c0       	rjmp	.+422    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
				DPRINT("Executing uint16_t, uint16_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//if third argument is U8 or S8
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	85 37       	cpi	r24, 0x75	; 117
    2d70:	11 f0       	breq	.+4      	; 0x2d76 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xd8a>
    2d72:	83 37       	cpi	r24, 0x73	; 115
    2d74:	f1 f5       	brne	.+124    	; 0x2df2 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe06>
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U8_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2d76:	93 30       	cpi	r25, 0x03	; 3
    2d78:	71 f4       	brne	.+28     	; 0x2d96 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdaa>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t, uint8_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2d7a:	a0 59       	subi	r26, 0x90	; 144
    2d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7e:	2c 91       	ld	r18, X
    2d80:	ea 01       	movw	r28, r20
    2d82:	48 81       	ld	r20, Y
    2d84:	59 81       	ldd	r21, Y+1	; 0x01
    2d86:	db 01       	movw	r26, r22
    2d88:	6d 91       	ld	r22, X+
    2d8a:	7d 91       	ld	r23, X+
    2d8c:	8d 91       	ld	r24, X+
    2d8e:	9c 91       	ld	r25, X
    2d90:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	be c0       	rjmp	.+380    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
					DPRINT("Executing uint32_t, uint16_t, uint8_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument is U8 or S8
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U8) || (arg_type[arg_type_cnt] == Arg_type::ARG_S8))
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	85 37       	cpi	r24, 0x75	; 117
    2d9a:	11 f0       	breq	.+4      	; 0x2da0 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdb4>
    2d9c:	83 37       	cpi	r24, 0x73	; 115
    2d9e:	a9 f4       	brne	.+42     	; 0x2dca <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdde>
					//Accumulate argument size
					arg_cnt += Arg_size::ARG_U8_SIZE;
					//I decoded an argument
					arg_type_cnt++;
					//If: it's the only argument
					if (arg_num_types == arg_type_cnt)
    2da0:	94 30       	cpi	r25, 0x04	; 4
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdba>
    2da4:	b5 c0       	rjmp	.+362    	; 0x2f10 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf24>
						///--------------------------------------------------------------------------

						//Declare specialized function pointer and link it to the general registered function callback address
						FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t, uint8_t, uint8_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t, uint8_t, uint8_t )callback_ptr;
						//Execute function from its specialized pointer
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
    2da6:	ed 01       	movw	r28, r26
    2da8:	cf 58       	subi	r28, 0x8F	; 143
    2daa:	df 4f       	sbci	r29, 0xFF	; 255
    2dac:	08 81       	ld	r16, Y
    2dae:	a0 59       	subi	r26, 0x90	; 144
    2db0:	bf 4f       	sbci	r27, 0xFF	; 255
    2db2:	2c 91       	ld	r18, X
    2db4:	ea 01       	movw	r28, r20
    2db6:	48 81       	ld	r20, Y
    2db8:	59 81       	ldd	r21, Y+1	; 0x01
    2dba:	db 01       	movw	r26, r22
    2dbc:	6d 91       	ld	r22, X+
    2dbe:	7d 91       	ld	r23, X+
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	9c 91       	ld	r25, X
    2dc4:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	a4 c0       	rjmp	.+328    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
						FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr));
						DPRINT("Executing uint32_t, uint16_t, uint8_t, uint8_t -> void: %p | Args: %d %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr), (*arg_d_ptr) );
					}	//End If: it's the only argument
				} //end if fourth argument is U8 or S8
				//if fourth argument is U32 or S32
				else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16) || (arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2dca:	85 35       	cpi	r24, 0x55	; 85
    2dcc:	31 f0       	breq	.+12     	; 0x2dda <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdee>
    2dce:	83 35       	cpi	r24, 0x53	; 83
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdee>
    2dd2:	84 34       	cpi	r24, 0x44	; 68
    2dd4:	11 f0       	breq	.+4      	; 0x2dda <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdee>
    2dd6:	84 36       	cpi	r24, 0x64	; 100
    2dd8:	31 f4       	brne	.+12     	; 0x2de6 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xdfa>
				{
					this -> error_handler( ERR_ARG_SIZE );
    2dda:	62 e0       	ldi	r22, 0x02	; 2
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	96 c0       	rjmp	.+300    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument is U32 or S32
				//if: more than four arguments are forbidden!
				else
				{
					this -> error_handler( ERR_TOO_MANY_ARGS );
    2de6:	63 e0       	ldi	r22, 0x03	; 3
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_TOO_MANY_ARGS in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 c0       	rjmp	.+288    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if: more than four arguments are forbidden!
			}	//if: third argument is U8 or S8
			//if third argument is U16 or S16
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U16) || (arg_type[arg_type_cnt] == Arg_type::ARG_S16))
    2df2:	85 35       	cpi	r24, 0x55	; 85
    2df4:	11 f0       	breq	.+4      	; 0x2dfa <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe0e>
    2df6:	83 35       	cpi	r24, 0x53	; 83
    2df8:	c1 f4       	brne	.+48     	; 0x2e2a <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe3e>
			{
				//Decode second argument
				uint16_t *arg_c_ptr = ARG_CAST( arg_cnt, uint16_t );
    2dfa:	ed 01       	movw	r28, r26
    2dfc:	c0 59       	subi	r28, 0x90	; 144
    2dfe:	df 4f       	sbci	r29, 0xFF	; 255
				//Accumulate argument size
				arg_cnt += Arg_size::ARG_U16_SIZE;
				//I decoded an argument
				arg_type_cnt++;
				//If: it's the only argument
				if (arg_num_types == arg_type_cnt)
    2e00:	93 30       	cpi	r25, 0x03	; 3
    2e02:	69 f4       	brne	.+26     	; 0x2e1e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe32>
					///--------------------------------------------------------------------------

					//Declare specialized function pointer and link it to the general registered function callback address
					FUNCTION_PTR_VAR( f_ptr, uint32_t, uint16_t, uint16_t ) = FUNCTION_PTR_CAST( uint32_t, uint16_t, uint16_t )callback_ptr;
					//Execute function from its specialized pointer
					FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr));
    2e04:	28 81       	ld	r18, Y
    2e06:	39 81       	ldd	r19, Y+1	; 0x01
    2e08:	ea 01       	movw	r28, r20
    2e0a:	48 81       	ld	r20, Y
    2e0c:	59 81       	ldd	r21, Y+1	; 0x01
    2e0e:	db 01       	movw	r26, r22
    2e10:	6d 91       	ld	r22, X+
    2e12:	7d 91       	ld	r23, X+
    2e14:	8d 91       	ld	r24, X+
    2e16:	9c 91       	ld	r25, X
    2e18:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
				} //end if fourth argument
    2e1c:	7a c0       	rjmp	.+244    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
					DPRINT("Executing uint32_t, uint16_t, uint16_t -> void: %p | Args: %d %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr), (*arg_c_ptr) );
				}	//End If: it's the only argument
				//if fourth argument
				else
				{
					this -> error_handler( ERR_ARG_SIZE );
    2e1e:	62 e0       	ldi	r22, 0x02	; 2
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
					DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
					return true; //FAIL
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	74 c0       	rjmp	.+232    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				} //end if fourth argument
			}	//if: third argument is U16 or S16
			//if third argument is U32 or S32
			else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2e2a:	84 34       	cpi	r24, 0x44	; 68
    2e2c:	11 f0       	breq	.+4      	; 0x2e32 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe46>
    2e2e:	84 36       	cpi	r24, 0x64	; 100
    2e30:	31 f4       	brne	.+12     	; 0x2e3e <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe52>
			{
				this -> error_handler( ERR_ARG_SIZE );
    2e32:	62 e0       	ldi	r22, 0x02	; 2
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	6a c0       	rjmp	.+212    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//if: third argument is U32 or S32
			//If: third argument is unhandled
			else
			{
				this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2e3e:	64 e0       	ldi	r22, 0x04	; 4
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	64 c0       	rjmp	.+200    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: third argument is unhandled
		}	//if: second argument is U16 or S16
		//if: second argument is U32 or S32
		else if ((arg_type[arg_type_cnt] == Arg_type::ARG_U32) || (arg_type[arg_type_cnt] == Arg_type::ARG_S32))
    2e4a:	84 34       	cpi	r24, 0x44	; 68
    2e4c:	11 f0       	breq	.+4      	; 0x2e52 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe66>
    2e4e:	84 36       	cpi	r24, 0x64	; 100
    2e50:	b9 f4       	brne	.+46     	; 0x2e80 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe94>
		{
			//Decode second argument
			uint32_t *arg_b_ptr = ARG_CAST( arg_cnt, uint32_t );
    2e52:	ed 01       	movw	r28, r26
    2e54:	c2 59       	subi	r28, 0x92	; 146
    2e56:	df 4f       	sbci	r29, 0xFF	; 255
			arg_cnt += Arg_size::ARG_U32_SIZE;
			//I decoded an argument
			arg_type_cnt++;
			DPRINT("Decoded argument | arg_type_cnt: %d | arg_cnt: %d | arg: %d\n", arg_type_cnt, arg_cnt, (*arg_b_ptr));
			//If: it's the only argument
			if (arg_num_types == arg_type_cnt)
    2e58:	92 30       	cpi	r25, 0x02	; 2
    2e5a:	61 f4       	brne	.+24     	; 0x2e74 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xe88>
				///--------------------------------------------------------------------------

				//Declare specialized function pointer and link it to the general registered function callback address
				FUNCTION_PTR_VAR( f_ptr, uint32_t, uint32_t ) = FUNCTION_PTR_CAST( uint32_t, uint32_t )callback_ptr;
				//Execute function from its specialized pointer
				FUNCTION_PTR_EXE( f_ptr, (*arg_a_ptr), (*arg_b_ptr));
    2e5c:	28 81       	ld	r18, Y
    2e5e:	39 81       	ldd	r19, Y+1	; 0x01
    2e60:	4a 81       	ldd	r20, Y+2	; 0x02
    2e62:	5b 81       	ldd	r21, Y+3	; 0x03
    2e64:	eb 01       	movw	r28, r22
    2e66:	68 81       	ld	r22, Y
    2e68:	79 81       	ldd	r23, Y+1	; 0x01
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	09 95       	icall
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2e70:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				this -> error_handler( ERR_ARG_SIZE );
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
			}	//End If: argument is unhandled
    2e72:	4f c0       	rjmp	.+158    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
				DPRINT("Executing uint32_t, uint32_t -> void: %p | Args: %d %d \n", (void *)f_ptr, (*arg_a_ptr), (*arg_b_ptr) );
			}	//End If: it's the only argument
			//If: I CANNOT have a third argument after this because it would exceed the argument size limit
			else
			{
				this -> error_handler( ERR_ARG_SIZE );
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
				DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
				return true; //FAIL
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	49 c0       	rjmp	.+146    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
			}	//End If: argument is unhandled
		}	//if: second argument is U32 or S32
		//If: second argument is unhandled
		else
		{
			this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2e80:	64 e0       	ldi	r22, 0x04	; 4
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
			DRETURN_ARG("ERR_ARG_SIZE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
			return true; //FAIL
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	43 c0       	rjmp	.+134    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>


	//If: argument is unhandled
	else
	{
		this -> error_handler( ERR_UNHANDLED_ARG_TYPE );
    2e8c:	64 e0       	ldi	r22, 0x04	; 4
    2e8e:	cd 01       	movw	r24, r26
    2e90:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_ZN9Orangebot9Uniparser13error_handlerENS_10_Err_codesE>
		DRETURN_ARG("ERR_UNHANDLED_ARG_TYPE in line: %d | num arg: %d | arg_index: %d\n", __LINE__, arg_type_cnt, arg_cnt);
		return true; //FAIL
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	3d c0       	rjmp	.+122    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
	///--------------------------------------------------------------------------

	//Trace Return
	DRETURN();

	return false;	//OK
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	3b c0       	rjmp	.+118    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	39 c0       	rjmp	.+114    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	37 c0       	rjmp	.+110    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	35 c0       	rjmp	.+106    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	33 c0       	rjmp	.+102    	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	31 c0       	rjmp	.+98     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	2f c0       	rjmp	.+94     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	2d c0       	rjmp	.+90     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	2b c0       	rjmp	.+86     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	29 c0       	rjmp	.+82     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	27 c0       	rjmp	.+78     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	25 c0       	rjmp	.+74     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	23 c0       	rjmp	.+70     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	21 c0       	rjmp	.+66     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	1f c0       	rjmp	.+62     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	1d c0       	rjmp	.+58     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	1b c0       	rjmp	.+54     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	19 c0       	rjmp	.+50     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	17 c0       	rjmp	.+46     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	15 c0       	rjmp	.+42     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	13 c0       	rjmp	.+38     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	11 c0       	rjmp	.+34     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	0d c0       	rjmp	.+26     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	0b c0       	rjmp	.+22     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	09 c0       	rjmp	.+18     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	07 c0       	rjmp	.+14     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	05 c0       	rjmp	.+10     	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	01 c0       	rjmp	.+2      	; 0x2f12 <_ZN9Orangebot9Uniparser16execute_callbackEPv+0xf26>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
}	//end method: execute_callback
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	ff 90       	pop	r15
    2f1c:	ef 90       	pop	r14
    2f1e:	08 95       	ret

00002f20 <_ZN9Orangebot9Uniparser5parseEh>:
//! Intricate FSM. The objective is to check the incoming character against
//!	charaters inside the various commands and decode a command when a \0 is detected
/***************************************************************************/

bool Uniparser::parse( uint8_t data )
{
    2f20:	ff 92       	push	r15
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	ec 01       	movw	r28, r24
    2f2c:	16 2f       	mov	r17, r22
		//	User was notified of the error during previous call
		//	Errors should have triggered an FSM reset to return in working condition
		//	I can clear the error and keep churning bytes

	//If: an error was reported
	if (this -> g_err != Err_codes::NO_ERR)
    2f2e:	fc 01       	movw	r30, r24
    2f30:	ec 58       	subi	r30, 0x8C	; 140
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	81 11       	cpse	r24, r1
	{
		//Clear the error
		DPRINT("%d | Clear Error: %d\n", __LINE__, this -> g_err);
		this -> g_err = Err_codes::NO_ERR;
    2f38:	10 82       	st	Z, r1
		//----------------------------------------------------------------
		//! @details when terminator is detected, close the command.
		//!	I either have a full match, or the command is invalid and I have to reset the FSM

	//If: input terminator from user
	if (data == '\0')
    2f3a:	11 11       	cpse	r17, r1
    2f3c:	68 c0       	rjmp	.+208    	; 0x300e <_ZN9Orangebot9Uniparser5parseEh+0xee>
	{
		DPRINT("%d | Terminator detected | Number of partial matches: %d\n", __LINE__, this -> g_num_match);
		//counter
		uint8_t t;
		//If: i was decoding an argument
		if (this -> g_status == Orangebot::Parser_status::PARSER_ARG)
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 58       	subi	r30, 0x8D	; 141
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	49 f4       	brne	.+18     	; 0x2f5c <_ZN9Orangebot9Uniparser5parseEh+0x3c>
		{
			//I'm done decoding
			DPRINT("%d | Terminator after ARG\n", __LINE__);
			//Close current argument and update the argument detector FSM.
			bool f_ret = this -> close_arg();
    2f4a:	ce 01       	movw	r24, r28
    2f4c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN9Orangebot9Uniparser9close_argEv>
			//if could not close argument
			if (f_ret == true)
    2f50:	88 23       	and	r24, r24
    2f52:	21 f0       	breq	.+8      	; 0x2f5c <_ZN9Orangebot9Uniparser5parseEh+0x3c>
			{
				//I can recover from this.
				//no matches and reset the FSM.
				this -> g_num_match = 0;
    2f54:	fe 01       	movw	r30, r28
    2f56:	ee 58       	subi	r30, 0x8E	; 142
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	10 82       	st	Z, r1
			}
		}
		//Index inside the command
		uint8_t cmd_index;
		//if: I have at least one parser_tmp.id_index entry
		if (this -> g_num_match > 0)
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ee 58       	subi	r30, 0x8E	; 142
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	e0 81       	ld	r30, Z
    2f64:	1e 16       	cp	r1, r30
    2f66:	64 f5       	brge	.+88     	; 0x2fc0 <_ZN9Orangebot9Uniparser5parseEh+0xa0>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	5f ef       	ldi	r21, 0xFF	; 255
		{
			DPRINT("%d | Scanning partially matched commands for terminators\n", __LINE__);
			//For: scan all commands
			for (t = 0;t<this -> g_num_cmd;t++)
    2f6c:	48 81       	ld	r20, Y
    2f6e:	84 17       	cp	r24, r20
    2f70:	08 f0       	brcs	.+2      	; 0x2f74 <_ZN9Orangebot9Uniparser5parseEh+0x54>
    2f72:	9d c1       	rjmp	.+826    	; 0x32ae <_ZN9Orangebot9Uniparser5parseEh+0x38e>
			{
				//Fetch command index
				cmd_index = this -> g_cmd_index[t];
    2f74:	28 2f       	mov	r18, r24
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e2 0f       	add	r30, r18
    2f7c:	f3 1f       	adc	r31, r19
    2f7e:	91 a5       	ldd	r25, Z+41	; 0x29
				//If: this command is a partial match
				if (cmd_index > 0)
    2f80:	99 23       	and	r25, r25
    2f82:	e1 f0       	breq	.+56     	; 0x2fbc <_ZN9Orangebot9Uniparser5parseEh+0x9c>
				{
					//If: i was decoding an argument
					if (this -> g_status == Parser_status::PARSER_ARG)
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 58       	subi	r30, 0x8D	; 141
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	60 81       	ld	r22, Z
    2f8c:	62 30       	cpi	r22, 0x02	; 2
    2f8e:	39 f4       	brne	.+14     	; 0x2f9e <_ZN9Orangebot9Uniparser5parseEh+0x7e>
							this -> g_err = Err_codes::ERR_GENERIC;
							DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
							return true;	//fail
						}
						//The argument has been closed. I need to skip the argument descriptor "%?"
						cmd_index += 2;
    2f90:	9e 5f       	subi	r25, 0xFE	; 254
						//With argument closed I'm now doing an ID matching for terminator. Can be skipped since it's the last char
						this -> g_status = Parser_status::PARSER_ID;
    2f92:	61 e0       	ldi	r22, 0x01	; 1
    2f94:	60 83       	st	Z, r22
						//I should write back the index. Can be skipped since it's the last char
						this -> g_cmd_index[t] = cmd_index;
    2f96:	fe 01       	movw	r30, r28
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	91 a7       	std	Z+41, r25	; 0x29
					}
					//Check match against the character after the one already matched.
					//If: the next command data would be the terminator '\0'
					if ( this -> g_cmd_txt[t][ cmd_index ] == '\0')
    2f9e:	22 0f       	add	r18, r18
    2fa0:	33 1f       	adc	r19, r19
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e2 0f       	add	r30, r18
    2fa6:	f3 1f       	adc	r31, r19
    2fa8:	01 80       	ldd	r0, Z+1	; 0x01
    2faa:	f2 81       	ldd	r31, Z+2	; 0x02
    2fac:	e0 2d       	mov	r30, r0
    2fae:	e9 0f       	add	r30, r25
    2fb0:	f1 1d       	adc	r31, r1
    2fb2:	90 81       	ld	r25, Z
    2fb4:	91 11       	cpse	r25, r1
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <_ZN9Orangebot9Uniparser5parseEh+0x9c>
							this -> g_err = Err_codes::ERR_GENERIC;
							DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
							return true;	//fail
						}
						//Issue execution of the callback function linked
						exe_index = t;
    2fb8:	58 2f       	mov	r21, r24
						DPRINT("Valid command ID%d decoded\n", t);
						//I can stop the search
						t = this -> g_num_cmd;
    2fba:	84 2f       	mov	r24, r20
		//if: I have at least one parser_tmp.id_index entry
		if (this -> g_num_match > 0)
		{
			DPRINT("%d | Scanning partially matched commands for terminators\n", __LINE__);
			//For: scan all commands
			for (t = 0;t<this -> g_num_cmd;t++)
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	d6 cf       	rjmp	.-84     	; 0x2f6c <_ZN9Orangebot9Uniparser5parseEh+0x4c>
					}
				}	//End If: this command is a partial match
			}	//End For: scan all commands
		}	//end if: I have at least one parser_tmp.id_index entry
		//If I have just one match.  g_num_match now holds the index of the match shifted by one
		else if (this -> g_num_match < 0)
    2fc0:	ee 23       	and	r30, r30
    2fc2:	0c f0       	brlt	.+2      	; 0x2fc6 <_ZN9Orangebot9Uniparser5parseEh+0xa6>
    2fc4:	76 c1       	rjmp	.+748    	; 0x32b2 <_ZN9Orangebot9Uniparser5parseEh+0x392>
		{
			//decode command index | BUGFIX: -1 means only one match of command ID 0
			t = -this -> g_num_match -1;
    2fc6:	e0 95       	com	r30
			DPRINT("just one partial match: %d\n", t);
			//Fetch command index
			cmd_index = this -> g_cmd_index[t];
    2fc8:	8e 2f       	mov	r24, r30
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	de 01       	movw	r26, r28
    2fce:	a8 0f       	add	r26, r24
    2fd0:	b9 1f       	adc	r27, r25
    2fd2:	99 96       	adiw	r26, 0x29	; 41
    2fd4:	2c 91       	ld	r18, X
			//If: i was decoding an argument
			if (this -> g_status == Parser_status::PARSER_ARG)
    2fd6:	de 01       	movw	r26, r28
    2fd8:	ad 58       	subi	r26, 0x8D	; 141
    2fda:	bf 4f       	sbci	r27, 0xFF	; 255
    2fdc:	3c 91       	ld	r19, X
    2fde:	32 30       	cpi	r19, 0x02	; 2
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <_ZN9Orangebot9Uniparser5parseEh+0xc4>
					this -> g_err = Err_codes::ERR_GENERIC;
					DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
					return true;	//fail
				}
				//The argument has been closed. I need to skip the argument descriptor "%?"
				cmd_index += 2;
    2fe2:	2e 5f       	subi	r18, 0xFE	; 254
				//this -> g_status == Parser_status::PARSER_ID;
			}
			//BUGFIX: this branch can now be executed with null pointer if dictionary is yet to be initialized. This is not a pedantic check
			//Check match  against the character after the one already matched.
			//If: the next command data would be the terminator '\0'
			if ((this -> g_cmd_txt[t] != nullptr) && (this -> g_cmd_txt[t][ cmd_index ] == '\0'))
    2fe4:	88 0f       	add	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	de 01       	movw	r26, r28
    2fea:	a8 0f       	add	r26, r24
    2fec:	b9 1f       	adc	r27, r25
    2fee:	11 96       	adiw	r26, 0x01	; 1
    2ff0:	8d 91       	ld	r24, X+
    2ff2:	9c 91       	ld	r25, X
    2ff4:	12 97       	sbiw	r26, 0x02	; 2
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <_ZN9Orangebot9Uniparser5parseEh+0xdc>
    2ffa:	5e c1       	rjmp	.+700    	; 0x32b8 <_ZN9Orangebot9Uniparser5parseEh+0x398>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	a2 0f       	add	r26, r18
    3000:	b1 1d       	adc	r27, r1
    3002:	8c 91       	ld	r24, X
    3004:	81 11       	cpse	r24, r1
    3006:	5b c1       	rjmp	.+694    	; 0x32be <_ZN9Orangebot9Uniparser5parseEh+0x39e>
					this -> g_err = Err_codes::ERR_GENERIC;
					DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
					return true;	//fail
				}
				//Issue execution of the callback function linked
				exe_index = t;
    3008:	5e 2f       	mov	r21, r30
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    300a:	01 e0       	ldi	r16, 0x01	; 1
				}
				//Issue execution of the callback function linked
				exe_index = t;
				DPRINT("%d | Valid command ID%d decoded\n", __LINE__, t);
				//I can stop the search
				t = this -> g_num_cmd;
    300c:	70 c1       	rjmp	.+736    	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		//	Only letters can be used as first character in a command
		//	This section matches the first character in each command
		//	This section takes care of initializing g_cmd_index[] to valid partial match values

	//If: PARSER_IDLE
	else if (this -> g_status == Parser_status::PARSER_IDLE)
    300e:	fe 01       	movw	r30, r28
    3010:	ed 58       	subi	r30, 0x8D	; 141
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	81 11       	cpse	r24, r1
    3018:	33 c0       	rjmp	.+102    	; 0x3080 <_ZN9Orangebot9Uniparser5parseEh+0x160>
	{
		DPRINT("%d | PARSER_IDLE\n", __LINE__);
		//If: letter First character in a command can only be a letter
		if (IS_LETTER( data ))
    301a:	8f e9       	ldi	r24, 0x9F	; 159
    301c:	81 0f       	add	r24, r17
    301e:	8a 31       	cpi	r24, 0x1A	; 26
    3020:	38 f0       	brcs	.+14     	; 0x3030 <_ZN9Orangebot9Uniparser5parseEh+0x110>
    3022:	8f eb       	ldi	r24, 0xBF	; 191
    3024:	81 0f       	add	r24, r17
    3026:	8a 31       	cpi	r24, 0x1A	; 26
    3028:	08 f0       	brcs	.+2      	; 0x302c <_ZN9Orangebot9Uniparser5parseEh+0x10c>
    302a:	4c c1       	rjmp	.+664    	; 0x32c4 <_ZN9Orangebot9Uniparser5parseEh+0x3a4>
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	01 c0       	rjmp	.+2      	; 0x3032 <_ZN9Orangebot9Uniparser5parseEh+0x112>
    3030:	20 e0       	ldi	r18, 0x00	; 0
		{
			//counter
			uint8_t t;
			//for each command
			for (t = 0; t < this -> g_num_cmd;t++)
    3032:	88 81       	ld	r24, Y
    3034:	28 17       	cp	r18, r24
    3036:	08 f0       	brcs	.+2      	; 0x303a <_ZN9Orangebot9Uniparser5parseEh+0x11a>
    3038:	48 c1       	rjmp	.+656    	; 0x32ca <_ZN9Orangebot9Uniparser5parseEh+0x3aa>
					this -> g_err = Err_codes::ERR_GENERIC;
					DRETURN_ARG("%d | ERR%d: ERR_GENERIC\n", __LINE__, this -> g_err );
					return true;	//fail
				}
				//If: partial match
				if (this -> g_cmd_txt[t][0] == data)
    303a:	82 2f       	mov	r24, r18
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	fc 01       	movw	r30, r24
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	ec 0f       	add	r30, r28
    3046:	fd 1f       	adc	r31, r29
    3048:	01 80       	ldd	r0, Z+1	; 0x01
    304a:	f2 81       	ldd	r31, Z+2	; 0x02
    304c:	e0 2d       	mov	r30, r0
    304e:	30 81       	ld	r19, Z
    3050:	13 13       	cpse	r17, r19
    3052:	10 c0       	rjmp	.+32     	; 0x3074 <_ZN9Orangebot9Uniparser5parseEh+0x154>
				{
					//A partial match has been found
					this -> g_num_match++;
    3054:	fe 01       	movw	r30, r28
    3056:	ee 58       	subi	r30, 0x8E	; 142
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	30 81       	ld	r19, Z
    305c:	3f 5f       	subi	r19, 0xFF	; 255
    305e:	30 83       	st	Z, r19
					//Match has been found up to first character. Point to the next unmatched char
					this -> g_cmd_index[t] = 1;
    3060:	fe 01       	movw	r30, r28
    3062:	e8 0f       	add	r30, r24
    3064:	f9 1f       	adc	r31, r25
    3066:	31 e0       	ldi	r19, 0x01	; 1
    3068:	31 a7       	std	Z+41, r19	; 0x29
					//Next, I'm matching ID entries
					this -> g_status = Parser_status::PARSER_ID;
    306a:	fe 01       	movw	r30, r28
    306c:	ed 58       	subi	r30, 0x8D	; 141
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	30 83       	st	Z, r19
    3072:	04 c0       	rjmp	.+8      	; 0x307c <_ZN9Orangebot9Uniparser5parseEh+0x15c>
				}
				//if: no match
				else
				{
					//special code for no match found
					this -> g_cmd_index[t] = 0;
    3074:	fe 01       	movw	r30, r28
    3076:	e8 0f       	add	r30, r24
    3078:	f9 1f       	adc	r31, r25
    307a:	11 a6       	std	Z+41, r1	; 0x29
		if (IS_LETTER( data ))
		{
			//counter
			uint8_t t;
			//for each command
			for (t = 0; t < this -> g_num_cmd;t++)
    307c:	2f 5f       	subi	r18, 0xFF	; 255
    307e:	d9 cf       	rjmp	.-78     	; 0x3032 <_ZN9Orangebot9Uniparser5parseEh+0x112>
		//--------------------------------------------------------------------------
		//	ID matching
		//--------------------------------------------------------------------------

	//if: I'm ID matching
	else if (this -> g_status == Parser_status::PARSER_ID)
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	09 f0       	breq	.+2      	; 0x3086 <_ZN9Orangebot9Uniparser5parseEh+0x166>
    3084:	db c0       	rjmp	.+438    	; 0x323c <_ZN9Orangebot9Uniparser5parseEh+0x31c>
	{
		DPRINT("%d | PARSER_ID ", __LINE__);
		//! @todo only go ARG if a command has an arg descriptor if there are number or sign. allow number or sign to be used as command ID
		//if: I'm being fed an argument
		if (IS_NUMBER( data ) || IS_SIGN( data ))
    3086:	80 ed       	ldi	r24, 0xD0	; 208
    3088:	81 0f       	add	r24, r17
    308a:	8a 30       	cpi	r24, 0x0A	; 10
    308c:	28 f0       	brcs	.+10     	; 0x3098 <_ZN9Orangebot9Uniparser5parseEh+0x178>
    308e:	1b 32       	cpi	r17, 0x2B	; 43
    3090:	19 f0       	breq	.+6      	; 0x3098 <_ZN9Orangebot9Uniparser5parseEh+0x178>
    3092:	1d 32       	cpi	r17, 0x2D	; 45
    3094:	09 f0       	breq	.+2      	; 0x3098 <_ZN9Orangebot9Uniparser5parseEh+0x178>
    3096:	76 c0       	rjmp	.+236    	; 0x3184 <_ZN9Orangebot9Uniparser5parseEh+0x264>
		{
			DPRINT_NOTAB("- ARG | num_match %d\n", this -> g_num_match);
			//if: I have at least one partial match
			if (this -> g_num_match > 0)
    3098:	fe 01       	movw	r30, r28
    309a:	ee 58       	subi	r30, 0x8E	; 142
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	18 16       	cp	r1, r24
    30a2:	0c f0       	brlt	.+2      	; 0x30a6 <_ZN9Orangebot9Uniparser5parseEh+0x186>
    30a4:	46 c0       	rjmp	.+140    	; 0x3132 <_ZN9Orangebot9Uniparser5parseEh+0x212>
    30a6:	f1 2c       	mov	r15, r1
    30a8:	00 e0       	ldi	r16, 0x00	; 0
			{
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    30aa:	88 81       	ld	r24, Y
    30ac:	f8 16       	cp	r15, r24
    30ae:	08 f0       	brcs	.+2      	; 0x30b2 <_ZN9Orangebot9Uniparser5parseEh+0x192>
    30b0:	0f c1       	rjmp	.+542    	; 0x32d0 <_ZN9Orangebot9Uniparser5parseEh+0x3b0>
				{
					//if: the command is a partial match
					if (this -> g_cmd_index[t] > 0)
    30b2:	8f 2d       	mov	r24, r15
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	fe 01       	movw	r30, r28
    30b8:	e8 0f       	add	r30, r24
    30ba:	f9 1f       	adc	r31, r25
    30bc:	21 a5       	ldd	r18, Z+41	; 0x29
    30be:	22 23       	and	r18, r18
    30c0:	b1 f1       	breq	.+108    	; 0x312e <_ZN9Orangebot9Uniparser5parseEh+0x20e>
					{
						//Search in the dictionary for a % entry. An argument descriptor
						if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == '%')
    30c2:	fc 01       	movw	r30, r24
    30c4:	ee 0f       	add	r30, r30
    30c6:	ff 1f       	adc	r31, r31
    30c8:	ec 0f       	add	r30, r28
    30ca:	fd 1f       	adc	r31, r29
    30cc:	01 80       	ldd	r0, Z+1	; 0x01
    30ce:	f2 81       	ldd	r31, Z+2	; 0x02
    30d0:	e0 2d       	mov	r30, r0
    30d2:	e2 0f       	add	r30, r18
    30d4:	f1 1d       	adc	r31, r1
    30d6:	20 81       	ld	r18, Z
    30d8:	25 32       	cpi	r18, 0x25	; 37
    30da:	b9 f4       	brne	.+46     	; 0x310a <_ZN9Orangebot9Uniparser5parseEh+0x1ea>
						{
							//Do not increment index but go in ARG parsing mode
							this -> g_status = Parser_status::PARSER_ARG;
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	fe 01       	movw	r30, r28
    30e0:	ed 58       	subi	r30, 0x8D	; 141
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 83       	st	Z, r24
							//Do not advance index until argument decoding is complete
							DPRINT("%d | ARG begins | command: %d\n", __LINE__, t);
							//Add an argument using current partial match as template
							bool f_ret = this -> add_arg( t );
    30e6:	6f 2d       	mov	r22, r15
    30e8:	ce 01       	movw	r24, r28
    30ea:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <_ZN9Orangebot9Uniparser7add_argEh>
								DPRINT("%d | ERR Failed to add an argument\n", __LINE__ );
								//I can recover from this by resetting the FSM
								f_rst_fsm = true;
							}
							//initialize agrument
							this -> accumulate_arg( data );
    30ee:	61 2f       	mov	r22, r17
    30f0:	ce 01       	movw	r24, r28
    30f2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN9Orangebot9Uniparser14accumulate_argEh>
							//argument detection make the detection unique. Remove all other partial matches | BUGFIX: now negative index is shifted by one
							this -> g_num_match = -t -1;
    30f6:	fe 01       	movw	r30, r28
    30f8:	ee 58       	subi	r30, 0x8E	; 142
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	f0 94       	com	r15
    30fe:	f0 82       	st	Z, r15
							//Single match has been found. Break the cycle
							t = UNIPARSER_MAX_CMD;
    3100:	0f 2e       	mov	r0, r31
    3102:	f4 e1       	ldi	r31, 0x14	; 20
    3104:	ff 2e       	mov	r15, r31
    3106:	f0 2d       	mov	r31, r0
    3108:	12 c0       	rjmp	.+36     	; 0x312e <_ZN9Orangebot9Uniparser5parseEh+0x20e>
						}
						//If: this dictionary entry does not contain an argument descriptor
						else
						{
							//Prune away the partial match
							this -> g_cmd_index[t] = 0;
    310a:	fe 01       	movw	r30, r28
    310c:	e8 0f       	add	r30, r24
    310e:	f9 1f       	adc	r31, r25
    3110:	11 a6       	std	Z+41, r1	; 0x29
							DPRINT("%d | Prune away partial match: %d | ", __LINE__, t);
							//if: I still have partial matches after pruning
							if (this -> g_num_match >= 2)
    3112:	fe 01       	movw	r30, r28
    3114:	ee 58       	subi	r30, 0x8E	; 142
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	82 30       	cpi	r24, 0x02	; 2
    311c:	1c f0       	brlt	.+6      	; 0x3124 <_ZN9Orangebot9Uniparser5parseEh+0x204>
							{
								//One fewer partial match
								this -> g_num_match--;
    311e:	81 50       	subi	r24, 0x01	; 1
    3120:	80 83       	st	Z, r24
    3122:	05 c0       	rjmp	.+10     	; 0x312e <_ZN9Orangebot9Uniparser5parseEh+0x20e>
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
								//No more matches. Can breack cycle early
								t = UNIPARSER_MAX_CMD;
    3124:	0f 2e       	mov	r0, r31
    3126:	f4 e1       	ldi	r31, 0x14	; 20
    3128:	ff 2e       	mov	r15, r31
    312a:	f0 2d       	mov	r31, r0
							}
							//if: all partial matches have been pruned away
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
    312c:	01 e0       	ldi	r16, 0x01	; 1
			DPRINT_NOTAB("- ARG | num_match %d\n", this -> g_num_match);
			//if: I have at least one partial match
			if (this -> g_num_match > 0)
			{
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    312e:	f3 94       	inc	r15
    3130:	bc cf       	rjmp	.-136    	; 0x30aa <_ZN9Orangebot9Uniparser5parseEh+0x18a>
						//do nothing
					}
				} //end for each dictionary command
			}	//end if: I have at least one partial match
			//If I only have one match | BUGFIX: single match is now shifted by one
			else if (this -> g_num_match < 0)
    3132:	88 23       	and	r24, r24
    3134:	0c f0       	brlt	.+2      	; 0x3138 <_ZN9Orangebot9Uniparser5parseEh+0x218>
    3136:	ce c0       	rjmp	.+412    	; 0x32d4 <_ZN9Orangebot9Uniparser5parseEh+0x3b4>
			{
				//decode command index
				uint8_t t = -this -> g_num_match -1;
    3138:	68 2f       	mov	r22, r24
    313a:	60 95       	com	r22
				//Search in the dictionary for a % entry. An argument descriptor
				if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == '%')
    313c:	86 2f       	mov	r24, r22
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	fc 01       	movw	r30, r24
    3142:	ee 0f       	add	r30, r30
    3144:	ff 1f       	adc	r31, r31
    3146:	ec 0f       	add	r30, r28
    3148:	fd 1f       	adc	r31, r29
    314a:	01 80       	ldd	r0, Z+1	; 0x01
    314c:	f2 81       	ldd	r31, Z+2	; 0x02
    314e:	e0 2d       	mov	r30, r0
    3150:	de 01       	movw	r26, r28
    3152:	a8 0f       	add	r26, r24
    3154:	b9 1f       	adc	r27, r25
    3156:	99 96       	adiw	r26, 0x29	; 41
    3158:	8c 91       	ld	r24, X
    315a:	e8 0f       	add	r30, r24
    315c:	f1 1d       	adc	r31, r1
    315e:	80 81       	ld	r24, Z
    3160:	85 32       	cpi	r24, 0x25	; 37
    3162:	09 f0       	breq	.+2      	; 0x3166 <_ZN9Orangebot9Uniparser5parseEh+0x246>
    3164:	ba c0       	rjmp	.+372    	; 0x32da <_ZN9Orangebot9Uniparser5parseEh+0x3ba>
				{
						//! This is the first char of an argument
					//Do not increment index but go in ARG parsing mode
					this -> g_status = Parser_status::PARSER_ARG;
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	fe 01       	movw	r30, r28
    316a:	ed 58       	subi	r30, 0x8D	; 141
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 83       	st	Z, r24
					//Do not advance index until argument decoding is complete
					DPRINT("%d | ARG begins | command: %d\n", __LINE__, t);
					//Add an argument using current partial match as template
					bool f_ret = this -> add_arg( t );
    3170:	ce 01       	movw	r24, r28
    3172:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <_ZN9Orangebot9Uniparser7add_argEh>
						DPRINT("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
						//I can recover from this by resetting the FSM
						f_rst_fsm = true;
					}
					//!	accumulate argument character inside argument.
					f_ret = this -> accumulate_arg( data );
    3176:	61 2f       	mov	r22, r17
    3178:	ce 01       	movw	r24, r28
    317a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN9Orangebot9Uniparser14accumulate_argEh>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    317e:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3180:	00 e0       	ldi	r16, 0x00	; 0
    3182:	b5 c0       	rjmp	.+362    	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		//if: I'm matching a non argument non terminator
		else
		{
			DPRINT_NOTAB("- ID\n");
			//if: I have at least one partial match
			if (this -> g_num_match > 0)
    3184:	fe 01       	movw	r30, r28
    3186:	ee 58       	subi	r30, 0x8E	; 142
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	50 81       	ld	r21, Z
    318c:	15 16       	cp	r1, r21
    318e:	d4 f5       	brge	.+116    	; 0x3204 <_ZN9Orangebot9Uniparser5parseEh+0x2e4>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	00 e0       	ldi	r16, 0x00	; 0
			{
				//If I have just one match, I can upgrade num_match to skip for next time
				bool f_match = (this -> g_num_match == 1);
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    3194:	98 81       	ld	r25, Y
    3196:	89 17       	cp	r24, r25
    3198:	08 f0       	brcs	.+2      	; 0x319c <_ZN9Orangebot9Uniparser5parseEh+0x27c>
    319a:	a2 c0       	rjmp	.+324    	; 0x32e0 <_ZN9Orangebot9Uniparser5parseEh+0x3c0>
				{
					//if: the command is a partial match
					if (this -> g_cmd_index[t] > 0)
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	fe 01       	movw	r30, r28
    31a2:	e2 0f       	add	r30, r18
    31a4:	f3 1f       	adc	r31, r19
    31a6:	91 a5       	ldd	r25, Z+41	; 0x29
    31a8:	99 23       	and	r25, r25
    31aa:	51 f1       	breq	.+84     	; 0x3200 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
					{
						//check that the dictionary holds the same value as data
						if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == data)
    31ac:	f9 01       	movw	r30, r18
    31ae:	ee 0f       	add	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	ec 0f       	add	r30, r28
    31b4:	fd 1f       	adc	r31, r29
    31b6:	01 80       	ldd	r0, Z+1	; 0x01
    31b8:	f2 81       	ldd	r31, Z+2	; 0x02
    31ba:	e0 2d       	mov	r30, r0
    31bc:	e9 0f       	add	r30, r25
    31be:	f1 1d       	adc	r31, r1
    31c0:	40 81       	ld	r20, Z
    31c2:	14 13       	cpse	r17, r20
    31c4:	0e c0       	rjmp	.+28     	; 0x31e2 <_ZN9Orangebot9Uniparser5parseEh+0x2c2>
						{
							//Advance to the next dictionary entry for this command
							this -> g_cmd_index[t]++;
    31c6:	fe 01       	movw	r30, r28
    31c8:	e2 0f       	add	r30, r18
    31ca:	f3 1f       	adc	r31, r19
    31cc:	9f 5f       	subi	r25, 0xFF	; 255
    31ce:	91 a7       	std	Z+41, r25	; 0x29
							//if: This is the sole partial match surviving
							if (f_match == true)
    31d0:	51 30       	cpi	r21, 0x01	; 1
    31d2:	b1 f4       	brne	.+44     	; 0x3200 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
							{
								//Save the index inside num match to skip the for next time | BUGFIX: Now single match is shifted by one
								this -> g_num_match = -t -1;
    31d4:	fe 01       	movw	r30, r28
    31d6:	ee 58       	subi	r30, 0x8E	; 142
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	80 95       	com	r24
    31dc:	80 83       	st	Z, r24
								//Single match has been found. Break the cycle
								t = UNIPARSER_MAX_CMD;
    31de:	84 e1       	ldi	r24, 0x14	; 20
    31e0:	0f c0       	rjmp	.+30     	; 0x3200 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
						}
						//Else: this dictionary entry does not contain an argument descriptor
						else
						{
							//Prune away the partial match
							this -> g_cmd_index[t] = 0;
    31e2:	fe 01       	movw	r30, r28
    31e4:	e2 0f       	add	r30, r18
    31e6:	f3 1f       	adc	r31, r19
    31e8:	11 a6       	std	Z+41, r1	; 0x29
							DPRINT("%d | Prune away partial match: %d | ", __LINE__, t);
							//if: I still have partial matches after pruning
							if (this -> g_num_match >= 2)
    31ea:	fe 01       	movw	r30, r28
    31ec:	ee 58       	subi	r30, 0x8E	; 142
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	90 81       	ld	r25, Z
    31f2:	92 30       	cpi	r25, 0x02	; 2
    31f4:	1c f0       	brlt	.+6      	; 0x31fc <_ZN9Orangebot9Uniparser5parseEh+0x2dc>
							{
								//One fewer partial match
								this -> g_num_match--;
    31f6:	91 50       	subi	r25, 0x01	; 1
    31f8:	90 83       	st	Z, r25
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <_ZN9Orangebot9Uniparser5parseEh+0x2e0>
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
								//No more matches. Can breack cycle early
								t = UNIPARSER_MAX_CMD;
    31fc:	84 e1       	ldi	r24, 0x14	; 20
							}
							//if: all partial matches have been pruned away
							else
							{
								//No more commands. Reset the machine
								f_rst_fsm = true;
    31fe:	01 e0       	ldi	r16, 0x01	; 1
			if (this -> g_num_match > 0)
			{
				//If I have just one match, I can upgrade num_match to skip for next time
				bool f_match = (this -> g_num_match == 1);
				//for each dictionary command
				for (uint8_t t = 0;t < this -> g_num_cmd;t++)
    3200:	8f 5f       	subi	r24, 0xFF	; 255
    3202:	c8 cf       	rjmp	.-112    	; 0x3194 <_ZN9Orangebot9Uniparser5parseEh+0x274>
			//BUGFIX: If the only match is also entry 0
			//If I only have one match
			else //if (this -> g_num_match <= 0)
			{
				//decode command index | BUGFIX: Now single match is shifted by one
				uint8_t t = -this -> g_num_match -1;
    3204:	85 2f       	mov	r24, r21
    3206:	80 95       	com	r24
				//check that the dictionary holds the same value as data
				if (this -> g_cmd_txt[t][ this -> g_cmd_index[t] ] == data)
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	fc 01       	movw	r30, r24
    320c:	ee 0f       	add	r30, r30
    320e:	ff 1f       	adc	r31, r31
    3210:	ec 0f       	add	r30, r28
    3212:	fd 1f       	adc	r31, r29
    3214:	01 80       	ldd	r0, Z+1	; 0x01
    3216:	f2 81       	ldd	r31, Z+2	; 0x02
    3218:	e0 2d       	mov	r30, r0
    321a:	de 01       	movw	r26, r28
    321c:	a8 0f       	add	r26, r24
    321e:	b9 1f       	adc	r27, r25
    3220:	99 96       	adiw	r26, 0x29	; 41
    3222:	2c 91       	ld	r18, X
    3224:	99 97       	sbiw	r26, 0x29	; 41
    3226:	e2 0f       	add	r30, r18
    3228:	f1 1d       	adc	r31, r1
    322a:	30 81       	ld	r19, Z
    322c:	13 13       	cpse	r17, r19
    322e:	5a c0       	rjmp	.+180    	; 0x32e4 <_ZN9Orangebot9Uniparser5parseEh+0x3c4>
				{
					//Match! Scan next entry
					this -> g_cmd_index[t]++;
    3230:	fd 01       	movw	r30, r26
    3232:	2f 5f       	subi	r18, 0xFF	; 255
    3234:	21 a7       	std	Z+41, r18	; 0x29
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3236:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3238:	00 e0       	ldi	r16, 0x00	; 0
    323a:	59 c0       	rjmp	.+178    	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		//--------------------------------------------------------------------------
		//	ARG decoder
		//--------------------------------------------------------------------------

	//if: I'm decoding arguments
	else if (this -> g_status == Parser_status::PARSER_ARG)
    323c:	82 30       	cpi	r24, 0x02	; 2
    323e:	09 f0       	breq	.+2      	; 0x3242 <_ZN9Orangebot9Uniparser5parseEh+0x322>
    3240:	54 c0       	rjmp	.+168    	; 0x32ea <_ZN9Orangebot9Uniparser5parseEh+0x3ca>
	{
		DPRINT("%d | PARSER_ARG\n", __LINE__);
		//If: I'm fed a number
		if (IS_NUMBER(data))
    3242:	80 ed       	ldi	r24, 0xD0	; 208
    3244:	81 0f       	add	r24, r17
    3246:	8a 30       	cpi	r24, 0x0A	; 10
    3248:	38 f4       	brcc	.+14     	; 0x3258 <_ZN9Orangebot9Uniparser5parseEh+0x338>
		{
			//!	accumulate argument character inside argument.
			bool f_ret = this -> accumulate_arg( data );
    324a:	61 2f       	mov	r22, r17
    324c:	ce 01       	movw	r24, r28
    324e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN9Orangebot9Uniparser14accumulate_argEh>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    3252:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    3254:	00 e0       	ldi	r16, 0x00	; 0
    3256:	4b c0       	rjmp	.+150    	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		else
		{
			DPRINT("Closing argument\n");
			//! Exit argument mode
			//Close current argument and update argument FSM
			this -> close_arg();
    3258:	ce 01       	movw	r24, r28
    325a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN9Orangebot9Uniparser9close_argEv>
				f_rst_fsm = true;
			}
			else
			{
				//After argument, I can only have one match. | BUGFIX: Now single match is shifted by one
				uint8_t cmd_id = -this -> g_num_match -1;
    325e:	fe 01       	movw	r30, r28
    3260:	ee 58       	subi	r30, 0x8E	; 142
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	80 95       	com	r24
				//Update the parser index by skipping % and the argument descriptor
				this -> g_cmd_index[ cmd_id ] += 2;
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	fe 01       	movw	r30, r28
    326c:	e8 0f       	add	r30, r24
    326e:	f9 1f       	adc	r31, r25
    3270:	21 a5       	ldd	r18, Z+41	; 0x29
    3272:	2e 5f       	subi	r18, 0xFE	; 254
    3274:	21 a7       	std	Z+41, r18	; 0x29
				//check that the dictionary holds the same value as data
				if (this -> g_cmd_txt[ cmd_id ][ this -> g_cmd_index[ cmd_id ] ] == data)
    3276:	fc 01       	movw	r30, r24
    3278:	ee 0f       	add	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	ec 0f       	add	r30, r28
    327e:	fd 1f       	adc	r31, r29
    3280:	01 80       	ldd	r0, Z+1	; 0x01
    3282:	f2 81       	ldd	r31, Z+2	; 0x02
    3284:	e0 2d       	mov	r30, r0
    3286:	e2 0f       	add	r30, r18
    3288:	f1 1d       	adc	r31, r1
    328a:	30 81       	ld	r19, Z
    328c:	13 13       	cpse	r17, r19
    328e:	07 c0       	rjmp	.+14     	; 0x329e <_ZN9Orangebot9Uniparser5parseEh+0x37e>
				{
					//Advance to the next dictionary entry for this command
					this -> g_cmd_index[ cmd_id ]++;
    3290:	fe 01       	movw	r30, r28
    3292:	e8 0f       	add	r30, r24
    3294:	f9 1f       	adc	r31, r25
    3296:	2f 5f       	subi	r18, 0xFF	; 255
    3298:	21 a7       	std	Z+41, r18	; 0x29
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    329a:	00 e0       	ldi	r16, 0x00	; 0
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <_ZN9Orangebot9Uniparser5parseEh+0x380>
				//No match
				else
				{
					DPRINT("%d | Pruning away last match\n", __LINE__);
					//I can recover from this by resetting the FSM
					f_rst_fsm = true;
    329e:	01 e0       	ldi	r16, 0x01	; 1
				}
				this -> g_status = Parser_status::PARSER_ID;
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	fe 01       	movw	r30, r28
    32a4:	ed 58       	subi	r30, 0x8D	; 141
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 83       	st	Z, r24
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32aa:	5f ef       	ldi	r21, 0xFF	; 255
    32ac:	20 c0       	rjmp	.+64     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    32ae:	01 e0       	ldi	r16, 0x01	; 1
    32b0:	1e c0       	rjmp	.+60     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32b2:	5f ef       	ldi	r21, 0xFF	; 255
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    32b4:	01 e0       	ldi	r16, 0x01	; 1
    32b6:	1b c0       	rjmp	.+54     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32b8:	5f ef       	ldi	r21, 0xFF	; 255
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    32ba:	01 e0       	ldi	r16, 0x01	; 1
    32bc:	18 c0       	rjmp	.+48     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32be:	5f ef       	ldi	r21, 0xFF	; 255
		else
		{
			DPRINT("%d | No partial matches\n", __LINE__ );
		}
		//Issue a FSM reset
		f_rst_fsm = true;
    32c0:	01 e0       	ldi	r16, 0x01	; 1
    32c2:	15 c0       	rjmp	.+42     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32c4:	5f ef       	ldi	r21, 0xFF	; 255
		}	//End If: letter
		//Non letter can never be a first character
		else
		{
			//Issue a FSM reset
			f_rst_fsm = true;
    32c6:	01 e0       	ldi	r16, 0x01	; 1
    32c8:	12 c0       	rjmp	.+36     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32ca:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    32cc:	00 e0       	ldi	r16, 0x00	; 0
    32ce:	0f c0       	rjmp	.+30     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32d0:	5f ef       	ldi	r21, 0xFF	; 255
    32d2:	0d c0       	rjmp	.+26     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
    32d4:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    32d6:	00 e0       	ldi	r16, 0x00	; 0
    32d8:	0a c0       	rjmp	.+20     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32da:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    32dc:	00 e0       	ldi	r16, 0x00	; 0
    32de:	07 c0       	rjmp	.+14     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32e0:	5f ef       	ldi	r21, 0xFF	; 255
    32e2:	05 c0       	rjmp	.+10     	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
    32e4:	5f ef       	ldi	r21, 0xFF	; 255
				}
				//no match
				else
				{
					//Last partial match has been pruned away. Issue a FSM reset
					f_rst_fsm = true;
    32e6:	01 e0       	ldi	r16, 0x01	; 1
    32e8:	02 c0       	rjmp	.+4      	; 0x32ee <_ZN9Orangebot9Uniparser5parseEh+0x3ce>
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
	//Index of the handler to be executer
	int8_t exe_index = -1;
    32ea:	5f ef       	ldi	r21, 0xFF	; 255
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//when true, reset the FMS
	bool f_rst_fsm = false;
    32ec:	00 e0       	ldi	r16, 0x00	; 0
		//----------------------------------------------------------------
		//!	@detail
		//! FSM reset. Clear up the machine for the next clean execution

	//If: a reset was issued
	if (f_rst_fsm == true)
    32ee:	00 23       	and	r16, r16
    32f0:	51 f0       	breq	.+20     	; 0x3306 <_ZN9Orangebot9Uniparser5parseEh+0x3e6>
	{
		DPRINT("%d | FSM RESET\n", __LINE__);
		//Clear reset flag
		f_rst_fsm = false;
		//Status becomes IDLE
		this -> g_status = Orangebot::Parser_status::PARSER_IDLE;
    32f2:	fe 01       	movw	r30, r28
    32f4:	ed 58       	subi	r30, 0x8D	; 141
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	10 82       	st	Z, r1
		//I have no partial matches anymore
		this -> g_num_match = 0;
    32fa:	31 97       	sbiw	r30, 0x01	; 1
    32fc:	10 82       	st	Z, r1
		//If I don't have a pending execution
		if (exe_index == -1)
    32fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3300:	11 f4       	brne	.+4      	; 0x3306 <_ZN9Orangebot9Uniparser5parseEh+0x3e6>
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//Prepare the argument descriptor. zero arguments are in store
	this -> g_arg_fsm_status.num_arg = 0;
    3302:	3d 97       	sbiw	r30, 0x0d	; 13
	//First free slot in the argument vector is the first byte
	this -> g_arg_fsm_status.arg_index = 0;
	//if sign is not specified, default argument sign is plus
	this -> g_arg_fsm_status.arg_sign = false;
    3304:	10 82       	st	Z, r1
		//----------------------------------------------------------------
		//!	@detail
		//! FSM reset. Clear up the machine for the next clean execution

	//If: an execution event has been launched
	if (exe_index > -1)
    3306:	55 23       	and	r21, r21
    3308:	74 f0       	brlt	.+28     	; 0x3326 <_ZN9Orangebot9Uniparser5parseEh+0x406>
			DRETURN_ARG("ERR%d: ERR_GENERIC in line: %d\n", this -> g_err, __LINE__ );
			return true;	//fail
		}
		DPRINT("%d | Executing handler of command %d | num arguments: %d\n", __LINE__, exe_index, this -> g_arg_fsm_status.num_arg);
		//Execute handler of given function. Automatically deduce arguments from argument vector
        this -> execute_callback( this ->g_cmd_handler[exe_index] );
    330a:	e5 2f       	mov	r30, r21
    330c:	ee 0f       	add	r30, r30
    330e:	ff 0b       	sbc	r31, r31
    3310:	ec 0f       	add	r30, r28
    3312:	fd 1f       	adc	r31, r29
    3314:	65 ad       	ldd	r22, Z+61	; 0x3d
    3316:	76 ad       	ldd	r23, Z+62	; 0x3e
    3318:	ce 01       	movw	r24, r28
    331a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN9Orangebot9Uniparser16execute_callbackEPv>
	//	BODY
	//----------------------------------------------------------------
	//! @details algorithm:

	//Prepare the argument descriptor. zero arguments are in store
	this -> g_arg_fsm_status.num_arg = 0;
    331e:	fe 01       	movw	r30, r28
    3320:	eb 59       	subi	r30, 0x9B	; 155
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
	//First free slot in the argument vector is the first byte
	this -> g_arg_fsm_status.arg_index = 0;
	//if sign is not specified, default argument sign is plus
	this -> g_arg_fsm_status.arg_sign = false;
    3324:	10 82       	st	Z, r1
	//----------------------------------------------------------------

	//Trace Return from main
	DRETURN_ARG("Err_code: %d\n", this -> g_err);
	//Inform the caller that an error occurred
	return (this -> g_err != Err_codes::NO_ERR);
    3326:	cc 58       	subi	r28, 0x8C	; 140
    3328:	df 4f       	sbci	r29, 0xFF	; 255
    332a:	98 81       	ld	r25, Y
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	91 11       	cpse	r25, r1
    3330:	01 c0       	rjmp	.+2      	; 0x3334 <_ZN9Orangebot9Uniparser5parseEh+0x414>
    3332:	80 e0       	ldi	r24, 0x00	; 0
}	//end method: parse | char
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	08 95       	ret

00003340 <_ZN9Orangebot9UniparserC1Ev>:
//! @return no return
//!	@details
//! Empty constructor
/***************************************************************************/

Uniparser::Uniparser( void )
    3340:	dc 01       	movw	r26, r24
	//	BODY
	//----------------------------------------------------------------
	//! @details initialize structure

	//No commands are currently loaded inside the parser
	this -> g_num_cmd = 0;
    3342:	1c 92       	st	X, r1
	//for: each possible command
	for (t = 0;t < UNIPARSER_MAX_CMD;t++)
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	94 31       	cpi	r25, 0x14	; 20
    3348:	60 f4       	brcc	.+24     	; 0x3362 <_ZN9Orangebot9UniparserC1Ev+0x22>
	{
		//command has no txt identifier linked
		this -> g_cmd_txt[t] = nullptr;
    334a:	e9 2f       	mov	r30, r25
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	ee 0f       	add	r30, r30
    3350:	ff 1f       	adc	r31, r31
    3352:	ea 0f       	add	r30, r26
    3354:	fb 1f       	adc	r31, r27
    3356:	11 82       	std	Z+1, r1	; 0x01
    3358:	12 82       	std	Z+2, r1	; 0x02
		//command has no function handler linked
		this -> g_cmd_handler[t] = nullptr;
    335a:	15 ae       	std	Z+61, r1	; 0x3d
    335c:	16 ae       	std	Z+62, r1	; 0x3e
	//! @details initialize structure

	//No commands are currently loaded inside the parser
	this -> g_num_cmd = 0;
	//for: each possible command
	for (t = 0;t < UNIPARSER_MAX_CMD;t++)
    335e:	9f 5f       	subi	r25, 0xFF	; 255
    3360:	f2 cf       	rjmp	.-28     	; 0x3346 <_ZN9Orangebot9UniparserC1Ev+0x6>
		this -> g_cmd_txt[t] = nullptr;
		//command has no function handler linked
		this -> g_cmd_handler[t] = nullptr;
	}
	//I have no partial matches
	this -> g_num_match = 0;
    3362:	fd 01       	movw	r30, r26
    3364:	ee 58       	subi	r30, 0x8E	; 142
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	10 82       	st	Z, r1
	//FSM begins in idle
	this -> g_status = Orangebot::Parser_status::PARSER_IDLE;
    336a:	31 96       	adiw	r30, 0x01	; 1
    336c:	10 82       	st	Z, r1
	//No error
	this -> g_err = Orangebot::Err_codes::NO_ERR;
    336e:	31 96       	adiw	r30, 0x01	; 1
    3370:	10 82       	st	Z, r1
	//! @details algorithm:

	//Initialize structure to safe values
	this -> init();
	//Pass a terminator to the parser to have it initialize itself
	this -> parse( '\0' );
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 90 17 	call	0x2f20	; 0x2f20 <_ZN9Orangebot9Uniparser5parseEh>
    337a:	08 95       	ret

0000337c <__udivmodqi4>:
    337c:	99 1b       	sub	r25, r25
    337e:	79 e0       	ldi	r23, 0x09	; 9
    3380:	04 c0       	rjmp	.+8      	; 0x338a <__udivmodqi4_ep>

00003382 <__udivmodqi4_loop>:
    3382:	99 1f       	adc	r25, r25
    3384:	96 17       	cp	r25, r22
    3386:	08 f0       	brcs	.+2      	; 0x338a <__udivmodqi4_ep>
    3388:	96 1b       	sub	r25, r22

0000338a <__udivmodqi4_ep>:
    338a:	88 1f       	adc	r24, r24
    338c:	7a 95       	dec	r23
    338e:	c9 f7       	brne	.-14     	; 0x3382 <__udivmodqi4_loop>
    3390:	80 95       	com	r24
    3392:	08 95       	ret

00003394 <__udivmodhi4>:
    3394:	aa 1b       	sub	r26, r26
    3396:	bb 1b       	sub	r27, r27
    3398:	51 e1       	ldi	r21, 0x11	; 17
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <__udivmodhi4_ep>

0000339c <__udivmodhi4_loop>:
    339c:	aa 1f       	adc	r26, r26
    339e:	bb 1f       	adc	r27, r27
    33a0:	a6 17       	cp	r26, r22
    33a2:	b7 07       	cpc	r27, r23
    33a4:	10 f0       	brcs	.+4      	; 0x33aa <__udivmodhi4_ep>
    33a6:	a6 1b       	sub	r26, r22
    33a8:	b7 0b       	sbc	r27, r23

000033aa <__udivmodhi4_ep>:
    33aa:	88 1f       	adc	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	5a 95       	dec	r21
    33b0:	a9 f7       	brne	.-22     	; 0x339c <__udivmodhi4_loop>
    33b2:	80 95       	com	r24
    33b4:	90 95       	com	r25
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	08 95       	ret

000033bc <__udivmodsi4>:
    33bc:	a1 e2       	ldi	r26, 0x21	; 33
    33be:	1a 2e       	mov	r1, r26
    33c0:	aa 1b       	sub	r26, r26
    33c2:	bb 1b       	sub	r27, r27
    33c4:	fd 01       	movw	r30, r26
    33c6:	0d c0       	rjmp	.+26     	; 0x33e2 <__udivmodsi4_ep>

000033c8 <__udivmodsi4_loop>:
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	ee 1f       	adc	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	a2 17       	cp	r26, r18
    33d2:	b3 07       	cpc	r27, r19
    33d4:	e4 07       	cpc	r30, r20
    33d6:	f5 07       	cpc	r31, r21
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <__udivmodsi4_ep>
    33da:	a2 1b       	sub	r26, r18
    33dc:	b3 0b       	sbc	r27, r19
    33de:	e4 0b       	sbc	r30, r20
    33e0:	f5 0b       	sbc	r31, r21

000033e2 <__udivmodsi4_ep>:
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	1a 94       	dec	r1
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <__udivmodsi4_loop>
    33ee:	60 95       	com	r22
    33f0:	70 95       	com	r23
    33f2:	80 95       	com	r24
    33f4:	90 95       	com	r25
    33f6:	9b 01       	movw	r18, r22
    33f8:	ac 01       	movw	r20, r24
    33fa:	bd 01       	movw	r22, r26
    33fc:	cf 01       	movw	r24, r30
    33fe:	08 95       	ret

00003400 <__tablejump2__>:
    3400:	ee 0f       	add	r30, r30
    3402:	ff 1f       	adc	r31, r31
    3404:	05 90       	lpm	r0, Z+
    3406:	f4 91       	lpm	r31, Z
    3408:	e0 2d       	mov	r30, r0
    340a:	09 94       	ijmp

0000340c <__umulhisi3>:
    340c:	a2 9f       	mul	r26, r18
    340e:	b0 01       	movw	r22, r0
    3410:	b3 9f       	mul	r27, r19
    3412:	c0 01       	movw	r24, r0
    3414:	a3 9f       	mul	r26, r19
    3416:	70 0d       	add	r23, r0
    3418:	81 1d       	adc	r24, r1
    341a:	11 24       	eor	r1, r1
    341c:	91 1d       	adc	r25, r1
    341e:	b2 9f       	mul	r27, r18
    3420:	70 0d       	add	r23, r0
    3422:	81 1d       	adc	r24, r1
    3424:	11 24       	eor	r1, r1
    3426:	91 1d       	adc	r25, r1
    3428:	08 95       	ret

0000342a <__muluhisi3>:
    342a:	0e 94 06 1a 	call	0x340c	; 0x340c <__umulhisi3>
    342e:	a5 9f       	mul	r26, r21
    3430:	90 0d       	add	r25, r0
    3432:	b4 9f       	mul	r27, r20
    3434:	90 0d       	add	r25, r0
    3436:	a4 9f       	mul	r26, r20
    3438:	80 0d       	add	r24, r0
    343a:	91 1d       	adc	r25, r1
    343c:	11 24       	eor	r1, r1
    343e:	08 95       	ret

00003440 <do_rand>:
    3440:	8f 92       	push	r8
    3442:	9f 92       	push	r9
    3444:	af 92       	push	r10
    3446:	bf 92       	push	r11
    3448:	cf 92       	push	r12
    344a:	df 92       	push	r13
    344c:	ef 92       	push	r14
    344e:	ff 92       	push	r15
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	ec 01       	movw	r28, r24
    3456:	68 81       	ld	r22, Y
    3458:	79 81       	ldd	r23, Y+1	; 0x01
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	9b 81       	ldd	r25, Y+3	; 0x03
    345e:	61 15       	cp	r22, r1
    3460:	71 05       	cpc	r23, r1
    3462:	81 05       	cpc	r24, r1
    3464:	91 05       	cpc	r25, r1
    3466:	21 f4       	brne	.+8      	; 0x3470 <do_rand+0x30>
    3468:	64 e2       	ldi	r22, 0x24	; 36
    346a:	79 ed       	ldi	r23, 0xD9	; 217
    346c:	8b e5       	ldi	r24, 0x5B	; 91
    346e:	97 e0       	ldi	r25, 0x07	; 7
    3470:	2d e1       	ldi	r18, 0x1D	; 29
    3472:	33 ef       	ldi	r19, 0xF3	; 243
    3474:	41 e0       	ldi	r20, 0x01	; 1
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <__divmodsi4>
    347c:	49 01       	movw	r8, r18
    347e:	5a 01       	movw	r10, r20
    3480:	9b 01       	movw	r18, r22
    3482:	ac 01       	movw	r20, r24
    3484:	a7 ea       	ldi	r26, 0xA7	; 167
    3486:	b1 e4       	ldi	r27, 0x41	; 65
    3488:	0e 94 15 1a 	call	0x342a	; 0x342a <__muluhisi3>
    348c:	6b 01       	movw	r12, r22
    348e:	7c 01       	movw	r14, r24
    3490:	ac ee       	ldi	r26, 0xEC	; 236
    3492:	b4 ef       	ldi	r27, 0xF4	; 244
    3494:	a5 01       	movw	r20, r10
    3496:	94 01       	movw	r18, r8
    3498:	0e 94 9e 1a 	call	0x353c	; 0x353c <__mulohisi3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	8c 0d       	add	r24, r12
    34a2:	9d 1d       	adc	r25, r13
    34a4:	ae 1d       	adc	r26, r14
    34a6:	bf 1d       	adc	r27, r15
    34a8:	b7 ff       	sbrs	r27, 7
    34aa:	03 c0       	rjmp	.+6      	; 0x34b2 <do_rand+0x72>
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	a1 09       	sbc	r26, r1
    34b0:	b0 48       	sbci	r27, 0x80	; 128
    34b2:	88 83       	st	Y, r24
    34b4:	99 83       	std	Y+1, r25	; 0x01
    34b6:	aa 83       	std	Y+2, r26	; 0x02
    34b8:	bb 83       	std	Y+3, r27	; 0x03
    34ba:	9f 77       	andi	r25, 0x7F	; 127
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	ff 90       	pop	r15
    34c2:	ef 90       	pop	r14
    34c4:	df 90       	pop	r13
    34c6:	cf 90       	pop	r12
    34c8:	bf 90       	pop	r11
    34ca:	af 90       	pop	r10
    34cc:	9f 90       	pop	r9
    34ce:	8f 90       	pop	r8
    34d0:	08 95       	ret

000034d2 <rand_r>:
    34d2:	0e 94 20 1a 	call	0x3440	; 0x3440 <do_rand>
    34d6:	08 95       	ret

000034d8 <rand>:
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	98 e2       	ldi	r25, 0x28	; 40
    34dc:	0e 94 20 1a 	call	0x3440	; 0x3440 <do_rand>
    34e0:	08 95       	ret

000034e2 <srand>:
    34e2:	a0 e0       	ldi	r26, 0x00	; 0
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
    34ea:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    34ee:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
    34f2:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
    34f6:	08 95       	ret

000034f8 <__divmodsi4>:
    34f8:	05 2e       	mov	r0, r21
    34fa:	97 fb       	bst	r25, 7
    34fc:	1e f4       	brtc	.+6      	; 0x3504 <__divmodsi4+0xc>
    34fe:	00 94       	com	r0
    3500:	0e 94 93 1a 	call	0x3526	; 0x3526 <__negsi2>
    3504:	57 fd       	sbrc	r21, 7
    3506:	07 d0       	rcall	.+14     	; 0x3516 <__divmodsi4_neg2>
    3508:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    350c:	07 fc       	sbrc	r0, 7
    350e:	03 d0       	rcall	.+6      	; 0x3516 <__divmodsi4_neg2>
    3510:	4e f4       	brtc	.+18     	; 0x3524 <__divmodsi4_exit>
    3512:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__negsi2>

00003516 <__divmodsi4_neg2>:
    3516:	50 95       	com	r21
    3518:	40 95       	com	r20
    351a:	30 95       	com	r19
    351c:	21 95       	neg	r18
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	4f 4f       	sbci	r20, 0xFF	; 255
    3522:	5f 4f       	sbci	r21, 0xFF	; 255

00003524 <__divmodsi4_exit>:
    3524:	08 95       	ret

00003526 <__negsi2>:
    3526:	90 95       	com	r25
    3528:	80 95       	com	r24
    352a:	70 95       	com	r23
    352c:	61 95       	neg	r22
    352e:	7f 4f       	sbci	r23, 0xFF	; 255
    3530:	8f 4f       	sbci	r24, 0xFF	; 255
    3532:	9f 4f       	sbci	r25, 0xFF	; 255
    3534:	08 95       	ret

00003536 <__mulshisi3>:
    3536:	b7 ff       	sbrs	r27, 7
    3538:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__muluhisi3>

0000353c <__mulohisi3>:
    353c:	0e 94 15 1a 	call	0x342a	; 0x342a <__muluhisi3>
    3540:	82 1b       	sub	r24, r18
    3542:	93 0b       	sbc	r25, r19
    3544:	08 95       	ret

00003546 <__do_global_dtors>:
    3546:	10 e0       	ldi	r17, 0x00	; 0
    3548:	c9 e5       	ldi	r28, 0x59	; 89
    354a:	d0 e0       	ldi	r29, 0x00	; 0
    354c:	04 c0       	rjmp	.+8      	; 0x3556 <__do_global_dtors+0x10>
    354e:	fe 01       	movw	r30, r28
    3550:	0e 94 00 1a 	call	0x3400	; 0x3400 <__tablejump2__>
    3554:	21 96       	adiw	r28, 0x01	; 1
    3556:	ca 35       	cpi	r28, 0x5A	; 90
    3558:	d1 07       	cpc	r29, r17
    355a:	c9 f7       	brne	.-14     	; 0x354e <__do_global_dtors+0x8>
    355c:	f8 94       	cli

0000355e <__stop_program>:
    355e:	ff cf       	rjmp	.-2      	; 0x355e <__stop_program>
