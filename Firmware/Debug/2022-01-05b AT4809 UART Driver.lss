
2022-01-05b AT4809 UART Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00001ac2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a7e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  00005a7e  00001a7e  00001b32  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000da  00802804  00802804  00001b7a  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009a3d  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000035fc  00000000  00000000  0000b921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003371  00000000  00000000  0000ef1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a90  00000000  00000000  00012290  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000316d  00000000  00000000  00012d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006154  00000000  00000000  00015e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000340  00000000  00000000  0001bfe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__dtors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_4>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_7>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_17>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      68:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      6c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      70:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      74:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      78:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      7c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      80:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      84:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      88:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      8c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      90:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      94:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      98:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      9c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      a0:	cc 07       	cpc	r28, r28
      a2:	d4 07       	cpc	r29, r20
      a4:	df 07       	cpc	r29, r31
      a6:	ec 07       	cpc	r30, r28
      a8:	fb 07       	cpc	r31, r27
      aa:	03 08       	sbc	r0, r3
      ac:	0e 08       	sbc	r0, r14
      ae:	1b 08       	sbc	r1, r11

000000b0 <__ctors_start>:
      b0:	26 06       	cpc	r2, r22

000000b2 <__ctors_end>:
      b2:	2d 06       	cpc	r2, r29

000000b4 <__dtors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	df e3       	ldi	r29, 0x3F	; 63
      be:	de bf       	out	0x3e, r29	; 62

000000c0 <__do_clear_bss>:
      c0:	28 e2       	ldi	r18, 0x28	; 40
      c2:	a4 e0       	ldi	r26, 0x04	; 4
      c4:	b8 e2       	ldi	r27, 0x28	; 40
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3d       	cpi	r26, 0xDE	; 222
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>

000000d0 <__do_copy_data>:
      d0:	18 e2       	ldi	r17, 0x28	; 40
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b8 e2       	ldi	r27, 0x28	; 40
      d6:	e2 ec       	ldi	r30, 0xC2	; 194
      d8:	fa e1       	ldi	r31, 0x1A	; 26
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a4 30       	cpi	r26, 0x04	; 4
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	c9 e5       	ldi	r28, 0x59	; 89
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	21 97       	sbiw	r28, 0x01	; 1
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 8f 0c 	call	0x191e	; 0x191e <__tablejump2__>
      f6:	c8 35       	cpi	r28, 0x58	; 88
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <main>
     100:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__do_global_dtors>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <_Z12lcd_send_cmdh>:
	//***********************************************************************
	//	RETURN
	//***********************************************************************

	return;
}   //End function: lcd_print_s8
     108:	e0 e2       	ldi	r30, 0x20	; 32
     10a:	f4 e0       	ldi	r31, 0x04	; 4
     10c:	94 81       	ldd	r25, Z+4	; 0x04
     10e:	90 7f       	andi	r25, 0xF0	; 240
     110:	28 2f       	mov	r18, r24
     112:	22 95       	swap	r18
     114:	2f 70       	andi	r18, 0x0F	; 15
     116:	92 2b       	or	r25, r18
     118:	94 83       	std	Z+4, r25	; 0x04
     11a:	94 81       	ldd	r25, Z+4	; 0x04
     11c:	9f 7d       	andi	r25, 0xDF	; 223
     11e:	94 83       	std	Z+4, r25	; 0x04
     120:	94 81       	ldd	r25, Z+4	; 0x04
     122:	90 61       	ori	r25, 0x10	; 16
     124:	94 83       	std	Z+4, r25	; 0x04
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	11 97       	sbiw	r26, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <_Z12lcd_send_cmdh+0x22>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z12lcd_send_cmdh+0x28>
     130:	00 00       	nop
     132:	94 81       	ldd	r25, Z+4	; 0x04
     134:	9f 7e       	andi	r25, 0xEF	; 239
     136:	94 83       	std	Z+4, r25	; 0x04
     138:	a7 ee       	ldi	r26, 0xE7	; 231
     13a:	b3 e0       	ldi	r27, 0x03	; 3
     13c:	11 97       	sbiw	r26, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <_Z12lcd_send_cmdh+0x34>
     140:	00 c0       	rjmp	.+0      	; 0x142 <_Z12lcd_send_cmdh+0x3a>
     142:	00 00       	nop
     144:	94 81       	ldd	r25, Z+4	; 0x04
     146:	90 7f       	andi	r25, 0xF0	; 240
     148:	8f 70       	andi	r24, 0x0F	; 15
     14a:	89 2b       	or	r24, r25
     14c:	84 83       	std	Z+4, r24	; 0x04
     14e:	84 81       	ldd	r24, Z+4	; 0x04
     150:	80 61       	ori	r24, 0x10	; 16
     152:	84 83       	std	Z+4, r24	; 0x04
     154:	87 ee       	ldi	r24, 0xE7	; 231
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <_Z12lcd_send_cmdh+0x50>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <_Z12lcd_send_cmdh+0x56>
     15e:	00 00       	nop
     160:	84 81       	ldd	r24, Z+4	; 0x04
     162:	8f 7e       	andi	r24, 0xEF	; 239
     164:	84 83       	std	Z+4, r24	; 0x04
     166:	a7 ee       	ldi	r26, 0xE7	; 231
     168:	b3 e0       	ldi	r27, 0x03	; 3
     16a:	11 97       	sbiw	r26, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <_Z12lcd_send_cmdh+0x62>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <_Z12lcd_send_cmdh+0x68>
     170:	00 00       	nop
     172:	8f e0       	ldi	r24, 0x0F	; 15
     174:	97 e2       	ldi	r25, 0x27	; 39
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <_Z12lcd_send_cmdh+0x6e>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <_Z12lcd_send_cmdh+0x74>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <_Z8lcd_initv>:
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     186:	88 e2       	ldi	r24, 0x28	; 40
     188:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 84 00 	call	0x108	; 0x108 <_Z12lcd_send_cmdh>
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	80 32       	cpi	r24, 0x20	; 32
     19c:	40 f4       	brcc	.+16     	; 0x1ae <_Z8lcd_initv+0x2e>
     19e:	e8 2f       	mov	r30, r24
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	e3 5f       	subi	r30, 0xF3	; 243
     1a4:	f7 4d       	sbci	r31, 0xD7	; 215
     1a6:	90 e2       	ldi	r25, 0x20	; 32
     1a8:	90 83       	st	Z, r25
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <_Z8lcd_initv+0x1a>
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	38 f4       	brcc	.+14     	; 0x1c2 <_Z8lcd_initv+0x42>
     1b4:	e8 2f       	mov	r30, r24
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	e7 5f       	subi	r30, 0xF7	; 247
     1ba:	f7 4d       	sbci	r31, 0xD7	; 215
     1bc:	10 82       	st	Z, r1
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	f7 cf       	rjmp	.-18     	; 0x1b0 <_Z8lcd_initv+0x30>
     1c2:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <lcd_cfg_flags>
     1c6:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <lcd_error>
     1ca:	08 95       	ret

000001cc <_Z10lcd_updatev>:
     1cc:	cf 93       	push	r28
     1ce:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <_ZZ10lcd_updatevE6status>
     1d2:	98 2f       	mov	r25, r24
     1d4:	92 95       	swap	r25
     1d6:	96 95       	lsr	r25
     1d8:	97 70       	andi	r25, 0x07	; 7
     1da:	93 70       	andi	r25, 0x03	; 3
     1dc:	c8 2f       	mov	r28, r24
     1de:	cf 71       	andi	r28, 0x1F	; 31
     1e0:	8c 2f       	mov	r24, r28
     1e2:	91 11       	cpse	r25, r1
     1e4:	aa c0       	rjmp	.+340    	; 0x33a <_Z10lcd_updatev+0x16e>
     1e6:	5c 2f       	mov	r21, r28
     1e8:	57 70       	andi	r21, 0x07	; 7
     1ea:	6f ef       	ldi	r22, 0xFF	; 255
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	05 2e       	mov	r0, r21
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_Z10lcd_updatev+0x2a>
     1f2:	66 0f       	add	r22, r22
     1f4:	77 1f       	adc	r23, r23
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_Z10lcd_updatev+0x26>
     1fa:	9c 2f       	mov	r25, r28
     1fc:	98 71       	andi	r25, 0x18	; 24
     1fe:	29 2f       	mov	r18, r25
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	35 95       	asr	r19
     204:	27 95       	ror	r18
     206:	35 95       	asr	r19
     208:	27 95       	ror	r18
     20a:	35 95       	asr	r19
     20c:	27 95       	ror	r18
     20e:	f9 01       	movw	r30, r18
     210:	e7 5f       	subi	r30, 0xF7	; 247
     212:	f7 4d       	sbci	r31, 0xD7	; 215
     214:	40 81       	ld	r20, Z
     216:	64 23       	and	r22, r20
     218:	a1 f0       	breq	.+40     	; 0x242 <_Z10lcd_updatev+0x76>
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	01 c0       	rjmp	.+2      	; 0x220 <_Z10lcd_updatev+0x54>
     21e:	99 0f       	add	r25, r25
     220:	5a 95       	dec	r21
     222:	ea f7       	brpl	.-6      	; 0x21e <_Z10lcd_updatev+0x52>
     224:	01 c0       	rjmp	.+2      	; 0x228 <_Z10lcd_updatev+0x5c>
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	99 23       	and	r25, r25
     22a:	09 f4       	brne	.+2      	; 0x22e <_Z10lcd_updatev+0x62>
     22c:	44 c0       	rjmp	.+136    	; 0x2b6 <_Z10lcd_updatev+0xea>
     22e:	29 2f       	mov	r18, r25
     230:	24 23       	and	r18, r20
     232:	c9 f7       	brne	.-14     	; 0x226 <_Z10lcd_updatev+0x5a>
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	99 0f       	add	r25, r25
     238:	b9 f7       	brne	.-18     	; 0x228 <_Z10lcd_updatev+0x5c>
     23a:	23 e6       	ldi	r18, 0x63	; 99
     23c:	20 93 07 28 	sts	0x2807, r18	; 0x802807 <lcd_error>
     240:	f3 cf       	rjmp	.-26     	; 0x228 <_Z10lcd_updatev+0x5c>
     242:	89 2f       	mov	r24, r25
     244:	52 2f       	mov	r21, r18
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	01 c0       	rjmp	.+2      	; 0x24c <_Z10lcd_updatev+0x80>
     24a:	95 e0       	ldi	r25, 0x05	; 5
     24c:	95 30       	cpi	r25, 0x05	; 5
     24e:	f0 f4       	brcc	.+60     	; 0x28c <_Z10lcd_updatev+0xc0>
     250:	25 2f       	mov	r18, r21
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	e7 5f       	subi	r30, 0xF7	; 247
     258:	f7 4d       	sbci	r31, 0xD7	; 215
     25a:	40 81       	ld	r20, Z
     25c:	41 11       	cpse	r20, r1
     25e:	f5 cf       	rjmp	.-22     	; 0x24a <_Z10lcd_updatev+0x7e>
     260:	9f 5f       	subi	r25, 0xFF	; 255
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	24 30       	cpi	r18, 0x04	; 4
     268:	31 05       	cpc	r19, r1
     26a:	14 f4       	brge	.+4      	; 0x270 <_Z10lcd_updatev+0xa4>
     26c:	5f 5f       	subi	r21, 0xFF	; 255
     26e:	01 c0       	rjmp	.+2      	; 0x272 <_Z10lcd_updatev+0xa6>
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	28 5f       	subi	r18, 0xF8	; 248
     278:	3f 4f       	sbci	r19, 0xFF	; 255
     27a:	20 32       	cpi	r18, 0x20	; 32
     27c:	31 05       	cpc	r19, r1
     27e:	14 f0       	brlt	.+4      	; 0x284 <_Z10lcd_updatev+0xb8>
     280:	88 51       	subi	r24, 0x18	; 24
     282:	01 c0       	rjmp	.+2      	; 0x286 <_Z10lcd_updatev+0xba>
     284:	88 5f       	subi	r24, 0xF8	; 248
     286:	95 30       	cpi	r25, 0x05	; 5
     288:	08 f3       	brcs	.-62     	; 0x24c <_Z10lcd_updatev+0x80>
     28a:	1e c1       	rjmp	.+572    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     28c:	e5 2f       	mov	r30, r21
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	e7 5f       	subi	r30, 0xF7	; 247
     292:	f7 4d       	sbci	r31, 0xD7	; 215
     294:	30 81       	ld	r19, Z
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <_Z10lcd_updatev+0xd0>
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	99 23       	and	r25, r25
     29e:	59 f0       	breq	.+22     	; 0x2b6 <_Z10lcd_updatev+0xea>
     2a0:	29 2f       	mov	r18, r25
     2a2:	23 23       	and	r18, r19
     2a4:	d1 f7       	brne	.-12     	; 0x29a <_Z10lcd_updatev+0xce>
     2a6:	99 0f       	add	r25, r25
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
     2aa:	91 11       	cpse	r25, r1
     2ac:	f7 cf       	rjmp	.-18     	; 0x29c <_Z10lcd_updatev+0xd0>
     2ae:	23 e6       	ldi	r18, 0x63	; 99
     2b0:	20 93 07 28 	sts	0x2807, r18	; 0x802807 <lcd_error>
     2b4:	f3 cf       	rjmp	.-26     	; 0x29c <_Z10lcd_updatev+0xd0>
     2b6:	98 2f       	mov	r25, r24
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	c1 f0       	breq	.+48     	; 0x2ec <_Z10lcd_updatev+0x120>
     2bc:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <_ZZ10lcd_updatevE6status+0x1>
     2c0:	96 95       	lsr	r25
     2c2:	9f 71       	andi	r25, 0x1F	; 31
     2c4:	89 13       	cpse	r24, r25
     2c6:	12 c0       	rjmp	.+36     	; 0x2ec <_Z10lcd_updatev+0x120>
     2c8:	e5 e0       	ldi	r30, 0x05	; 5
     2ca:	f8 e2       	ldi	r31, 0x28	; 40
     2cc:	90 81       	ld	r25, Z
     2ce:	9f 77       	andi	r25, 0x7F	; 127
     2d0:	90 83       	st	Z, r25
     2d2:	e8 2f       	mov	r30, r24
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	e3 5f       	subi	r30, 0xF3	; 243
     2d8:	f7 4d       	sbci	r31, 0xD7	; 215
     2da:	90 81       	ld	r25, Z
     2dc:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <__data_end>
     2e0:	e0 e2       	ldi	r30, 0x20	; 32
     2e2:	f4 e0       	ldi	r31, 0x04	; 4
     2e4:	24 81       	ldd	r18, Z+4	; 0x04
     2e6:	20 62       	ori	r18, 0x20	; 32
     2e8:	24 83       	std	Z+4, r18	; 0x04
     2ea:	18 c0       	rjmp	.+48     	; 0x31c <_Z10lcd_updatev+0x150>
     2ec:	e5 e0       	ldi	r30, 0x05	; 5
     2ee:	f8 e2       	ldi	r31, 0x28	; 40
     2f0:	90 81       	ld	r25, Z
     2f2:	90 68       	ori	r25, 0x80	; 128
     2f4:	90 83       	st	Z, r25
     2f6:	28 2f       	mov	r18, r24
     2f8:	20 71       	andi	r18, 0x10	; 16
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	22 0f       	add	r18, r18
     2fe:	33 1f       	adc	r19, r19
     300:	22 0f       	add	r18, r18
     302:	33 1f       	adc	r19, r19
     304:	92 2f       	mov	r25, r18
     306:	90 68       	ori	r25, 0x80	; 128
     308:	28 2f       	mov	r18, r24
     30a:	2f 70       	andi	r18, 0x0F	; 15
     30c:	92 2b       	or	r25, r18
     30e:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <__data_end>
     312:	e0 e2       	ldi	r30, 0x20	; 32
     314:	f4 e0       	ldi	r31, 0x04	; 4
     316:	24 81       	ldd	r18, Z+4	; 0x04
     318:	2f 7d       	andi	r18, 0xDF	; 223
     31a:	24 83       	std	Z+4, r18	; 0x04
     31c:	e6 e0       	ldi	r30, 0x06	; 6
     31e:	f8 e2       	ldi	r31, 0x28	; 40
     320:	20 81       	ld	r18, Z
     322:	21 60       	ori	r18, 0x01	; 1
     324:	20 83       	st	Z, r18
     326:	e0 e2       	ldi	r30, 0x20	; 32
     328:	f4 e0       	ldi	r31, 0x04	; 4
     32a:	24 81       	ldd	r18, Z+4	; 0x04
     32c:	20 7f       	andi	r18, 0xF0	; 240
     32e:	92 95       	swap	r25
     330:	9f 70       	andi	r25, 0x0F	; 15
     332:	92 2b       	or	r25, r18
     334:	94 83       	std	Z+4, r25	; 0x04
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	ba c0       	rjmp	.+372    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     33a:	91 30       	cpi	r25, 0x01	; 1
     33c:	39 f4       	brne	.+14     	; 0x34c <_Z10lcd_updatev+0x180>
     33e:	e0 e2       	ldi	r30, 0x20	; 32
     340:	f4 e0       	ldi	r31, 0x04	; 4
     342:	94 81       	ldd	r25, Z+4	; 0x04
     344:	90 61       	ori	r25, 0x10	; 16
     346:	94 83       	std	Z+4, r25	; 0x04
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	b1 c0       	rjmp	.+354    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     34c:	92 30       	cpi	r25, 0x02	; 2
     34e:	81 f4       	brne	.+32     	; 0x370 <_Z10lcd_updatev+0x1a4>
     350:	e0 e2       	ldi	r30, 0x20	; 32
     352:	f4 e0       	ldi	r31, 0x04	; 4
     354:	94 81       	ldd	r25, Z+4	; 0x04
     356:	9f 7e       	andi	r25, 0xEF	; 239
     358:	94 83       	std	Z+4, r25	; 0x04
     35a:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <_ZZ10lcd_updatevE6status>
     35e:	99 23       	and	r25, r25
     360:	0c f4       	brge	.+2      	; 0x364 <_Z10lcd_updatev+0x198>
     362:	a2 c0       	rjmp	.+324    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     364:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <_ZZ10lcd_updatevE6status+0x1>
     368:	90 ff       	sbrs	r25, 0
     36a:	a0 c0       	rjmp	.+320    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     36c:	93 e0       	ldi	r25, 0x03	; 3
     36e:	9f c0       	rjmp	.+318    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     370:	93 30       	cpi	r25, 0x03	; 3
     372:	09 f0       	breq	.+2      	; 0x376 <_Z10lcd_updatev+0x1aa>
     374:	95 c0       	rjmp	.+298    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     376:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <_ZZ10lcd_updatevE6status>
     37a:	20 78       	andi	r18, 0x80	; 128
     37c:	e1 f0       	breq	.+56     	; 0x3b6 <_Z10lcd_updatev+0x1ea>
     37e:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <_ZZ10lcd_updatevE6status+0x1>
     382:	30 ff       	sbrs	r19, 0
     384:	18 c0       	rjmp	.+48     	; 0x3b6 <_Z10lcd_updatev+0x1ea>
     386:	e6 e0       	ldi	r30, 0x06	; 6
     388:	f8 e2       	ldi	r31, 0x28	; 40
     38a:	23 2f       	mov	r18, r19
     38c:	2e 7f       	andi	r18, 0xFE	; 254
     38e:	20 83       	st	Z, r18
     390:	30 91 04 28 	lds	r19, 0x2804	; 0x802804 <__data_end>
     394:	a0 e2       	ldi	r26, 0x20	; 32
     396:	b4 e0       	ldi	r27, 0x04	; 4
     398:	14 96       	adiw	r26, 0x04	; 4
     39a:	4c 91       	ld	r20, X
     39c:	14 97       	sbiw	r26, 0x04	; 4
     39e:	40 7f       	andi	r20, 0xF0	; 240
     3a0:	3f 70       	andi	r19, 0x0F	; 15
     3a2:	34 2b       	or	r19, r20
     3a4:	14 96       	adiw	r26, 0x04	; 4
     3a6:	3c 93       	st	X, r19
     3a8:	9c 2f       	mov	r25, r28
     3aa:	99 0f       	add	r25, r25
     3ac:	21 7c       	andi	r18, 0xC1	; 193
     3ae:	29 2b       	or	r18, r25
     3b0:	20 83       	st	Z, r18
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	7c c0       	rjmp	.+248    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     3b6:	22 23       	and	r18, r18
     3b8:	11 f1       	breq	.+68     	; 0x3fe <_Z10lcd_updatev+0x232>
     3ba:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <_ZZ10lcd_updatevE6status+0x1>
     3be:	90 fd       	sbrc	r25, 0
     3c0:	1e c0       	rjmp	.+60     	; 0x3fe <_Z10lcd_updatev+0x232>
     3c2:	e0 e2       	ldi	r30, 0x20	; 32
     3c4:	f4 e0       	ldi	r31, 0x04	; 4
     3c6:	94 81       	ldd	r25, Z+4	; 0x04
     3c8:	90 62       	ori	r25, 0x20	; 32
     3ca:	94 83       	std	Z+4, r25	; 0x04
     3cc:	a5 e0       	ldi	r26, 0x05	; 5
     3ce:	b8 e2       	ldi	r27, 0x28	; 40
     3d0:	9c 91       	ld	r25, X
     3d2:	9f 77       	andi	r25, 0x7F	; 127
     3d4:	9c 93       	st	X, r25
     3d6:	a6 e0       	ldi	r26, 0x06	; 6
     3d8:	b8 e2       	ldi	r27, 0x28	; 40
     3da:	9c 91       	ld	r25, X
     3dc:	91 60       	ori	r25, 0x01	; 1
     3de:	9c 93       	st	X, r25
     3e0:	ac 2f       	mov	r26, r28
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	a3 5f       	subi	r26, 0xF3	; 243
     3e6:	b7 4d       	sbci	r27, 0xD7	; 215
     3e8:	9c 91       	ld	r25, X
     3ea:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <__data_end>
     3ee:	24 81       	ldd	r18, Z+4	; 0x04
     3f0:	20 7f       	andi	r18, 0xF0	; 240
     3f2:	92 95       	swap	r25
     3f4:	9f 70       	andi	r25, 0x0F	; 15
     3f6:	92 2b       	or	r25, r18
     3f8:	94 83       	std	Z+4, r25	; 0x04
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	58 c0       	rjmp	.+176    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     3fe:	21 11       	cpse	r18, r1
     400:	4a c0       	rjmp	.+148    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     402:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <_ZZ10lcd_updatevE6status+0x1>
     406:	90 ff       	sbrs	r25, 0
     408:	46 c0       	rjmp	.+140    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     40a:	e6 e0       	ldi	r30, 0x06	; 6
     40c:	f8 e2       	ldi	r31, 0x28	; 40
     40e:	9e 7f       	andi	r25, 0xFE	; 254
     410:	90 83       	st	Z, r25
     412:	30 91 04 28 	lds	r19, 0x2804	; 0x802804 <__data_end>
     416:	e0 e2       	ldi	r30, 0x20	; 32
     418:	f4 e0       	ldi	r31, 0x04	; 4
     41a:	94 81       	ldd	r25, Z+4	; 0x04
     41c:	29 2f       	mov	r18, r25
     41e:	20 7f       	andi	r18, 0xF0	; 240
     420:	93 2f       	mov	r25, r19
     422:	9f 70       	andi	r25, 0x0F	; 15
     424:	92 2b       	or	r25, r18
     426:	94 83       	std	Z+4, r25	; 0x04
     428:	ec 2f       	mov	r30, r28
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	e3 5f       	subi	r30, 0xF3	; 243
     42e:	f7 4d       	sbci	r31, 0xD7	; 215
     430:	90 81       	ld	r25, Z
     432:	39 13       	cpse	r19, r25
     434:	18 c0       	rjmp	.+48     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     436:	ec 2f       	mov	r30, r28
     438:	e8 71       	andi	r30, 0x18	; 24
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	f5 95       	asr	r31
     43e:	e7 95       	ror	r30
     440:	f5 95       	asr	r31
     442:	e7 95       	ror	r30
     444:	f5 95       	asr	r31
     446:	e7 95       	ror	r30
     448:	9c 2f       	mov	r25, r28
     44a:	97 70       	andi	r25, 0x07	; 7
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	9a 95       	dec	r25
     458:	e2 f7       	brpl	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     45a:	e7 5f       	subi	r30, 0xF7	; 247
     45c:	f7 4d       	sbci	r31, 0xD7	; 215
     45e:	20 95       	com	r18
     460:	90 81       	ld	r25, Z
     462:	92 23       	and	r25, r18
     464:	90 83       	st	Z, r25
     466:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <_ZZ10lcd_updatevE6status+0x1>
     46a:	96 95       	lsr	r25
     46c:	9f 71       	andi	r25, 0x1F	; 31
     46e:	29 2f       	mov	r18, r25
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	2f 5f       	subi	r18, 0xFF	; 255
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	20 32       	cpi	r18, 0x20	; 32
     478:	31 05       	cpc	r19, r1
     47a:	14 f4       	brge	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47c:	9f 5f       	subi	r25, 0xFF	; 255
     47e:	01 c0       	rjmp	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	e6 e0       	ldi	r30, 0x06	; 6
     484:	f8 e2       	ldi	r31, 0x28	; 40
     486:	9f 71       	andi	r25, 0x1F	; 31
     488:	99 0f       	add	r25, r25
     48a:	20 81       	ld	r18, Z
     48c:	21 7c       	andi	r18, 0xC1	; 193
     48e:	92 2b       	or	r25, r18
     490:	90 83       	st	Z, r25
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0c c0       	rjmp	.+24     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     496:	93 e6       	ldi	r25, 0x63	; 99
     498:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <lcd_error>
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	07 c0       	rjmp	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a0:	23 e6       	ldi	r18, 0x63	; 99
     4a2:	20 93 07 28 	sts	0x2807, r18	; 0x802807 <lcd_error>
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	e5 e0       	ldi	r30, 0x05	; 5
     4b0:	f8 e2       	ldi	r31, 0x28	; 40
     4b2:	29 2f       	mov	r18, r25
     4b4:	22 95       	swap	r18
     4b6:	22 0f       	add	r18, r18
     4b8:	20 7e       	andi	r18, 0xE0	; 224
     4ba:	90 81       	ld	r25, Z
     4bc:	9f 79       	andi	r25, 0x9F	; 159
     4be:	92 2b       	or	r25, r18
     4c0:	8f 71       	andi	r24, 0x1F	; 31
     4c2:	90 7e       	andi	r25, 0xE0	; 224
     4c4:	89 2b       	or	r24, r25
     4c6:	80 83       	st	Z, r24
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <_Z14lcd_print_charhh>:
     4cc:	81 32       	cpi	r24, 0x21	; 33
     4ce:	20 f0       	brcs	.+8      	; 0x4d8 <_Z14lcd_print_charhh+0xc>
     4d0:	8a e0       	ldi	r24, 0x0A	; 10
     4d2:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <lcd_error>
     4d6:	08 95       	ret
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	e3 5f       	subi	r30, 0xF3	; 243
     4e0:	f7 4d       	sbci	r31, 0xD7	; 215
     4e2:	90 81       	ld	r25, Z
     4e4:	96 17       	cp	r25, r22
     4e6:	e1 f0       	breq	.+56     	; 0x520 <_Z14lcd_print_charhh+0x54>
     4e8:	f9 01       	movw	r30, r18
     4ea:	e3 5f       	subi	r30, 0xF3	; 243
     4ec:	f7 4d       	sbci	r31, 0xD7	; 215
     4ee:	60 83       	st	Z, r22
     4f0:	e8 2f       	mov	r30, r24
     4f2:	e8 71       	andi	r30, 0x18	; 24
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	f5 95       	asr	r31
     4f8:	e7 95       	ror	r30
     4fa:	f5 95       	asr	r31
     4fc:	e7 95       	ror	r30
     4fe:	f5 95       	asr	r31
     500:	e7 95       	ror	r30
     502:	87 70       	andi	r24, 0x07	; 7
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	a9 01       	movw	r20, r18
     50a:	02 c0       	rjmp	.+4      	; 0x510 <_Z14lcd_print_charhh+0x44>
     50c:	44 0f       	add	r20, r20
     50e:	55 1f       	adc	r21, r21
     510:	8a 95       	dec	r24
     512:	e2 f7       	brpl	.-8      	; 0x50c <_Z14lcd_print_charhh+0x40>
     514:	ca 01       	movw	r24, r20
     516:	e7 5f       	subi	r30, 0xF7	; 247
     518:	f7 4d       	sbci	r31, 0xD7	; 215
     51a:	90 81       	ld	r25, Z
     51c:	89 2b       	or	r24, r25
     51e:	80 83       	st	Z, r24
     520:	08 95       	ret

00000522 <_Z13lcd_print_strhPKc>:
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	61 15       	cp	r22, r1
     52c:	71 05       	cpc	r23, r1
     52e:	b1 f0       	breq	.+44     	; 0x55c <_Z13lcd_print_strhPKc+0x3a>
     530:	8b 01       	movw	r16, r22
     532:	d8 2f       	mov	r29, r24
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	2c 2f       	mov	r18, r28
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	2d 0f       	add	r18, r29
     53c:	31 1d       	adc	r19, r1
     53e:	21 32       	cpi	r18, 0x21	; 33
     540:	31 05       	cpc	r19, r1
     542:	64 f4       	brge	.+24     	; 0x55c <_Z13lcd_print_strhPKc+0x3a>
     544:	f8 01       	movw	r30, r16
     546:	ec 0f       	add	r30, r28
     548:	f1 1d       	adc	r31, r1
     54a:	60 81       	ld	r22, Z
     54c:	66 23       	and	r22, r22
     54e:	31 f0       	breq	.+12     	; 0x55c <_Z13lcd_print_strhPKc+0x3a>
     550:	8c 2f       	mov	r24, r28
     552:	8d 0f       	add	r24, r29
     554:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z14lcd_print_charhh>
     558:	cf 5f       	subi	r28, 0xFF	; 255
     55a:	ed cf       	rjmp	.-38     	; 0x536 <_Z13lcd_print_strhPKc+0x14>
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <_Z13lcd_print_u16hj>:
**	RIGHT 	|123		LEFT	|123
**			|  1			 	|1
****************************************************************************/

void lcd_print_u16( uint8_t pos, uint16_t num )
{
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	60 97       	sbiw	r28, 0x10	; 16
     576:	cd bf       	out	0x3d, r28	; 61
     578:	de bf       	out	0x3e, r29	; 62
     57a:	f8 2e       	mov	r15, r24
     57c:	8b 01       	movw	r16, r22
            {
                //Bad parameters
                return 0;
            }
            //If: number is small enough
            if (num <= UINT8_MAX)
     57e:	6f 3f       	cpi	r22, 0xFF	; 255
     580:	71 05       	cpc	r23, r1
     582:	11 f0       	breq	.+4      	; 0x588 <_Z13lcd_print_u16hj+0x22>
     584:	08 f0       	brcs	.+2      	; 0x588 <_Z13lcd_print_u16hj+0x22>
     586:	4e c0       	rjmp	.+156    	; 0x624 <_Z13lcd_print_u16hj+0xbe>
            const uint8_t base[Config::DIGIT8] =
            {
                100,
                10,
                1
            };
     588:	84 e6       	ldi	r24, 0x64	; 100
     58a:	8f 83       	std	Y+7, r24	; 0x07
     58c:	8a e0       	ldi	r24, 0x0A	; 10
     58e:	88 87       	std	Y+8, r24	; 0x08
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	89 87       	std	Y+9, r24	; 0x09
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
     594:	20 e0       	ldi	r18, 0x00	; 0
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT8; t++)
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	33 30       	cpi	r19, 0x03	; 3
     59a:	d8 f5       	brcc	.+118    	; 0x612 <_Z13lcd_print_u16hj+0xac>
            {
                //If the base is bigger or equal than the number (division is meaningful)
                if (base[t] <= num)
     59c:	e7 e0       	ldi	r30, 0x07	; 7
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 0f       	add	r30, r28
     5a2:	fd 1f       	adc	r31, r29
     5a4:	e3 0f       	add	r30, r19
     5a6:	f1 1d       	adc	r31, r1
     5a8:	40 81       	ld	r20, Z
     5aa:	04 17       	cp	r16, r20
     5ac:	d8 f0       	brcs	.+54     	; 0x5e4 <_Z13lcd_print_u16hj+0x7e>
                {
                    //Divide number by base, get the digit. Bounded to 0 to 9.
                    tmp = num / base[t];
     5ae:	80 2f       	mov	r24, r16
     5b0:	64 2f       	mov	r22, r20
     5b2:	0e 94 4d 0c 	call	0x189a	; 0x189a <__udivmodqi4>
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     5b6:	62 2f       	mov	r22, r18
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	64 30       	cpi	r22, 0x04	; 4
     5bc:	71 05       	cpc	r23, r1
     5be:	1c f0       	brlt	.+6      	; 0x5c6 <_Z13lcd_print_u16hj+0x60>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     5c0:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     5c2:	00 e0       	ldi	r16, 0x00	; 0
     5c4:	8b c0       	rjmp	.+278    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //Write the digit
                    str[ index ] = '0' +tmp;
     5c6:	e1 e0       	ldi	r30, 0x01	; 1
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	ec 0f       	add	r30, r28
     5cc:	fd 1f       	adc	r31, r29
     5ce:	e2 0f       	add	r30, r18
     5d0:	f1 1d       	adc	r31, r1
     5d2:	90 e3       	ldi	r25, 0x30	; 48
     5d4:	98 0f       	add	r25, r24
     5d6:	90 83       	st	Z, r25
                    //Update the number
                    num = num - base[t] * tmp;
     5d8:	48 9f       	mul	r20, r24
     5da:	00 19       	sub	r16, r0
     5dc:	11 24       	eor	r1, r1
                    //I have found a meaningful digit
                    flag = false;
                    //Jump to the next digit
                    index++;
     5de:	2f 5f       	subi	r18, 0xFF	; 255
                    //Write the digit
                    str[ index ] = '0' +tmp;
                    //Update the number
                    num = num - base[t] * tmp;
                    //I have found a meaningful digit
                    flag = false;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	15 c0       	rjmp	.+42     	; 0x60e <_Z13lcd_print_u16hj+0xa8>
                    //Jump to the next digit
                    index++;
                }
                //If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
                else if ( (flag == true) && (t != (Config::DIGIT8 -1)) )
     5e4:	88 23       	and	r24, r24
     5e6:	11 f0       	breq	.+4      	; 0x5ec <_Z13lcd_print_u16hj+0x86>
     5e8:	32 30       	cpi	r19, 0x02	; 2
     5ea:	89 f4       	brne	.+34     	; 0x60e <_Z13lcd_print_u16hj+0xa8>
                }
                //If: I have a meaningful zero
                else
                {
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     5ec:	42 2f       	mov	r20, r18
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	44 30       	cpi	r20, 0x04	; 4
     5f2:	51 05       	cpc	r21, r1
     5f4:	1c f0       	brlt	.+6      	; 0x5fc <_Z13lcd_print_u16hj+0x96>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     5f6:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	70 c0       	rjmp	.+224    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //It's a zero
                    str[ index ] = '0';
     5fc:	e1 e0       	ldi	r30, 0x01	; 1
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	ec 0f       	add	r30, r28
     602:	fd 1f       	adc	r31, r29
     604:	e2 0f       	add	r30, r18
     606:	f1 1d       	adc	r31, r1
     608:	90 e3       	ldi	r25, 0x30	; 48
     60a:	90 83       	st	Z, r25
                    //Jump to the next digit
                    index++;
     60c:	2f 5f       	subi	r18, 0xFF	; 255
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT8; t++)
     60e:	3f 5f       	subi	r19, 0xFF	; 255
     610:	c3 cf       	rjmp	.-122    	; 0x598 <_Z13lcd_print_u16hj+0x32>
            //----------------------------------------------------------------
            //	RETURN
            //----------------------------------------------------------------

            //Append the terminator
            str[ index ] = Config::TERMINATOR;
     612:	e1 e0       	ldi	r30, 0x01	; 1
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	ec 0f       	add	r30, r28
     618:	fd 1f       	adc	r31, r29
     61a:	e2 0f       	add	r30, r18
     61c:	f1 1d       	adc	r31, r1
     61e:	10 82       	st	Z, r1
            DRETURN_ARG("digits written: %d | output >%s<\n", index, str);
            return index;
     620:	02 2f       	mov	r16, r18
     622:	5c c0       	rjmp	.+184    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                10000,
                1000,
                100,
                10,
                1
            };
     624:	8a e0       	ldi	r24, 0x0A	; 10
     626:	ee e7       	ldi	r30, 0x7E	; 126
     628:	fa e5       	ldi	r31, 0x5A	; 90
     62a:	de 01       	movw	r26, r28
     62c:	17 96       	adiw	r26, 0x07	; 7
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	8a 95       	dec	r24
     634:	e1 f7       	brne	.-8      	; 0x62e <_Z13lcd_print_u16hj+0xc8>
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
            //flag used to blank non meaningful zeros
            bool flag = true;
     636:	81 e0       	ldi	r24, 0x01	; 1
                1
            };
            //Fast counter
            uint8_t t, tmp;
            //index to the string
            uint8_t index = 0;
     638:	20 e0       	ldi	r18, 0x00	; 0
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT16; t++)
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	35 30       	cpi	r19, 0x05	; 5
     63e:	08 f0       	brcs	.+2      	; 0x642 <_Z13lcd_print_u16hj+0xdc>
     640:	45 c0       	rjmp	.+138    	; 0x6cc <_Z13lcd_print_u16hj+0x166>
            {
                //If the base is bigger or equal than the number (division is meaningful)
                if (base[t] <= num)
     642:	e3 2f       	mov	r30, r19
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	4c 0f       	add	r20, r28
     650:	5d 1f       	adc	r21, r29
     652:	e4 0f       	add	r30, r20
     654:	f5 1f       	adc	r31, r21
     656:	06 80       	ldd	r0, Z+6	; 0x06
     658:	f7 81       	ldd	r31, Z+7	; 0x07
     65a:	e0 2d       	mov	r30, r0
     65c:	0e 17       	cp	r16, r30
     65e:	1f 07       	cpc	r17, r31
     660:	f0 f0       	brcs	.+60     	; 0x69e <_Z13lcd_print_u16hj+0x138>
                {
                    //Divide number by base, get the digit. Bounded to 0 to 9.
                    tmp = num / base[t];
     662:	c8 01       	movw	r24, r16
     664:	bf 01       	movw	r22, r30
     666:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__udivmodhi4>
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     66a:	82 2f       	mov	r24, r18
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	04 97       	sbiw	r24, 0x04	; 4
     670:	1c f0       	brlt	.+6      	; 0x678 <_Z13lcd_print_u16hj+0x112>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     672:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     674:	00 e0       	ldi	r16, 0x00	; 0
     676:	32 c0       	rjmp	.+100    	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //Write the digit
                    str[ index ] = '0' +tmp;
     678:	a1 e0       	ldi	r26, 0x01	; 1
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	ac 0f       	add	r26, r28
     67e:	bd 1f       	adc	r27, r29
     680:	a2 0f       	add	r26, r18
     682:	b1 1d       	adc	r27, r1
     684:	80 e3       	ldi	r24, 0x30	; 48
     686:	86 0f       	add	r24, r22
     688:	8c 93       	st	X, r24
                    //Update the number
                    num = num - base[t] * tmp;
     68a:	6e 9f       	mul	r22, r30
     68c:	c0 01       	movw	r24, r0
     68e:	6f 9f       	mul	r22, r31
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	08 1b       	sub	r16, r24
     696:	19 0b       	sbc	r17, r25
                    //I have found a meaningful digit
                    flag = false;
                    //Jump to the next digit
                    index++;
     698:	2f 5f       	subi	r18, 0xFF	; 255
                    //Write the digit
                    str[ index ] = '0' +tmp;
                    //Update the number
                    num = num - base[t] * tmp;
                    //I have found a meaningful digit
                    flag = false;
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	15 c0       	rjmp	.+42     	; 0x6c8 <_Z13lcd_print_u16hj+0x162>
                    //Jump to the next digit
                    index++;
                }
                //If: The base is smaller then the number, and I have yet to find a non zero digit, and I'm not to the last digit
                else if ( (flag == true) && (t != (Config::DIGIT16 -1)) )
     69e:	88 23       	and	r24, r24
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <_Z13lcd_print_u16hj+0x140>
     6a2:	34 30       	cpi	r19, 0x04	; 4
     6a4:	89 f4       	brne	.+34     	; 0x6c8 <_Z13lcd_print_u16hj+0x162>
                }
                //If: I have a meaningful zero
                else
                {
                    //If: index would overflow. Need an extra slot for the final teminator
                    if ( (SAFETY_CHECKS == true) && (index >= (str_len -Config::STRING_TERMINATOR_SIZE)) )
     6a6:	42 2f       	mov	r20, r18
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	44 30       	cpi	r20, 0x04	; 4
     6ac:	51 05       	cpc	r21, r1
     6ae:	1c f0       	brlt	.+6      	; 0x6b6 <_Z13lcd_print_u16hj+0x150>
                    {
                        //Put a terminator in first position for safety
                        str[0] = Config::TERMINATOR;
     6b0:	19 82       	std	Y+1, r1	; 0x01
                        //Overflow occurred. Return 0 digits written
                        DRETURN_ARG("ERR: Not enough space: %d\n", str_len);
                        return 0;
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	13 c0       	rjmp	.+38     	; 0x6dc <_Z13lcd_print_u16hj+0x176>
                    }
                    //It's a zero
                    str[ index ] = '0';
     6b6:	e1 e0       	ldi	r30, 0x01	; 1
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ec 0f       	add	r30, r28
     6bc:	fd 1f       	adc	r31, r29
     6be:	e2 0f       	add	r30, r18
     6c0:	f1 1d       	adc	r31, r1
     6c2:	90 e3       	ldi	r25, 0x30	; 48
     6c4:	90 83       	st	Z, r25
                    //Jump to the next digit
                    index++;
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
            //----------------------------------------------------------------
            //	BODY
            //----------------------------------------------------------------

            //For all bases
            for (t = 0;t < Config::DIGIT16; t++)
     6c8:	3f 5f       	subi	r19, 0xFF	; 255
     6ca:	b8 cf       	rjmp	.-144    	; 0x63c <_Z13lcd_print_u16hj+0xd6>
            //----------------------------------------------------------------
            //	RETURN
            //----------------------------------------------------------------

            //Append the terminator
            str[ index ] = Config::TERMINATOR;
     6cc:	e1 e0       	ldi	r30, 0x01	; 1
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ec 0f       	add	r30, r28
     6d2:	fd 1f       	adc	r31, r29
     6d4:	e2 0f       	add	r30, r18
     6d6:	f1 1d       	adc	r31, r1
     6d8:	10 82       	st	Z, r1
            DRETURN_ARG("digits written: %d | output >%s<\n", index, str);
            return index;
     6da:	02 2f       	mov	r16, r18
	//***********************************************************************

	//convert the number
	ret = User::String::num_to_str( num, User::String::Config::DIGIT16, str );
	//For: every digit
	for (u8t = 0;u8t < User::String::Config::DIGIT16; u8t++)
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	15 30       	cpi	r17, 0x05	; 5
     6e0:	38 f5       	brcc	.+78     	; 0x730 <_Z13lcd_print_u16hj+0x1ca>
	{
		//If: left alignment
		if (IS_BIT_ONE( lcd_cfg_flags, LCD_ADJ_FLAG ))
     6e2:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <lcd_cfg_flags>
     6e6:	80 ff       	sbrs	r24, 0
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <_Z13lcd_print_u16hj+0x198>
		{
			//If: I'm outside the number
			if (u8t >= ret)
     6ea:	10 17       	cp	r17, r16
     6ec:	c0 f4       	brcc	.+48     	; 0x71e <_Z13lcd_print_u16hj+0x1b8>
				u8t1 = ' ';
			}
			else
			{
				//Print number
				u8t1 = str[ u8t ];
     6ee:	e1 e0       	ldi	r30, 0x01	; 1
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ec 0f       	add	r30, r28
     6f4:	fd 1f       	adc	r31, r29
     6f6:	e1 0f       	add	r30, r17
     6f8:	f1 1d       	adc	r31, r1
     6fa:	60 81       	ld	r22, Z
     6fc:	13 c0       	rjmp	.+38     	; 0x724 <_Z13lcd_print_u16hj+0x1be>
		}	//End If: left alignment
		//If: right alignment
		else
		{
			//If: I'm outside the number (yes, that's the condition,right adjustment is messy)
			if ((u8t +ret) < User::String::Config::DIGIT16)
     6fe:	80 2f       	mov	r24, r16
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	81 0f       	add	r24, r17
     704:	91 1d       	adc	r25, r1
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	91 05       	cpc	r25, r1
     70a:	5c f0       	brlt	.+22     	; 0x722 <_Z13lcd_print_u16hj+0x1bc>
			}
			//If: I'm writing a digit
			else
			{
				//print number, I have to write digit in order with this adjust
				u8t1 = str[ u8t +ret -User::String::Config::DIGIT16 ];
     70c:	05 97       	sbiw	r24, 0x05	; 5
     70e:	e1 e0       	ldi	r30, 0x01	; 1
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ec 0f       	add	r30, r28
     714:	fd 1f       	adc	r31, r29
     716:	e8 0f       	add	r30, r24
     718:	f9 1f       	adc	r31, r25
     71a:	60 81       	ld	r22, Z
     71c:	03 c0       	rjmp	.+6      	; 0x724 <_Z13lcd_print_u16hj+0x1be>
		{
			//If: I'm outside the number
			if (u8t >= ret)
			{
				//I write spaces to blank older numbers
				u8t1 = ' ';
     71e:	60 e2       	ldi	r22, 0x20	; 32
     720:	01 c0       	rjmp	.+2      	; 0x724 <_Z13lcd_print_u16hj+0x1be>
		{
			//If: I'm outside the number (yes, that's the condition,right adjustment is messy)
			if ((u8t +ret) < User::String::Config::DIGIT16)
			{
				//I write spaces to blank older numbers
				u8t1 = ' ';
     722:	60 e2       	ldi	r22, 0x20	; 32
				//print number, I have to write digit in order with this adjust
				u8t1 = str[ u8t +ret -User::String::Config::DIGIT16 ];
			}
		}	//End If: right alignment
		//I want to call a single print, I have calculated the argument based on the settings of the print
		lcd_print_char( pos +u8t, u8t1 );
     724:	81 2f       	mov	r24, r17
     726:	8f 0d       	add	r24, r15
     728:	0e 94 66 02 	call	0x4cc	; 0x4cc <_Z14lcd_print_charhh>
	//***********************************************************************

	//convert the number
	ret = User::String::num_to_str( num, User::String::Config::DIGIT16, str );
	//For: every digit
	for (u8t = 0;u8t < User::String::Config::DIGIT16; u8t++)
     72c:	1f 5f       	subi	r17, 0xFF	; 255
     72e:	d7 cf       	rjmp	.-82     	; 0x6de <_Z13lcd_print_u16hj+0x178>
	//***********************************************************************
	//	RETURN
	//***********************************************************************

	return;
}   //End function: lcd_print_u16
     730:	60 96       	adiw	r28, 0x10	; 16
     732:	cd bf       	out	0x3d, r28	; 61
     734:	de bf       	out	0x3e, r29	; 62
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	08 95       	ret

00000742 <_Z10init_clockv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Main clock switch
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_gm, CLKCTRL_CLKSEL_gp, (CLKCTRL_CLKSEL_t)CLKCTRL_CLKSEL_OSC20M_gc);
     742:	88 ed       	ldi	r24, 0xD8	; 216
     744:	84 bf       	out	0x34, r24	; 52
     746:	e0 e6       	ldi	r30, 0x60	; 96
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	90 81       	ld	r25, Z
     74c:	9c 7f       	andi	r25, 0xFC	; 252
     74e:	90 83       	st	Z, r25
	//Configure CLK_OUT pin as disabled
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLA, CLKCTRL_CLKOUT_bm, CLKCTRL_CLKOUT_bp, 0);
     750:	84 bf       	out	0x34, r24	; 52
     752:	90 81       	ld	r25, Z
     754:	9f 77       	andi	r25, 0x7F	; 127
     756:	90 83       	st	Z, r25
	//Disable the main clock prescaler
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PEN_bm, CLKCTRL_PEN_bm, 0);
     758:	84 bf       	out	0x34, r24	; 52
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	9e 7f       	andi	r25, 0xFE	; 254
     75e:	91 83       	std	Z+1, r25	; 0x01
	//Set the main clock prescaler to 2
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_gm, CLKCTRL_PDIV_gp, (CLKCTRL_PDIV_t)CLKCTRL_PDIV_2X_gc);
     760:	84 bf       	out	0x34, r24	; 52
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	91 7e       	andi	r25, 0xE1	; 225
     766:	91 83       	std	Z+1, r25	; 0x01
	//Disable the clock multiplexer and prescaler protection
	INIT_CONFIG_PROTECTED( CLKCTRL.MCLKLOCK, CLKCTRL_LOCKEN_bm, CLKCTRL_LOCKEN_bp, 0);
     768:	84 bf       	out	0x34, r24	; 52
     76a:	92 81       	ldd	r25, Z+2	; 0x02
     76c:	9e 7f       	andi	r25, 0xFE	; 254
     76e:	92 83       	std	Z+2, r25	; 0x02

	CLKCTRL.OSC20MCTRLA |= CLKCTRL_RUNSTDBY_bm; //1<<1;
     770:	90 89       	ldd	r25, Z+16	; 0x10
     772:	92 60       	ori	r25, 0x02	; 2
     774:	90 8b       	std	Z+16, r25	; 0x10
	CCP = CCP_IOREG_gc;
     776:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCALIBB |= CLKCTRL_LOCK_bm; //1<<7
     778:	82 89       	ldd	r24, Z+18	; 0x12
     77a:	80 68       	ori	r24, 0x80	; 128
     77c:	82 8b       	std	Z+18, r24	; 0x12
     77e:	08 95       	ret

00000780 <_Z8init_pinv>:
	//!	PA5				: 
	//!	PA6				: UC_BTN
	//!	PA7				: LCD PWR#
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_A_CONFIG(	PIN_H,	PIN_R,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_R,	PIN_H );
     780:	e0 e0       	ldi	r30, 0x00	; 0
     782:	f4 e0       	ldi	r31, 0x04	; 4
     784:	81 e8       	ldi	r24, 0x81	; 129
     786:	80 83       	st	Z, r24
     788:	84 83       	std	Z+4, r24	; 0x04
     78a:	12 86       	std	Z+10, r1	; 0x0a
     78c:	10 8a       	std	Z+16, r1	; 0x10
     78e:	88 e0       	ldi	r24, 0x08	; 8
     790:	81 8b       	std	Z+17, r24	; 0x11
     792:	12 8a       	std	Z+18, r1	; 0x12
     794:	13 8a       	std	Z+19, r1	; 0x13
     796:	14 8a       	std	Z+20, r1	; 0x14
     798:	15 8a       	std	Z+21, r1	; 0x15
     79a:	86 8b       	std	Z+22, r24	; 0x16
     79c:	17 8a       	std	Z+23, r1	; 0x17
	//!	PB5,			: LCD RS
	//!	PB6				:
	//!	PB7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_B_CONFIG(	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
     79e:	e0 e2       	ldi	r30, 0x20	; 32
     7a0:	f4 e0       	ldi	r31, 0x04	; 4
     7a2:	8f e3       	ldi	r24, 0x3F	; 63
     7a4:	80 83       	st	Z, r24
     7a6:	14 82       	std	Z+4, r1	; 0x04
     7a8:	12 86       	std	Z+10, r1	; 0x0a
     7aa:	10 8a       	std	Z+16, r1	; 0x10
     7ac:	11 8a       	std	Z+17, r1	; 0x11
     7ae:	12 8a       	std	Z+18, r1	; 0x12
     7b0:	13 8a       	std	Z+19, r1	; 0x13
     7b2:	14 8a       	std	Z+20, r1	; 0x14
     7b4:	15 8a       	std	Z+21, r1	; 0x15
     7b6:	16 8a       	std	Z+22, r1	; 0x16
     7b8:	17 8a       	std	Z+23, r1	; 0x17
	//!	PC5				: UC_LED1 (BLUE)
	//!	PC6				:
	//!	PC7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_C_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z );
     7ba:	e0 e4       	ldi	r30, 0x40	; 64
     7bc:	f4 e0       	ldi	r31, 0x04	; 4
     7be:	80 e3       	ldi	r24, 0x30	; 48
     7c0:	80 83       	st	Z, r24
     7c2:	14 82       	std	Z+4, r1	; 0x04
     7c4:	12 86       	std	Z+10, r1	; 0x0a
     7c6:	10 8a       	std	Z+16, r1	; 0x10
     7c8:	11 8a       	std	Z+17, r1	; 0x11
     7ca:	12 8a       	std	Z+18, r1	; 0x12
     7cc:	13 8a       	std	Z+19, r1	; 0x13
     7ce:	14 8a       	std	Z+20, r1	; 0x14
     7d0:	15 8a       	std	Z+21, r1	; 0x15
     7d2:	16 8a       	std	Z+22, r1	; 0x16
     7d4:	17 8a       	std	Z+23, r1	; 0x17
	//!	PD5				:
	//!	PD6				: 
	//!	PD7				:	UC_SERVO_POWER#	| false = allow power to flow from the regulator channel 2 to the servo connectors
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_D_CONFIG(	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_H );
     7d6:	e0 e6       	ldi	r30, 0x60	; 96
     7d8:	f4 e0       	ldi	r31, 0x04	; 4
     7da:	80 e8       	ldi	r24, 0x80	; 128
     7dc:	80 83       	st	Z, r24
     7de:	84 83       	std	Z+4, r24	; 0x04
     7e0:	12 86       	std	Z+10, r1	; 0x0a
     7e2:	10 8a       	std	Z+16, r1	; 0x10
     7e4:	11 8a       	std	Z+17, r1	; 0x11
     7e6:	12 8a       	std	Z+18, r1	; 0x12
     7e8:	13 8a       	std	Z+19, r1	; 0x13
     7ea:	14 8a       	std	Z+20, r1	; 0x14
     7ec:	15 8a       	std	Z+21, r1	; 0x15
     7ee:	16 8a       	std	Z+22, r1	; 0x16
     7f0:	17 8a       	std	Z+23, r1	; 0x17
	//!	PE5				: 
	//!	PE6				: 
	//!	PE7				: 
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_E_CONFIG(	PIN_L,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
     7f2:	e0 e8       	ldi	r30, 0x80	; 128
     7f4:	f4 e0       	ldi	r31, 0x04	; 4
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	80 83       	st	Z, r24
     7fa:	14 82       	std	Z+4, r1	; 0x04
     7fc:	12 86       	std	Z+10, r1	; 0x0a
     7fe:	10 8a       	std	Z+16, r1	; 0x10
     800:	11 8a       	std	Z+17, r1	; 0x11
     802:	12 8a       	std	Z+18, r1	; 0x12
     804:	13 8a       	std	Z+19, r1	; 0x13
     806:	14 8a       	std	Z+20, r1	; 0x14
     808:	15 8a       	std	Z+21, r1	; 0x15
     80a:	16 8a       	std	Z+22, r1	; 0x16
     80c:	17 8a       	std	Z+23, r1	; 0x17
	//!	PF5				: 
	//!	PF6				:
	//!	PF7				:
	//----------------------------------------------------------------
	//				0		1		2		3		4		5		6		7
	PORT_F_CONFIG(	PIN_L,	PIN_L,	PIN_L,	PIN_L,	PIN_Z,	PIN_Z,	PIN_Z,	PIN_Z );
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	8f e0       	ldi	r24, 0x0F	; 15
     814:	80 83       	st	Z, r24
     816:	14 82       	std	Z+4, r1	; 0x04
     818:	12 86       	std	Z+10, r1	; 0x0a
     81a:	10 8a       	std	Z+16, r1	; 0x10
     81c:	11 8a       	std	Z+17, r1	; 0x11
     81e:	12 8a       	std	Z+18, r1	; 0x12
     820:	13 8a       	std	Z+19, r1	; 0x13
     822:	14 8a       	std	Z+20, r1	; 0x14
     824:	15 8a       	std	Z+21, r1	; 0x15
     826:	16 8a       	std	Z+22, r1	; 0x16
     828:	17 8a       	std	Z+23, r1	; 0x17
     82a:	08 95       	ret

0000082c <_Z8init_rtcv>:
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrla_tmp		= RTC.CTRLA;
     82c:	e0 e4       	ldi	r30, 0x40	; 64
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	90 81       	ld	r25, Z
	uint8_t intctrl_tmp		= RTC.INTCTRL;
     832:	42 81       	ldd	r20, Z+2	; 0x02
	uint8_t dgbctrl_tmp		= RTC.DBGCTRL;
     834:	55 81       	ldd	r21, Z+5	; 0x05
	uint8_t clksel_tmp		= RTC.CLKSEL;
     836:	37 81       	ldd	r19, Z+7	; 0x07
	uint8_t pitctrla_tmp	= RTC.PITCTRLA;
     838:	80 89       	ldd	r24, Z+16	; 0x10
	uint8_t pitintctrl_tmp	= RTC.PITINTCTRL;
     83a:	22 89       	ldd	r18, Z+18	; 0x12
	//! RTC Clock Source
	//----------------------------------------------------------------
	//	Clock source for the RTC timer. Select only one

	//Internal 32KHz oscillator
	SET_MASKED_BIT( clksel_tmp, RTC_CLKSEL_gm, RTC_CLKSEL_INT32K_gc );
     83c:	3c 7f       	andi	r19, 0xFC	; 252
     83e:	97 78       	andi	r25, 0x87	; 135
	//----------------------------------------------------------------
	//! RTC Clock Prescaler
	//----------------------------------------------------------------
	//	Set prescaler. Only activate one

	SET_MASKED_BIT( ctrla_tmp, RTC_PRESCALER_gm, RTC_PRESCALER_DIV1_gc );
     840:	91 68       	ori	r25, 0x81	; 129
	//----------------------------------------------------------------
	//! RTC Periodic Interrupt period
	//----------------------------------------------------------------

	//! Enable Periodic Interrupt timer
	SET_BIT( pitctrla_tmp, RTC_PITEN_bp );
     842:	81 60       	ori	r24, 0x01	; 1
	//! Period for the periodic interrupt. Activate only one
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_OFF_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC4_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC8_gc );
	//SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC16_gc );
	SET_MASKED_BIT( pitctrla_tmp, RTC_PERIOD_gm, RTC_PERIOD_CYC32_gc );
     844:	87 78       	andi	r24, 0x87	; 135
     846:	80 62       	ori	r24, 0x20	; 32
	//! Enable overflow interrupt
	//SET_BIT( intctrl_tmp, RTC_OVF_bp );
	//! Enable Compare Match interrupt
	//SET_BIT( intctrl_tmp, RTC_CMP_bp );
	//! Enable Periodic Interrupt timer
	SET_BIT( pitintctrl_tmp, RTC_PI_bp );
     848:	21 60       	ori	r18, 0x01	; 1
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------

	//Calibration PPM of the RTC counter. Meant to be done in software against more precise clock sources.
	RTC.CALIB = (uint8_t)0x00;
     84a:	16 82       	std	Z+6, r1	; 0x06

	//Wait for the ***
	//while (IS_BIT_ONE(RTC.STATUS, RTC_PERBUSY_bp));
	RTC.PER = (uint16_t)0;
     84c:	12 86       	std	Z+10, r1	; 0x0a
     84e:	13 86       	std	Z+11, r1	; 0x0b
	//Compare register for compare interrupt
	RTC.CMP = (uint16_t)0;
     850:	14 86       	std	Z+12, r1	; 0x0c
     852:	15 86       	std	Z+13, r1	; 0x0d

	//! Registers write back
	//Configuration registers
	RTC.DBGCTRL = dgbctrl_tmp;
     854:	55 83       	std	Z+5, r21	; 0x05
	RTC.CLKSEL = clksel_tmp;
     856:	37 83       	std	Z+7, r19	; 0x07
	RTC.PITCTRLA = pitctrla_tmp;
     858:	80 8b       	std	Z+16, r24	; 0x10
	//Write this register last as it activates the timer
	RTC.CTRLA = ctrla_tmp;
     85a:	90 83       	st	Z, r25
	//Activate interrupts
	RTC.INTCTRL = intctrl_tmp;
     85c:	42 83       	std	Z+2, r20	; 0x02
	RTC.PITINTCTRL = pitintctrl_tmp;
     85e:	22 8b       	std	Z+18, r18	; 0x12
     860:	08 95       	ret

00000862 <_Z4initv>:
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//Initialize clock systems
	init_clock();
     862:	0e 94 a1 03 	call	0x742	; 0x742 <_Z10init_clockv>
	
	//initialize pin configuration
	init_pin();
     866:	0e 94 c0 03 	call	0x780	; 0x780 <_Z8init_pinv>
	
	//Initialize RTC timer as Periodic interrupt source: RTC_PIT_vect
	init_rtc();
     86a:	0e 94 16 04 	call	0x82c	; 0x82c <_Z8init_rtcv>
     86e:	08 95       	ret

00000870 <__vector_4>:
//! @details
//! \n Periodic interrupt generated by the RTC from it's independent clock source
/***************************************************************************/

ISR( RTC_PIT_vect )
{	
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
     87a:	2f 93       	push	r18
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
	//	VARS
	//----------------------------------------------------------------
	//Local prescaler
	
	//if: tick is not issued
	if (g_isr_flags.fast_tick == false)
     880:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_isr_flags>
     884:	80 fd       	sbrc	r24, 0
     886:	06 c0       	rjmp	.+12     	; 0x894 <__vector_4+0x24>
	{
		//Issue a tick
		g_isr_flags.fast_tick = true;
     888:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_isr_flags>
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <g_isr_flags>
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <__vector_4+0x32>
	//if: slow tick is already issued
	else
	{
		//ERR OVERRUN
		//The main application could not keep up with the previous slow tick. Raise the alarm
		ISSUE_ERROR(ge_error_code, Error_code::ERR_OVERRUN_FAST_TICK);
     894:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <ge_error_code>
     898:	88 23       	and	r24, r24
     89a:	19 f0       	breq	.+6      	; 0x8a2 <__vector_4+0x32>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 dc 28 	sts	0x28DC, r24	; 0x8028dc <ge_error_code>
	//	Slow tick meant to handle slow services like LEDs
	
	//Prescaler
	static uint16_t pre_slow = 0;	
	//If: Tick
	if (pre_slow == 0)
     8a2:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <_ZZ10__vector_4E8pre_slow>
     8a6:	90 91 2e 28 	lds	r25, 0x282E	; 0x80282e <_ZZ10__vector_4E8pre_slow+0x1>
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	89 f4       	brne	.+34     	; 0x8d0 <__vector_4+0x60>
	{
		//if: tick is not issued
		if (g_isr_flags.slow_tick == false)
     8ae:	20 91 dd 28 	lds	r18, 0x28DD	; 0x8028dd <g_isr_flags>
     8b2:	21 fd       	sbrc	r18, 1
     8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <__vector_4+0x52>
		{
			//Issue a tick
			g_isr_flags.slow_tick = true;	
     8b6:	20 91 dd 28 	lds	r18, 0x28DD	; 0x8028dd <g_isr_flags>
     8ba:	22 60       	ori	r18, 0x02	; 2
     8bc:	20 93 dd 28 	sts	0x28DD, r18	; 0x8028dd <g_isr_flags>
     8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <__vector_4+0x60>
		//if: tick is already issued
		else
		{
			//ERR OVERRUN
			//The main application could not keep up with the previous slow tick. Raise the alarm
			ISSUE_ERROR(ge_error_code, Error_code::ERR_OVERRUN_SLOW_TICK);
     8c2:	20 91 dc 28 	lds	r18, 0x28DC	; 0x8028dc <ge_error_code>
     8c6:	22 23       	and	r18, r18
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <__vector_4+0x60>
     8ca:	22 e0       	ldi	r18, 0x02	; 2
     8cc:	20 93 dc 28 	sts	0x28DC, r18	; 0x8028dc <ge_error_code>
		}
		
	}
	//Increment, reset if counter is top before increment
	pre_slow = AT_TOP_INC( pre_slow, Prescaler::TOP_SLOW_TICK-1 );
     8d0:	87 3e       	cpi	r24, 0xE7	; 231
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	92 07       	cpc	r25, r18
     8d6:	11 f0       	breq	.+4      	; 0x8dc <__vector_4+0x6c>
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__vector_4+0x70>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	80 93 2d 28 	sts	0x282D, r24	; 0x80282d <_ZZ10__vector_4E8pre_slow>
     8e4:	90 93 2e 28 	sts	0x282E, r25	; 0x80282e <_ZZ10__vector_4E8pre_slow+0x1>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	RTC.PITINTFLAGS = RTC_PI_bm;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
}
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_17>:
//! @details
//! \n initialize clock systems
/***************************************************************************/

ISR( USART0_RXC_vect )
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	4f 93       	push	r20
     90e:	5f 93       	push	r21
     910:	6f 93       	push	r22
     912:	7f 93       	push	r23
     914:	8f 93       	push	r24
     916:	9f 93       	push	r25
     918:	af 93       	push	r26
     91a:	bf 93       	push	r27
     91c:	ef 93       	push	r30
     91e:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------
	
	//Execute the UART handler RX
	bool u1_fail = gcl_uart0.isr_rx_exe();
     920:	8d e9       	ldi	r24, 0x9D	; 157
     922:	98 e2       	ldi	r25, 0x28	; 40
     924:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN4User4Uart10isr_rx_exeEv>
	
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
}	//End ISR: USART0_RXC_vect
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <__vector_7>:
//! \n	>Last Servo Done: set PER to the time needed to do 20ms
//! \n	>Other Servo: Set OCR of said servo
/***************************************************************************/

ISR( TCA0_OVF_vect )
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------
	
	//Execute the servo driver ISR
	gc_servo.hal_timer_isr();
     96c:	8f e2       	ldi	r24, 0x2F	; 47
     96e:	98 e2       	ldi	r25, 0x28	; 40
     970:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN9OrangeBot5Servo13hal_timer_isrEv>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	//Manually clear the interrupt flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
}
     97a:	ff 91       	pop	r31
     97c:	ef 91       	pop	r30
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0
     998:	1f 90       	pop	r1
     99a:	18 95       	reti

0000099c <_Z41__static_initialization_and_destruction_0ii>:
//! @return void |
//! @details
/***************************************************************************/

void function_template( void )
{
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	8b 01       	movw	r16, r22
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	59 f4       	brne	.+22     	; 0x9c2 <_Z41__static_initialization_and_destruction_0ii+0x26>
     9ac:	6f 3f       	cpi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	41 f4       	brne	.+16     	; 0x9c2 <_Z41__static_initialization_and_destruction_0ii+0x26>
     9b2:	8d e9       	ldi	r24, 0x9D	; 157
     9b4:	98 e2       	ldi	r25, 0x28	; 40
     9b6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN4User4UartC1Ev>
     9ba:	8f e2       	ldi	r24, 0x2F	; 47
     9bc:	98 e2       	ldi	r25, 0x28	; 40
     9be:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN9OrangeBot5ServoC1Ev>
     9c2:	cd 2b       	or	r28, r29
     9c4:	59 f4       	brne	.+22     	; 0x9dc <_Z41__static_initialization_and_destruction_0ii+0x40>
     9c6:	0f 3f       	cpi	r16, 0xFF	; 255
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	41 f4       	brne	.+16     	; 0x9dc <_Z41__static_initialization_and_destruction_0ii+0x40>
     9cc:	8f e2       	ldi	r24, 0x2F	; 47
     9ce:	98 e2       	ldi	r25, 0x28	; 40
     9d0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN9OrangeBot5ServoD1Ev>
     9d4:	8d e9       	ldi	r24, 0x9D	; 157
     9d6:	98 e2       	ldi	r25, 0x28	; 40
     9d8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <_ZN4User4UartD1Ev>
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <main>:
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	ce 56       	subi	r28, 0x6E	; 110
     9f0:	d1 09       	sbc	r29, r1
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	de bf       	out	0x3e, r29	; 62
     9f6:	0e 94 31 04 	call	0x862	; 0x862 <_Z4initv>
     9fa:	e0 e0       	ldi	r30, 0x00	; 0
     9fc:	f4 e0       	ldi	r31, 0x04	; 4
     9fe:	84 81       	ldd	r24, Z+4	; 0x04
     a00:	80 68       	ori	r24, 0x80	; 128
     a02:	84 83       	std	Z+4, r24	; 0x04
     a04:	2f e7       	ldi	r18, 0x7F	; 127
     a06:	34 e8       	ldi	r19, 0x84	; 132
     a08:	6e e1       	ldi	r22, 0x1E	; 30
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	30 40       	sbci	r19, 0x00	; 0
     a0e:	60 40       	sbci	r22, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <main+0x24>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <main+0x2e>
     a14:	00 00       	nop
     a16:	84 81       	ldd	r24, Z+4	; 0x04
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	84 83       	std	Z+4, r24	; 0x04
     a1c:	7f e7       	ldi	r23, 0x7F	; 127
     a1e:	84 e8       	ldi	r24, 0x84	; 132
     a20:	9e e1       	ldi	r25, 0x1E	; 30
     a22:	71 50       	subi	r23, 0x01	; 1
     a24:	80 40       	sbci	r24, 0x00	; 0
     a26:	90 40       	sbci	r25, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <main+0x3c>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <main+0x46>
     a2c:	00 00       	nop
     a2e:	0e 94 c0 00 	call	0x180	; 0x180 <_Z8lcd_initv>
     a32:	68 eb       	ldi	r22, 0xB8	; 184
     a34:	7a e5       	ldi	r23, 0x5A	; 90
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 91 02 	call	0x522	; 0x522 <_Z13lcd_print_strhPKc>
     a3c:	6d eb       	ldi	r22, 0xBD	; 189
     a3e:	7a e5       	ldi	r23, 0x5A	; 90
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	0e 94 91 02 	call	0x522	; 0x522 <_Z13lcd_print_strhPKc>
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN4User4UartC1Ev>
     a4e:	8f e3       	ldi	r24, 0x3F	; 63
     a50:	fe 01       	movw	r30, r28
     a52:	31 96       	adiw	r30, 0x01	; 1
     a54:	ad e9       	ldi	r26, 0x9D	; 157
     a56:	b8 e2       	ldi	r27, 0x28	; 40
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <main+0x72>
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	0e 94 75 0b 	call	0x16ea	; 0x16ea <_ZN4User4UartD1Ev>
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 bc 07 	call	0xf78	; 0xf78 <_ZN9OrangeBot5ServoC1Ev>
     a70:	8e e6       	ldi	r24, 0x6E	; 110
     a72:	fe 01       	movw	r30, r28
     a74:	31 96       	adiw	r30, 0x01	; 1
     a76:	af e2       	ldi	r26, 0x2F	; 47
     a78:	b8 e2       	ldi	r27, 0x28	; 40
     a7a:	01 90       	ld	r0, Z+
     a7c:	0d 92       	st	X+, r0
     a7e:	8a 95       	dec	r24
     a80:	e1 f7       	brne	.-8      	; 0xa7a <main+0x94>
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN9OrangeBot5ServoD1Ev>
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	8f e2       	ldi	r24, 0x2F	; 47
     a8e:	98 e2       	ldi	r25, 0x28	; 40
     a90:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_ZN9OrangeBot5Servo5powerEb>
     a94:	78 94       	sei
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <srand>
     a9e:	e1 2c       	mov	r14, r1
     aa0:	f1 2c       	mov	r15, r1
     aa2:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_isr_flags>
     aa6:	80 ff       	sbrs	r24, 0
     aa8:	24 c0       	rjmp	.+72     	; 0xaf2 <main+0x10c>
     aaa:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_isr_flags>
     aae:	8e 7f       	andi	r24, 0xFE	; 254
     ab0:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <g_isr_flags>
     ab4:	e0 e4       	ldi	r30, 0x40	; 64
     ab6:	f4 e0       	ldi	r31, 0x04	; 4
     ab8:	24 81       	ldd	r18, Z+4	; 0x04
     aba:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7f4408>
     abe:	98 2f       	mov	r25, r24
     ac0:	90 74       	andi	r25, 0x40	; 64
     ac2:	89 2f       	mov	r24, r25
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	08 2e       	mov	r0, r24
     ac8:	89 2f       	mov	r24, r25
     aca:	00 0c       	add	r0, r0
     acc:	88 1f       	adc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	00 0c       	add	r0, r0
     ad2:	88 1f       	adc	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	82 95       	swap	r24
     adc:	92 95       	swap	r25
     ade:	90 7f       	andi	r25, 0xF0	; 240
     ae0:	98 27       	eor	r25, r24
     ae2:	80 7f       	andi	r24, 0xF0	; 240
     ae4:	98 27       	eor	r25, r24
     ae6:	92 2f       	mov	r25, r18
     ae8:	9f 7d       	andi	r25, 0xDF	; 223
     aea:	89 2b       	or	r24, r25
     aec:	84 83       	std	Z+4, r24	; 0x04
     aee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z10lcd_updatev>
     af2:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_isr_flags>
     af6:	81 ff       	sbrs	r24, 1
     af8:	a4 c0       	rjmp	.+328    	; 0xc42 <main+0x25c>
     afa:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <g_isr_flags>
     afe:	8d 7f       	andi	r24, 0xFD	; 253
     b00:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <g_isr_flags>
     b04:	80 e1       	ldi	r24, 0x10	; 16
     b06:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x7f4447>
     b0a:	2f ef       	ldi	r18, 0xFF	; 255
     b0c:	e2 1a       	sub	r14, r18
     b0e:	f2 0a       	sbc	r15, r18
     b10:	97 01       	movw	r18, r14
     b12:	ad ec       	ldi	r26, 0xCD	; 205
     b14:	bc ec       	ldi	r27, 0xCC	; 204
     b16:	0e 94 95 0c 	call	0x192a	; 0x192a <__umulhisi3>
     b1a:	96 95       	lsr	r25
     b1c:	87 95       	ror	r24
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	96 95       	lsr	r25
     b24:	87 95       	ror	r24
     b26:	bc 01       	movw	r22, r24
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	86 0f       	add	r24, r22
     b3a:	97 1f       	adc	r25, r23
     b3c:	b7 01       	movw	r22, r14
     b3e:	68 1b       	sub	r22, r24
     b40:	79 0b       	sbc	r23, r25
     b42:	cb 01       	movw	r24, r22
     b44:	60 e3       	ldi	r22, 0x30	; 48
     b46:	68 0f       	add	r22, r24
     b48:	8d e9       	ldi	r24, 0x9D	; 157
     b4a:	98 e2       	ldi	r25, 0x28	; 40
     b4c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN4User4Uart4sendEh>
     b50:	be 01       	movw	r22, r28
     b52:	6f 5f       	subi	r22, 0xFF	; 255
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	8d e9       	ldi	r24, 0x9D	; 157
     b58:	98 e2       	ldi	r25, 0x28	; 40
     b5a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN4User4Uart14get_counter_txERj>
     b5e:	81 11       	cpse	r24, r1
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <main+0x186>
     b62:	69 81       	ldd	r22, Y+1	; 0x01
     b64:	7a 81       	ldd	r23, Y+2	; 0x02
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	0e 94 b3 02 	call	0x566	; 0x566 <_Z13lcd_print_u16hj>
     b6c:	be 01       	movw	r22, r28
     b6e:	6f 5f       	subi	r22, 0xFF	; 255
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8d e9       	ldi	r24, 0x9D	; 157
     b74:	98 e2       	ldi	r25, 0x28	; 40
     b76:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN4User4Uart14get_counter_rxERj>
     b7a:	81 11       	cpse	r24, r1
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <main+0x1a2>
     b7e:	69 81       	ldd	r22, Y+1	; 0x01
     b80:	7a 81       	ldd	r23, Y+2	; 0x02
     b82:	84 e1       	ldi	r24, 0x14	; 20
     b84:	0e 94 b3 02 	call	0x566	; 0x566 <_Z13lcd_print_u16hj>
     b88:	c7 01       	movw	r24, r14
     b8a:	83 70       	andi	r24, 0x03	; 3
     b8c:	99 27       	eor	r25, r25
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	51 f4       	brne	.+20     	; 0xba6 <main+0x1c0>
     b92:	28 ee       	ldi	r18, 0xE8	; 232
     b94:	33 e0       	ldi	r19, 0x03	; 3
     b96:	48 e3       	ldi	r20, 0x38	; 56
     b98:	5f ef       	ldi	r21, 0xFF	; 255
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	8f e2       	ldi	r24, 0x2F	; 47
     b9e:	98 e2       	ldi	r25, 0x28	; 40
     ba0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN9OrangeBot5Servo9set_servoEhij>
     ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <main+0x1e2>
     ba6:	02 97       	sbiw	r24, 0x02	; 2
     ba8:	41 f4       	brne	.+16     	; 0xbba <main+0x1d4>
     baa:	48 ec       	ldi	r20, 0xC8	; 200
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	8f e2       	ldi	r24, 0x2F	; 47
     bb2:	98 e2       	ldi	r25, 0x28	; 40
     bb4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN9OrangeBot5Servo9set_servoEhi>
     bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <main+0x1e2>
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	8f e2       	ldi	r24, 0x2F	; 47
     bc2:	98 e2       	ldi	r25, 0x28	; 40
     bc4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN9OrangeBot5Servo9set_servoEhi>
     bc8:	dd 24       	eor	r13, r13
     bca:	d3 94       	inc	r13
     bcc:	77 e0       	ldi	r23, 0x07	; 7
     bce:	7d 15       	cp	r23, r13
     bd0:	c0 f1       	brcs	.+112    	; 0xc42 <main+0x25c>
     bd2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rand>
     bd6:	ac 01       	movw	r20, r24
     bd8:	9c 01       	movw	r18, r24
     bda:	36 95       	lsr	r19
     bdc:	27 95       	ror	r18
     bde:	32 95       	swap	r19
     be0:	22 95       	swap	r18
     be2:	2f 70       	andi	r18, 0x0F	; 15
     be4:	23 27       	eor	r18, r19
     be6:	3f 70       	andi	r19, 0x0F	; 15
     be8:	23 27       	eor	r18, r19
     bea:	ae e3       	ldi	r26, 0x3E	; 62
     bec:	ba e0       	ldi	r27, 0x0A	; 10
     bee:	0e 94 95 0c 	call	0x192a	; 0x192a <__umulhisi3>
     bf2:	20 e2       	ldi	r18, 0x20	; 32
     bf4:	33 e0       	ldi	r19, 0x03	; 3
     bf6:	bc 01       	movw	r22, r24
     bf8:	62 9f       	mul	r22, r18
     bfa:	c0 01       	movw	r24, r0
     bfc:	63 9f       	mul	r22, r19
     bfe:	90 0d       	add	r25, r0
     c00:	72 9f       	mul	r23, r18
     c02:	90 0d       	add	r25, r0
     c04:	11 24       	eor	r1, r1
     c06:	48 1b       	sub	r20, r24
     c08:	59 0b       	sbc	r21, r25
     c0a:	8a 01       	movw	r16, r20
     c0c:	00 59       	subi	r16, 0x90	; 144
     c0e:	11 40       	sbci	r17, 0x01	; 1
     c10:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <rand>
     c14:	87 70       	andi	r24, 0x07	; 7
     c16:	90 78       	andi	r25, 0x80	; 128
     c18:	99 23       	and	r25, r25
     c1a:	24 f4       	brge	.+8      	; 0xc24 <main+0x23e>
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	88 6f       	ori	r24, 0xF8	; 248
     c20:	9f 6f       	ori	r25, 0xFF	; 255
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	42 e3       	ldi	r20, 0x32	; 50
     c28:	48 9f       	mul	r20, r24
     c2a:	90 01       	movw	r18, r0
     c2c:	49 9f       	mul	r20, r25
     c2e:	30 0d       	add	r19, r0
     c30:	11 24       	eor	r1, r1
     c32:	a8 01       	movw	r20, r16
     c34:	6d 2d       	mov	r22, r13
     c36:	8f e2       	ldi	r24, 0x2F	; 47
     c38:	98 e2       	ldi	r25, 0x28	; 40
     c3a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <_ZN9OrangeBot5Servo9set_servoEhij>
     c3e:	d3 94       	inc	r13
     c40:	c5 cf       	rjmp	.-118    	; 0xbcc <main+0x1e6>
     c42:	8d e9       	ldi	r24, 0x9D	; 157
     c44:	98 e2       	ldi	r25, 0x28	; 40
     c46:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN4User4Uart6updateEv>
     c4a:	2b cf       	rjmp	.-426    	; 0xaa2 <main+0xbc>

00000c4c <_GLOBAL__sub_I_g_isr_flags>:
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return;
}	//End function:
     c4c:	6f ef       	ldi	r22, 0xFF	; 255
     c4e:	7f ef       	ldi	r23, 0xFF	; 255
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 ce 04 	call	0x99c	; 0x99c <_Z41__static_initialization_and_destruction_0ii>
     c58:	08 95       	ret

00000c5a <_GLOBAL__sub_D_g_isr_flags>:
     c5a:	6f ef       	ldi	r22, 0xFF	; 255
     c5c:	7f ef       	ldi	r23, 0xFF	; 255
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 ce 04 	call	0x99c	; 0x99c <_Z41__static_initialization_and_destruction_0ii>
     c66:	08 95       	ret

00000c68 <_ZN9OrangeBot5ServoD1Ev>:
    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return true;    //FAIL
}   //end private method: error_recovery | void |
     c68:	08 95       	ret

00000c6a <_ZN9OrangeBot5Servo11hal_init_ioEv>:
     c6a:	e0 e6       	ldi	r30, 0x60	; 96
     c6c:	f4 e0       	ldi	r31, 0x04	; 4
     c6e:	80 81       	ld	r24, Z
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	80 83       	st	Z, r24
     c74:	e0 e8       	ldi	r30, 0x80	; 128
     c76:	f4 e0       	ldi	r31, 0x04	; 4
     c78:	80 81       	ld	r24, Z
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 83       	st	Z, r24
     c7e:	80 81       	ld	r24, Z
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	80 83       	st	Z, r24
     c84:	80 81       	ld	r24, Z
     c86:	84 60       	ori	r24, 0x04	; 4
     c88:	80 83       	st	Z, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	88 60       	ori	r24, 0x08	; 8
     c8e:	80 83       	st	Z, r24
     c90:	e0 ea       	ldi	r30, 0xA0	; 160
     c92:	f4 e0       	ldi	r31, 0x04	; 4
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
     c9a:	80 81       	ld	r24, Z
     c9c:	82 60       	ori	r24, 0x02	; 2
     c9e:	80 83       	st	Z, r24
     ca0:	80 81       	ld	r24, Z
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	80 83       	st	Z, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	88 60       	ori	r24, 0x08	; 8
     caa:	80 83       	st	Z, r24
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <_ZN9OrangeBot5Servo25hal_init_ta0_timeout_modeEj>:
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	e0 e0       	ldi	r30, 0x00	; 0
     cb8:	fa e0       	ldi	r31, 0x0A	; 10
     cba:	80 81       	ld	r24, Z
     cbc:	31 81       	ldd	r19, Z+1	; 0x01
     cbe:	12 81       	ldd	r17, Z+2	; 0x02
     cc0:	d3 81       	ldd	r29, Z+3	; 0x03
     cc2:	c5 81       	ldd	r28, Z+5	; 0x05
     cc4:	26 85       	ldd	r18, Z+14	; 0x0e
     cc6:	a0 ee       	ldi	r26, 0xE0	; 224
     cc8:	b5 e0       	ldi	r27, 0x05	; 5
     cca:	14 96       	adiw	r26, 0x04	; 4
     ccc:	5c 91       	ld	r21, X
     cce:	14 97       	sbiw	r26, 0x04	; 4
     cd0:	41 85       	ldd	r20, Z+9	; 0x09
     cd2:	92 85       	ldd	r25, Z+10	; 0x0a
     cd4:	81 7f       	andi	r24, 0xF1	; 241
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	38 7f       	andi	r19, 0xF8	; 248
     cda:	91 60       	ori	r25, 0x01	; 1
     cdc:	21 60       	ori	r18, 0x01	; 1
     cde:	31 83       	std	Z+1, r19	; 0x01
     ce0:	12 83       	std	Z+2, r17	; 0x02
     ce2:	d3 83       	std	Z+3, r29	; 0x03
     ce4:	c5 83       	std	Z+5, r28	; 0x05
     ce6:	26 87       	std	Z+14, r18	; 0x0e
     ce8:	14 96       	adiw	r26, 0x04	; 4
     cea:	5c 93       	st	X, r21
     cec:	66 a3       	std	Z+38, r22	; 0x26
     cee:	77 a3       	std	Z+39, r23	; 0x27
     cf0:	10 a6       	std	Z+40, r1	; 0x28
     cf2:	11 a6       	std	Z+41, r1	; 0x29
     cf4:	12 a6       	std	Z+42, r1	; 0x2a
     cf6:	13 a6       	std	Z+43, r1	; 0x2b
     cf8:	14 a6       	std	Z+44, r1	; 0x2c
     cfa:	15 a6       	std	Z+45, r1	; 0x2d
     cfc:	80 83       	st	Z, r24
     cfe:	41 87       	std	Z+9, r20	; 0x09
     d00:	92 87       	std	Z+10, r25	; 0x0a
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	08 95       	ret

00000d0c <_ZN9OrangeBot5Servo12hal_delay_usEv>:
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	8a 95       	dec	r24
     d10:	f1 f7       	brne	.-4      	; 0xd0e <_ZN9OrangeBot5Servo12hal_delay_usEv+0x2>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <_ZN9OrangeBot5Servo12hal_delay_usEv+0x8>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	08 95       	ret

00000d18 <_ZN9OrangeBot5Servo9hal_powerEb>:
     d18:	61 11       	cpse	r22, r1
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <_ZN9OrangeBot5Servo9hal_powerEb+0x10>
     d1c:	e0 e6       	ldi	r30, 0x60	; 96
     d1e:	f4 e0       	ldi	r31, 0x04	; 4
     d20:	84 81       	ldd	r24, Z+4	; 0x04
     d22:	80 68       	ori	r24, 0x80	; 128
     d24:	84 83       	std	Z+4, r24	; 0x04
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <_ZN9OrangeBot5Servo9hal_powerEb+0x1a>
     d28:	e0 e6       	ldi	r30, 0x60	; 96
     d2a:	f4 e0       	ldi	r31, 0x04	; 4
     d2c:	84 81       	ldd	r24, Z+4	; 0x04
     d2e:	8f 77       	andi	r24, 0x7F	; 127
     d30:	84 83       	std	Z+4, r24	; 0x04
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	08 95       	ret

00000d36 <_ZN9OrangeBot5Servo11hal_run_isrEb>:
     d36:	61 11       	cpse	r22, r1
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <_ZN9OrangeBot5Servo11hal_run_isrEb+0x10>
     d3a:	e0 e0       	ldi	r30, 0x00	; 0
     d3c:	fa e0       	ldi	r31, 0x0A	; 10
     d3e:	80 81       	ld	r24, Z
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	80 83       	st	Z, r24
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <_ZN9OrangeBot5Servo11hal_run_isrEb+0x22>
     d46:	e0 e0       	ldi	r30, 0x00	; 0
     d48:	fa e0       	ldi	r31, 0x0A	; 10
     d4a:	87 ea       	ldi	r24, 0xA7	; 167
     d4c:	91 e6       	ldi	r25, 0x61	; 97
     d4e:	86 a3       	std	Z+38, r24	; 0x26
     d50:	97 a3       	std	Z+39, r25	; 0x27
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret

00000d5c <_ZN9OrangeBot5Servo15init_class_varsEv>:
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	2d 97       	sbiw	r28, 0x0d	; 13
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	fc 01       	movw	r30, r24
     d6c:	10 82       	st	Z, r1
     d6e:	e7 59       	subi	r30, 0x97	; 151
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	10 82       	st	Z, r1
     d74:	11 82       	std	Z+1, r1	; 0x01
     d76:	19 82       	std	Y+1, r1	; 0x01
     d78:	1a 82       	std	Y+2, r1	; 0x02
     d7a:	1b 82       	std	Y+3, r1	; 0x03
     d7c:	1c 82       	std	Y+4, r1	; 0x04
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	2d 83       	std	Y+5, r18	; 0x05
     d82:	2e 83       	std	Y+6, r18	; 0x06
     d84:	18 86       	std	Y+8, r1	; 0x08
     d86:	1f 82       	std	Y+7, r1	; 0x07
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	28 30       	cpi	r18, 0x08	; 8
     d8c:	a0 f4       	brcc	.+40     	; 0xdb6 <_ZN9OrangeBot5Servo15init_class_varsEv+0x5a>
     d8e:	a2 2f       	mov	r26, r18
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	aa 0f       	add	r26, r26
     d94:	bb 1f       	adc	r27, r27
     d96:	aa 0f       	add	r26, r26
     d98:	bb 1f       	adc	r27, r27
     d9a:	aa 0f       	add	r26, r26
     d9c:	bb 1f       	adc	r27, r27
     d9e:	a8 0f       	add	r26, r24
     da0:	b9 1f       	adc	r27, r25
     da2:	11 96       	adiw	r26, 0x01	; 1
     da4:	38 e0       	ldi	r19, 0x08	; 8
     da6:	fe 01       	movw	r30, r28
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	3a 95       	dec	r19
     db0:	e1 f7       	brne	.-8      	; 0xdaa <_ZN9OrangeBot5Servo15init_class_varsEv+0x4e>
     db2:	2f 5f       	subi	r18, 0xFF	; 255
     db4:	ea cf       	rjmp	.-44     	; 0xd8a <_ZN9OrangeBot5Servo15init_class_varsEv+0x2e>
     db6:	19 86       	std	Y+9, r1	; 0x09
     db8:	1a 86       	std	Y+10, r1	; 0x0a
     dba:	1b 86       	std	Y+11, r1	; 0x0b
     dbc:	2c ed       	ldi	r18, 0xDC	; 220
     dbe:	35 e0       	ldi	r19, 0x05	; 5
     dc0:	2c 87       	std	Y+12, r18	; 0x0c
     dc2:	3d 87       	std	Y+13, r19	; 0x0d
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	48 30       	cpi	r20, 0x08	; 8
     dc8:	b0 f4       	brcc	.+44     	; 0xdf6 <_ZN9OrangeBot5Servo15init_class_varsEv+0x9a>
     dca:	24 2f       	mov	r18, r20
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	d9 01       	movw	r26, r18
     dd0:	aa 0f       	add	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	aa 0f       	add	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	a2 0f       	add	r26, r18
     dda:	b3 1f       	adc	r27, r19
     ddc:	a8 0f       	add	r26, r24
     dde:	b9 1f       	adc	r27, r25
     de0:	af 5b       	subi	r26, 0xBF	; 191
     de2:	bf 4f       	sbci	r27, 0xFF	; 255
     de4:	25 e0       	ldi	r18, 0x05	; 5
     de6:	fe 01       	movw	r30, r28
     de8:	39 96       	adiw	r30, 0x09	; 9
     dea:	01 90       	ld	r0, Z+
     dec:	0d 92       	st	X+, r0
     dee:	2a 95       	dec	r18
     df0:	e1 f7       	brne	.-8      	; 0xdea <_ZN9OrangeBot5Servo15init_class_varsEv+0x8e>
     df2:	4f 5f       	subi	r20, 0xFF	; 255
     df4:	e8 cf       	rjmp	.-48     	; 0xdc6 <_ZN9OrangeBot5Servo15init_class_varsEv+0x6a>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	2d 96       	adiw	r28, 0x0d	; 13
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>:
     e04:	fc 01       	movw	r30, r24
     e06:	e5 59       	subi	r30, 0x95	; 149
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	20 81       	ld	r18, Z
     e0c:	21 11       	cpse	r18, r1
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj+0x14>
     e10:	60 83       	st	Z, r22
     e12:	31 96       	adiw	r30, 0x01	; 1
     e14:	40 83       	st	Z, r20
     e16:	51 83       	std	Z+1, r21	; 0x01
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	08 95       	ret

00000e1c <_ZN9OrangeBot5Servo9set_servoEhi>:
     e1c:	68 30       	cpi	r22, 0x08	; 8
     e1e:	38 f0       	brcs	.+14     	; 0xe2e <_ZN9OrangeBot5Servo9set_servoEhi+0x12>
     e20:	43 ea       	ldi	r20, 0xA3	; 163
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	67 e0       	ldi	r22, 0x07	; 7
     e26:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	08 95       	ret
     e2e:	9a 01       	movw	r18, r20
     e30:	20 57       	subi	r18, 0x70	; 112
     e32:	3e 4f       	sbci	r19, 0xFE	; 254
     e34:	21 32       	cpi	r18, 0x21	; 33
     e36:	33 40       	sbci	r19, 0x03	; 3
     e38:	38 f0       	brcs	.+14     	; 0xe48 <_ZN9OrangeBot5Servo9set_servoEhi+0x2c>
     e3a:	49 ea       	ldi	r20, 0xA9	; 169
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	67 e0       	ldi	r22, 0x07	; 7
     e40:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	08 95       	ret
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	db 01       	movw	r26, r22
     e4c:	aa 0f       	add	r26, r26
     e4e:	bb 1f       	adc	r27, r27
     e50:	aa 0f       	add	r26, r26
     e52:	bb 1f       	adc	r27, r27
     e54:	aa 0f       	add	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	a8 0f       	add	r26, r24
     e5a:	b9 1f       	adc	r27, r25
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	2d 91       	ld	r18, X+
     e60:	3c 91       	ld	r19, X
     e62:	12 97       	sbiw	r26, 0x02	; 2
     e64:	42 17       	cp	r20, r18
     e66:	53 07       	cpc	r21, r19
     e68:	39 f0       	breq	.+14     	; 0xe78 <_ZN9OrangeBot5Servo9set_servoEhi+0x5c>
     e6a:	fd 01       	movw	r30, r26
     e6c:	41 83       	std	Z+1, r20	; 0x01
     e6e:	52 83       	std	Z+2, r21	; 0x02
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	85 83       	std	Z+5, r24	; 0x05
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	08 95       	ret
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret

00000e7c <_ZN9OrangeBot5Servo9set_servoEhij>:
     e7c:	68 30       	cpi	r22, 0x08	; 8
     e7e:	38 f0       	brcs	.+14     	; 0xe8e <_ZN9OrangeBot5Servo9set_servoEhij+0x12>
     e80:	44 ed       	ldi	r20, 0xD4	; 212
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	67 e0       	ldi	r22, 0x07	; 7
     e86:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	fa 01       	movw	r30, r20
     e90:	e0 57       	subi	r30, 0x70	; 112
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	e1 32       	cpi	r30, 0x21	; 33
     e96:	f3 40       	sbci	r31, 0x03	; 3
     e98:	38 f0       	brcs	.+14     	; 0xea8 <_ZN9OrangeBot5Servo9set_servoEhij+0x2c>
     e9a:	4a ed       	ldi	r20, 0xDA	; 218
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	67 e0       	ldi	r22, 0x07	; 7
     ea0:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	08 95       	ret
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	fb 01       	movw	r30, r22
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	ee 0f       	add	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	e8 0f       	add	r30, r24
     eba:	f9 1f       	adc	r31, r25
     ebc:	01 80       	ldd	r0, Z+1	; 0x01
     ebe:	f2 81       	ldd	r31, Z+2	; 0x02
     ec0:	e0 2d       	mov	r30, r0
     ec2:	4e 17       	cp	r20, r30
     ec4:	5f 07       	cpc	r21, r31
     ec6:	69 f0       	breq	.+26     	; 0xee2 <_ZN9OrangeBot5Servo9set_servoEhij+0x66>
     ec8:	fb 01       	movw	r30, r22
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	e8 0f       	add	r30, r24
     ed8:	f9 1f       	adc	r31, r25
     eda:	41 83       	std	Z+1, r20	; 0x01
     edc:	52 83       	std	Z+2, r21	; 0x02
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	45 83       	std	Z+5, r20	; 0x05
     ee2:	fb 01       	movw	r30, r22
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	e8 0f       	add	r30, r24
     ef2:	f9 1f       	adc	r31, r25
     ef4:	43 81       	ldd	r20, Z+3	; 0x03
     ef6:	54 81       	ldd	r21, Z+4	; 0x04
     ef8:	42 17       	cp	r20, r18
     efa:	53 07       	cpc	r21, r19
     efc:	79 f0       	breq	.+30     	; 0xf1c <_ZN9OrangeBot5Servo9set_servoEhij+0xa0>
     efe:	66 0f       	add	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	66 0f       	add	r22, r22
     f04:	77 1f       	adc	r23, r23
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	fc 01       	movw	r30, r24
     f0c:	e6 0f       	add	r30, r22
     f0e:	f7 1f       	adc	r31, r23
     f10:	23 83       	std	Z+3, r18	; 0x03
     f12:	34 83       	std	Z+4, r19	; 0x04
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	86 83       	std	Z+6, r24	; 0x06
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	08 95       	ret

00000f20 <_ZN9OrangeBot5Servo4initEv>:
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	8c 01       	movw	r16, r24
     f28:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN9OrangeBot5Servo15init_class_varsEv>
     f2c:	c8 2f       	mov	r28, r24
     f2e:	88 23       	and	r24, r24
     f30:	31 f0       	breq	.+12     	; 0xf3e <_ZN9OrangeBot5Servo4initEv+0x1e>
     f32:	49 e1       	ldi	r20, 0x19	; 25
     f34:	51 e0       	ldi	r21, 0x01	; 1
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     f3e:	c8 01       	movw	r24, r16
     f40:	0e 94 35 06 	call	0xc6a	; 0xc6a <_ZN9OrangeBot5Servo11hal_init_ioEv>
     f44:	c8 2b       	or	r28, r24
     f46:	31 f0       	breq	.+12     	; 0xf54 <_ZN9OrangeBot5Servo4initEv+0x34>
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e0       	ldi	r21, 0x01	; 1
     f4c:	62 e0       	ldi	r22, 0x02	; 2
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	c8 01       	movw	r24, r16
     f5a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN9OrangeBot5Servo25hal_init_ta0_timeout_modeEj>
     f5e:	c8 2b       	or	r28, r24
     f60:	31 f0       	breq	.+12     	; 0xf6e <_ZN9OrangeBot5Servo4initEv+0x4e>
     f62:	47 e2       	ldi	r20, 0x27	; 39
     f64:	51 e0       	ldi	r21, 0x01	; 1
     f66:	63 e0       	ldi	r22, 0x03	; 3
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
     f6e:	8c 2f       	mov	r24, r28
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <_ZN9OrangeBot5ServoC1Ev>:
     f78:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN9OrangeBot5Servo4initEv>
     f7c:	08 95       	ret

00000f7e <_ZN9OrangeBot5Servo12hal_servo_ioEhb>:
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	06 2f       	mov	r16, r22
     f84:	10 e0       	ldi	r17, 0x00	; 0
     f86:	08 30       	cpi	r16, 0x08	; 8
     f88:	11 05       	cpc	r17, r1
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0x10>
     f8c:	63 c0       	rjmp	.+198    	; 0x1054 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xd6>
     f8e:	f8 01       	movw	r30, r16
     f90:	e0 5b       	subi	r30, 0xB0	; 176
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__tablejump2__>
     f98:	e0 e8       	ldi	r30, 0x80	; 128
     f9a:	f4 e0       	ldi	r31, 0x04	; 4
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	8e 7f       	andi	r24, 0xFE	; 254
     fa0:	48 2b       	or	r20, r24
     fa2:	44 83       	std	Z+4, r20	; 0x04
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	5c c0       	rjmp	.+184    	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
     fa8:	e0 e8       	ldi	r30, 0x80	; 128
     faa:	f4 e0       	ldi	r31, 0x04	; 4
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	44 0f       	add	r20, r20
     fb2:	55 1f       	adc	r21, r21
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	48 2b       	or	r20, r24
     fb8:	44 83       	std	Z+4, r20	; 0x04
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	51 c0       	rjmp	.+162    	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
     fbe:	e0 e8       	ldi	r30, 0x80	; 128
     fc0:	f4 e0       	ldi	r31, 0x04	; 4
     fc2:	84 81       	ldd	r24, Z+4	; 0x04
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	44 0f       	add	r20, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	44 0f       	add	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	8b 7f       	andi	r24, 0xFB	; 251
     fd0:	48 2b       	or	r20, r24
     fd2:	44 83       	std	Z+4, r20	; 0x04
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	44 c0       	rjmp	.+136    	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
     fd8:	e0 e8       	ldi	r30, 0x80	; 128
     fda:	f4 e0       	ldi	r31, 0x04	; 4
     fdc:	84 81       	ldd	r24, Z+4	; 0x04
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	44 0f       	add	r20, r20
     fe2:	55 1f       	adc	r21, r21
     fe4:	44 0f       	add	r20, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	44 0f       	add	r20, r20
     fea:	55 1f       	adc	r21, r21
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	48 2b       	or	r20, r24
     ff0:	44 83       	std	Z+4, r20	; 0x04
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	35 c0       	rjmp	.+106    	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
     ff6:	e0 ea       	ldi	r30, 0xA0	; 160
     ff8:	f4 e0       	ldi	r31, 0x04	; 4
     ffa:	84 81       	ldd	r24, Z+4	; 0x04
     ffc:	8e 7f       	andi	r24, 0xFE	; 254
     ffe:	48 2b       	or	r20, r24
    1000:	44 83       	std	Z+4, r20	; 0x04
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	2d c0       	rjmp	.+90     	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1006:	e0 ea       	ldi	r30, 0xA0	; 160
    1008:	f4 e0       	ldi	r31, 0x04	; 4
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	48 2b       	or	r20, r24
    1016:	44 83       	std	Z+4, r20	; 0x04
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	22 c0       	rjmp	.+68     	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    101c:	e0 ea       	ldi	r30, 0xA0	; 160
    101e:	f4 e0       	ldi	r31, 0x04	; 4
    1020:	84 81       	ldd	r24, Z+4	; 0x04
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	44 0f       	add	r20, r20
    1026:	55 1f       	adc	r21, r21
    1028:	44 0f       	add	r20, r20
    102a:	55 1f       	adc	r21, r21
    102c:	8b 7f       	andi	r24, 0xFB	; 251
    102e:	48 2b       	or	r20, r24
    1030:	44 83       	std	Z+4, r20	; 0x04
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	15 c0       	rjmp	.+42     	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1036:	e0 ea       	ldi	r30, 0xA0	; 160
    1038:	f4 e0       	ldi	r31, 0x04	; 4
    103a:	84 81       	ldd	r24, Z+4	; 0x04
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	44 0f       	add	r20, r20
    1040:	55 1f       	adc	r21, r21
    1042:	44 0f       	add	r20, r20
    1044:	55 1f       	adc	r21, r21
    1046:	44 0f       	add	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	87 7f       	andi	r24, 0xF7	; 247
    104c:	48 2b       	or	r20, r24
    104e:	44 83       	std	Z+4, r20	; 0x04
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <_ZN9OrangeBot5Servo12hal_servo_ioEhb+0xe2>
    1054:	44 e9       	ldi	r20, 0x94	; 148
    1056:	51 e0       	ldi	r21, 0x01	; 1
    1058:	64 e0       	ldi	r22, 0x04	; 4
    105a:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj>:
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	9b 01       	movw	r18, r22
    106e:	a8 ee       	ldi	r26, 0xE8	; 232
    1070:	b3 e0       	ldi	r27, 0x03	; 3
    1072:	0e 94 95 0c 	call	0x192a	; 0x192a <__umulhisi3>
    1076:	20 e2       	ldi	r18, 0x20	; 32
    1078:	33 e0       	ldi	r19, 0x03	; 3
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	0e 94 6d 0c 	call	0x18da	; 0x18da <__udivmodsi4>
    1082:	2e 3f       	cpi	r18, 0xFE	; 254
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	38 07       	cpc	r19, r24
    1088:	41 05       	cpc	r20, r1
    108a:	51 05       	cpc	r21, r1
    108c:	48 f0       	brcs	.+18     	; 0x10a0 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj+0x3a>
    108e:	ce 01       	movw	r24, r28
    1090:	4c e6       	ldi	r20, 0x6C	; 108
    1092:	53 e0       	ldi	r21, 0x03	; 3
    1094:	66 e0       	ldi	r22, 0x06	; 6
    1096:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj+0x3c>
    10a0:	c9 01       	movw	r24, r18
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj>:
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	8c 54       	subi	r24, 0x4C	; 76
    10b6:	94 40       	sbci	r25, 0x04	; 4
    10b8:	85 3d       	cpi	r24, 0xD5	; 213
    10ba:	99 44       	sbci	r25, 0x49	; 73
    10bc:	40 f0       	brcs	.+16     	; 0x10ce <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x26>
    10be:	40 e9       	ldi	r20, 0x90	; 144
    10c0:	53 e0       	ldi	r21, 0x03	; 3
    10c2:	67 e0       	ldi	r22, 0x07	; 7
    10c4:	ce 01       	movw	r24, r28
    10c6:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	2c c0       	rjmp	.+88     	; 0x1126 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    10ce:	e0 e0       	ldi	r30, 0x00	; 0
    10d0:	fa e0       	ldi	r31, 0x0A	; 10
    10d2:	80 81       	ld	r24, Z
    10d4:	8e 7f       	andi	r24, 0xFE	; 254
    10d6:	80 83       	st	Z, r24
    10d8:	00 a1       	ldd	r16, Z+32	; 0x20
    10da:	11 a1       	ldd	r17, Z+33	; 0x21
    10dc:	ce 01       	movw	r24, r28
    10de:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN9OrangeBot5Servo26hal_microseconds_to_countsEj>
    10e2:	9c 01       	movw	r18, r24
    10e4:	21 50       	subi	r18, 0x01	; 1
    10e6:	31 09       	sbc	r19, r1
    10e8:	2e 3f       	cpi	r18, 0xFE	; 254
    10ea:	4f ef       	ldi	r20, 0xFF	; 255
    10ec:	34 07       	cpc	r19, r20
    10ee:	40 f0       	brcs	.+16     	; 0x1100 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x58>
    10f0:	41 ea       	ldi	r20, 0xA1	; 161
    10f2:	53 e0       	ldi	r21, 0x03	; 3
    10f4:	66 e0       	ldi	r22, 0x06	; 6
    10f6:	ce 01       	movw	r24, r28
    10f8:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    1100:	08 17       	cp	r16, r24
    1102:	19 07       	cpc	r17, r25
    1104:	40 f0       	brcs	.+16     	; 0x1116 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x6e>
    1106:	48 ea       	ldi	r20, 0xA8	; 168
    1108:	53 e0       	ldi	r21, 0x03	; 3
    110a:	65 e0       	ldi	r22, 0x05	; 5
    110c:	ce 01       	movw	r24, r28
    110e:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	08 c0       	rjmp	.+16     	; 0x1126 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj+0x7e>
    1116:	e0 e0       	ldi	r30, 0x00	; 0
    1118:	fa e0       	ldi	r31, 0x0A	; 10
    111a:	26 a3       	std	Z+38, r18	; 0x26
    111c:	37 a3       	std	Z+39, r19	; 0x27
    111e:	80 81       	ld	r24, Z
    1120:	81 60       	ori	r24, 0x01	; 1
    1122:	80 83       	st	Z, r24
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <_ZN9OrangeBot5Servo10soft_startEhhhh>:
//!	\n	Blocking hardwired version of the soft start method using delay and direct control of IOs
//!	\n	@TODO: I can use TCA0 to emit pulses to EVOUTD in PWM mode for the soft start
/***************************************************************************/

bool Servo::soft_start( uint8_t iu8_ton, uint8_t iu8_toff, uint8_t iu8_treduce, uint8_t iu8_repeat )
{
    1130:	bf 92       	push	r11
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	7c 01       	movw	r14, r24
    1144:	16 2f       	mov	r17, r22
    1146:	d4 2f       	mov	r29, r20
    1148:	c2 2e       	mov	r12, r18
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	bool u1_continue = true;
    114a:	bb 24       	eor	r11, r11
    114c:	b3 94       	inc	r11
	//----------------------------------------------------------------
	//	BODY
	//----------------------------------------------------------------

	//While not done
	while (u1_continue == true)
    114e:	bb 20       	and	r11, r11
    1150:	49 f1       	breq	.+82     	; 0x11a4 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x74>
	{
		//if: there is room to reduce Toff
		if (iu8_toff > iu8_treduce)
    1152:	cd 16       	cp	r12, r29
    1154:	08 f5       	brcc	.+66     	; 0x1198 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x68>
    1156:	d1 2c       	mov	r13, r1
		{
			//For each repeat
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
    1158:	d0 16       	cp	r13, r16
    115a:	d8 f4       	brcc	.+54     	; 0x1192 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x62>
			{
				//Power on
				CLEAR_BIT( PORTD.OUT, SERVO_PWR_PIN );
    115c:	e0 e6       	ldi	r30, 0x60	; 96
    115e:	f4 e0       	ldi	r31, 0x04	; 4
    1160:	84 81       	ldd	r24, Z+4	; 0x04
    1162:	8f 77       	andi	r24, 0x7F	; 127
    1164:	84 83       	std	Z+4, r24	; 0x04
				
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_ton; u8_tmp_b++)
    1166:	c0 e0       	ldi	r28, 0x00	; 0
    1168:	c1 17       	cp	r28, r17
    116a:	28 f4       	brcc	.+10     	; 0x1176 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x46>
				{
					this->hal_delay_us();
    116c:	c7 01       	movw	r24, r14
    116e:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN9OrangeBot5Servo12hal_delay_usEv>
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
			{
				//Power on
				CLEAR_BIT( PORTD.OUT, SERVO_PWR_PIN );
				
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_ton; u8_tmp_b++)
    1172:	cf 5f       	subi	r28, 0xFF	; 255
    1174:	f9 cf       	rjmp	.-14     	; 0x1168 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x38>
				{
					this->hal_delay_us();
				}
				
				//Power Off
				this -> hal_power( false );
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	c7 01       	movw	r24, r14
    117a:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9OrangeBot5Servo9hal_powerEb>
				
				//Wait
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_toff; u8_tmp_b++)
    117e:	c0 e0       	ldi	r28, 0x00	; 0
    1180:	cd 17       	cp	r28, r29
    1182:	28 f4       	brcc	.+10     	; 0x118e <_ZN9OrangeBot5Servo10soft_startEhhhh+0x5e>
				{
					this->hal_delay_us();
    1184:	c7 01       	movw	r24, r14
    1186:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN9OrangeBot5Servo12hal_delay_usEv>
				
				//Power Off
				this -> hal_power( false );
				
				//Wait
				for (uint8_t u8_tmp_b = 0; u8_tmp_b < iu8_toff; u8_tmp_b++)
    118a:	cf 5f       	subi	r28, 0xFF	; 255
    118c:	f9 cf       	rjmp	.-14     	; 0x1180 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x50>
	{
		//if: there is room to reduce Toff
		if (iu8_toff > iu8_treduce)
		{
			//For each repeat
			for (uint8_t u8_tmp = 0; u8_tmp < iu8_repeat; u8_tmp++)
    118e:	d3 94       	inc	r13
    1190:	e3 cf       	rjmp	.-58     	; 0x1158 <_ZN9OrangeBot5Servo10soft_startEhhhh+0x28>
					this->hal_delay_us();
				}
			}
			
			//Increase Ton
			iu8_ton = iu8_ton+iu8_treduce;
    1192:	1c 0d       	add	r17, r12
			//Reduce Toff
			iu8_toff = iu8_toff-iu8_treduce;
    1194:	dc 19       	sub	r29, r12
    1196:	db cf       	rjmp	.-74     	; 0x114e <_ZN9OrangeBot5Servo10soft_startEhhhh+0x1e>
		}
		//if: Reached Toff = 0
		else
		{
			//Power on
			this -> hal_power( true );
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	c7 01       	movw	r24, r14
    119c:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9OrangeBot5Servo9hal_powerEb>
			//Break cycle
			u1_continue = false;
    11a0:	b1 2c       	mov	r11, r1
    11a2:	d5 cf       	rjmp	.-86     	; 0x114e <_ZN9OrangeBot5Servo10soft_startEhhhh+0x1e>
	//----------------------------------------------------------------
	//	RETURN
	//----------------------------------------------------------------
	
	return false;	//OK
}	//End private method: soft_start | uint8_t | uint8_t | uint8_t | uint8_t
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	08 95       	ret

000011ba <_ZN9OrangeBot5Servo5powerEb>:
//! \n	power the servomotors
//! \n	starts the ISR driver to scan the servos
/***************************************************************************/

bool Servo::power( bool iu1_powered )
{
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	ec 01       	movw	r28, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//SERVO OFF
	if (iu1_powered == false)
    11c4:	61 11       	cpse	r22, r1
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <_ZN9OrangeBot5Servo5powerEb+0x1e>
	{
		//Turn off SERVO bank
		u1_ret = this -> hal_power( false );
    11c8:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN9OrangeBot5Servo9hal_powerEb>
    11cc:	18 2f       	mov	r17, r24
		//Stop the ISR
		this ->hal_run_isr( false );
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN9OrangeBot5Servo11hal_run_isrEb>
    11d6:	0b c0       	rjmp	.+22     	; 0x11ee <_ZN9OrangeBot5Servo5powerEb+0x34>
	}
	//SERVO ON
	else
	{
		//Use a blocking soft start delay based routine
		u1_ret = this -> soft_start( Config::SOFT_START_TON, Config::SOFT_START_TOFF, Config::SOFT_START_TREDUCE, Config::SOFT_START_REPEAT );
    11d8:	02 e0       	ldi	r16, 0x02	; 2
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	44 e6       	ldi	r20, 0x64	; 100
    11de:	6a e0       	ldi	r22, 0x0A	; 10
    11e0:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN9OrangeBot5Servo10soft_startEhhhh>
    11e4:	18 2f       	mov	r17, r24
		//Start the ISR
		this -> hal_run_isr( true );
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN9OrangeBot5Servo11hal_run_isrEb>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Success: %d", u1_ret); //Trace Return
	return u1_ret;	//Propagate Error
}   //end public method: power | void
    11ee:	81 2f       	mov	r24, r17
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <_ZN9OrangeBot5Servo14clear_servo_ioEv>:
//! @details
//! \n Clear all servo IO lines
/***************************************************************************/

bool Servo::clear_servo_io( void )
{
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	8c 01       	movw	r16, r24
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    1204:	c0 e0       	ldi	r28, 0x00	; 0
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
    1206:	d0 e0       	ldi	r29, 0x00	; 0
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    1208:	c8 30       	cpi	r28, 0x08	; 8
    120a:	40 f4       	brcc	.+16     	; 0x121c <_ZN9OrangeBot5Servo14clear_servo_ioEv+0x22>
	{
		//Try and clear that servo IO and accumulate error
		u1_ret |= this -> hal_servo_io( u8_cnt, false );
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	6c 2f       	mov	r22, r28
    1210:	c8 01       	movw	r24, r16
    1212:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1216:	d8 2b       	or	r29, r24
	///--------------------------------------------------------------------------

	//Clear error
	bool u1_ret = false;
	//For all servos
	for (uint8_t u8_cnt = 0; u8_cnt < Config::NUM_SERVOS; u8_cnt++)
    1218:	cf 5f       	subi	r28, 0xFF	; 255
    121a:	f6 cf       	rjmp	.-20     	; 0x1208 <_ZN9OrangeBot5Servo14clear_servo_ioEv+0xe>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("fail? %d\n", u1_ret); //Trace Return
	return u1_ret;	//Propagate error
}   //end private method: clear_servo_io | void
    121c:	8d 2f       	mov	r24, r29
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <_ZN9OrangeBot5Servo14emergency_stopEv>:
//! @details
//! \n Stop driver. Clear IO lines. Reinitialize class vars.
/***************************************************************************/

bool Servo::emergency_stop( void )
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	8c 01       	movw	r16, r24
	///--------------------------------------------------------------------------

	//Initialize error to OK
	bool u1_ret = false;
	//Stop timer
	u1_ret |= this -> hal_run_isr( false );
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN9OrangeBot5Servo11hal_run_isrEb>
    1236:	c8 2f       	mov	r28, r24
	//Clear servo IOs
	u1_ret |= this -> clear_servo_io();
    1238:	c8 01       	movw	r24, r16
    123a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN9OrangeBot5Servo14clear_servo_ioEv>
    123e:	c8 2b       	or	r28, r24
	//Reinitialize class vars (except error)
	u1_ret |= this -> init_class_vars();
    1240:	c8 01       	movw	r24, r16
    1242:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN9OrangeBot5Servo15init_class_varsEv>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Fail? %d\n", u1_ret); //Trace Return
	return u1_ret;	//Propagate error
}   //end private method: emergency_stop | void
    1246:	8c 2b       	or	r24, r28
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj>:
//! @details
//! \n The driver uses command position and speed, and actual delay, to compute next delay
/***************************************************************************/

bool Servo::compute_servo_delay( uint8_t iu8_index, uint16_t &ou16_delay )
{
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
    125c:	8a 01       	movw	r16, r20
	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	//If Servo index is OOB
	if ((Config::PEDANTIC_CHECKS == true) && ((iu8_index < 0) || (iu8_index >= Config::NUM_SERVOS)))
    125e:	68 30       	cpi	r22, 0x08	; 8
    1260:	68 f0       	brcs	.+26     	; 0x127c <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2c>
	{
		this -> report_error( Error_code::ERR_INPUT_OOB, __LINE__ );
    1262:	45 e1       	ldi	r20, 0x15	; 21
    1264:	55 e0       	ldi	r21, 0x05	; 5
    1266:	67 e0       	ldi	r22, 0x07	; 7
    1268:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
		ou16_delay = Config::HAL_TIMER_MAX_CNT;
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	f8 01       	movw	r30, r16
    1272:	80 83       	st	Z, r24
    1274:	91 83       	std	Z+1, r25	; 0x01
		return true;
    1276:	ff 24       	eor	r15, r15
    1278:	f3 94       	inc	r15
    127a:	9c c1       	rjmp	.+824    	; 0x15b4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
	///	COMMAND -> STATUS
	///--------------------------------------------------------------------------
	//	The driver check if command has changed and saves the vars inside the timer status vars

	//If command position changed
	if (gast_command[iu8_index].u1_position_changed == true)
    127c:	46 2f       	mov	r20, r22
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	fa 01       	movw	r30, r20
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	e8 0f       	add	r30, r24
    1290:	f9 1f       	adc	r31, r25
    1292:	f5 80       	ldd	r15, Z+5	; 0x05
    1294:	ff 20       	and	r15, r15
    1296:	b1 f1       	breq	.+108    	; 0x1304 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0xb4>
	{
		//Fetch position
		int16_t s16_tmp = gast_command[iu8_index].s16_position;
    1298:	fa 01       	movw	r30, r20
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	e8 0f       	add	r30, r24
    12a8:	f9 1f       	adc	r31, r25
    12aa:	81 81       	ldd	r24, Z+1	; 0x01
    12ac:	92 81       	ldd	r25, Z+2	; 0x02
		if ((Config::PEDANTIC_CHECKS == true) && ( (s16_tmp < -(int16_t)Config::SERVO_PPM_MAX_COMMAND) || (s16_tmp > (int16_t)Config::SERVO_PPM_MAX_COMMAND) ))
    12ae:	9c 01       	movw	r18, r24
    12b0:	20 57       	subi	r18, 0x70	; 112
    12b2:	3e 4f       	sbci	r19, 0xFE	; 254
    12b4:	21 32       	cpi	r18, 0x21	; 33
    12b6:	33 40       	sbci	r19, 0x03	; 3
    12b8:	60 f0       	brcs	.+24     	; 0x12d2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x82>
		{
			//Algorithmic error. The class should make sure that user can't write bollocks inside the position
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    12ba:	47 e2       	ldi	r20, 0x27	; 39
    12bc:	55 e0       	ldi	r21, 0x05	; 5
    12be:	68 e0       	ldi	r22, 0x08	; 8
    12c0:	ce 01       	movw	r24, r28
    12c2:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			ou16_delay = Config::HAL_TIMER_MAX_CNT;
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	f8 01       	movw	r30, r16
    12cc:	80 83       	st	Z, r24
    12ce:	91 83       	std	Z+1, r25	; 0x01
			return true;
    12d0:	71 c1       	rjmp	.+738    	; 0x15b4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
		}
		//The target delay is the delay to achieve zero position plus the deviation
		gast_timer[iu8_index].u16_target = Config::SERVO_PPM_ZERO +s16_tmp;
    12d2:	84 52       	subi	r24, 0x24	; 36
    12d4:	9a 4f       	sbci	r25, 0xFA	; 250
    12d6:	fa 01       	movw	r30, r20
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e4 0f       	add	r30, r20
    12e2:	f5 1f       	adc	r31, r21
    12e4:	ec 0f       	add	r30, r28
    12e6:	fd 1f       	adc	r31, r29
    12e8:	ef 5b       	subi	r30, 0xBF	; 191
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
		//status and command are synced
		gast_command[iu8_index].u1_position_changed = false;
    12f0:	fa 01       	movw	r30, r20
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ec 0f       	add	r30, r28
    1300:	fd 1f       	adc	r31, r29
    1302:	15 82       	std	Z+5, r1	; 0x05
	}

	//Latch speed limit in microseconds per 20ms
	uint8_t u8_speed = 0;
	//If command speed changed
	if (gast_command[iu8_index].u1_speed_changed == true)
    1304:	fa 01       	movw	r30, r20
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	ec 0f       	add	r30, r28
    1314:	fd 1f       	adc	r31, r29
    1316:	f6 80       	ldd	r15, Z+6	; 0x06
    1318:	ff 20       	and	r15, r15
    131a:	09 f4       	brne	.+2      	; 0x131e <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0xce>
    131c:	4c c0       	rjmp	.+152    	; 0x13b6 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x166>
	{
		//Fetch position
		uint16_t u16_tmp = gast_command[iu8_index].u16_speed;
    131e:	fa 01       	movw	r30, r20
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	ec 0f       	add	r30, r28
    132e:	fd 1f       	adc	r31, r29
    1330:	23 81       	ldd	r18, Z+3	; 0x03
    1332:	34 81       	ldd	r19, Z+4	; 0x04
		//If speed limiter is disabled
		if (u16_tmp == 0)
    1334:	21 15       	cp	r18, r1
    1336:	31 05       	cpc	r19, r1
    1338:	71 f4       	brne	.+28     	; 0x1356 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x106>
		{
			//Update internal timer status
			gast_timer[iu8_index].u8_speed = 0;	
    133a:	fa 01       	movw	r30, r20
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	e4 0f       	add	r30, r20
    1346:	f5 1f       	adc	r31, r21
    1348:	ec 0f       	add	r30, r28
    134a:	fd 1f       	adc	r31, r29
    134c:	ed 5b       	subi	r30, 0xBD	; 189
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	10 82       	st	Z, r1
		//status and command are synced
		gast_command[iu8_index].u1_position_changed = false;
	}

	//Latch speed limit in microseconds per 20ms
	uint8_t u8_speed = 0;
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	25 c0       	rjmp	.+74     	; 0x13a0 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x150>
		}
		//if speed limiter is active
		else
		{
			//The target speed is the speed multiplied by the number of PPM cycles in a second
			u16_tmp /= Config::SERVO_PPM_FREQUENCY;
    1356:	36 95       	lsr	r19
    1358:	27 95       	ror	r18
    135a:	ab e7       	ldi	r26, 0x7B	; 123
    135c:	b4 e1       	ldi	r27, 0x14	; 20
    135e:	0e 94 95 0c 	call	0x192a	; 0x192a <__umulhisi3>
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
			if (u16_tmp > 255)
    1366:	8f 3f       	cpi	r24, 0xFF	; 255
    1368:	91 05       	cpc	r25, r1
    136a:	69 f0       	breq	.+26     	; 0x1386 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x136>
    136c:	60 f0       	brcs	.+24     	; 0x1386 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x136>
			{
				this -> report_error( Error_code::ERR_OVERFLOW, __LINE__ );
    136e:	45 e4       	ldi	r20, 0x45	; 69
    1370:	55 e0       	ldi	r21, 0x05	; 5
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
				ou16_delay = Config::HAL_TIMER_MAX_CNT;
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	9f ef       	ldi	r25, 0xFF	; 255
    137e:	f8 01       	movw	r30, r16
    1380:	80 83       	st	Z, r24
    1382:	91 83       	std	Z+1, r25	; 0x01
				return true;
    1384:	17 c1       	rjmp	.+558    	; 0x15b4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
			}
			u8_speed = u16_tmp;
    1386:	68 2f       	mov	r22, r24
			//Update internal timer status
			gast_timer[iu8_index].u8_speed = u8_speed;
    1388:	fa 01       	movw	r30, r20
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	e4 0f       	add	r30, r20
    1394:	f5 1f       	adc	r31, r21
    1396:	ec 0f       	add	r30, r28
    1398:	fd 1f       	adc	r31, r29
    139a:	ed 5b       	subi	r30, 0xBD	; 189
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 83       	st	Z, r24
		}
		//status and command are synced
		gast_command[iu8_index].u1_speed_changed = false;
    13a0:	fa 01       	movw	r30, r20
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	ec 0f       	add	r30, r28
    13b0:	fd 1f       	adc	r31, r29
    13b2:	16 82       	std	Z+6, r1	; 0x06
    13b4:	0c c0       	rjmp	.+24     	; 0x13ce <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x17e>
	}
	//If speed has not changed
	else
	{
		//Fetch speed
		u8_speed = gast_timer[iu8_index].u8_speed;
    13b6:	fa 01       	movw	r30, r20
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	ee 0f       	add	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	e4 0f       	add	r30, r20
    13c2:	f5 1f       	adc	r31, r21
    13c4:	ec 0f       	add	r30, r28
    13c6:	fd 1f       	adc	r31, r29
    13c8:	ed 5b       	subi	r30, 0xBD	; 189
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	60 81       	ld	r22, Z
	///--------------------------------------------------------------------------

	//Initialize return delay to invalid
	uint16_t u16_delay = Config::HAL_TIMER_MAX_CNT;
	//Fetch target
	uint16_t u16_target = gast_timer[iu8_index].u16_target;
    13ce:	ca 01       	movw	r24, r20
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	84 0f       	add	r24, r20
    13da:	95 1f       	adc	r25, r21
    13dc:	8c 0f       	add	r24, r28
    13de:	9d 1f       	adc	r25, r29
    13e0:	fc 01       	movw	r30, r24
    13e2:	ef 5b       	subi	r30, 0xBF	; 191
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
	//Fetch actual
	uint16_t u16_actual = gast_timer[iu8_index].u16_actual;
    13ea:	33 96       	adiw	r30, 0x03	; 3
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
	//If: speed limit is inactive
	if (u8_speed == 0)
    13f0:	61 11       	cpse	r22, r1
    13f2:	3d c0       	rjmp	.+122    	; 0x146e <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x21e>
	{
		//if already locked
		if (u16_target == u16_actual)
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	b9 f4       	brne	.+46     	; 0x1428 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x1d8>
		{
			//Already locked
			gast_command[iu8_index].u1_idle = true;
    13fa:	fa 01       	movw	r30, r20
    13fc:	31 96       	adiw	r30, 0x01	; 1
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	ee 0f       	add	r30, r30
    1404:	ff 1f       	adc	r31, r31
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	ec 0f       	add	r30, r28
    140c:	fd 1f       	adc	r31, r29
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 83       	st	Z, r24
			gast_command[iu8_index].u1_lock = true;	
    1412:	44 0f       	add	r20, r20
    1414:	55 1f       	adc	r21, r21
    1416:	44 0f       	add	r20, r20
    1418:	55 1f       	adc	r21, r21
    141a:	44 0f       	add	r20, r20
    141c:	55 1f       	adc	r21, r21
    141e:	fe 01       	movw	r30, r28
    1420:	e4 0f       	add	r30, r20
    1422:	f5 1f       	adc	r31, r21
    1424:	87 83       	std	Z+7, r24	; 0x07
    1426:	ae c0       	rjmp	.+348    	; 0x1584 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
		}
		//Needs to move
		else
		{
			//Not locked
			gast_command[iu8_index].u1_idle = false;
    1428:	fa 01       	movw	r30, r20
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	ec 0f       	add	r30, r28
    143a:	fd 1f       	adc	r31, r29
    143c:	10 82       	st	Z, r1
			gast_command[iu8_index].u1_lock = false;
    143e:	fa 01       	movw	r30, r20
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	ec 0f       	add	r30, r28
    144e:	fd 1f       	adc	r31, r29
    1450:	17 82       	std	Z+7, r1	; 0x07
			//Update actual
			gast_timer[iu8_index].u16_actual = u16_target;
    1452:	fa 01       	movw	r30, r20
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	e4 0f       	add	r30, r20
    145e:	f5 1f       	adc	r31, r21
    1460:	ec 0f       	add	r30, r28
    1462:	fd 1f       	adc	r31, r29
    1464:	ec 5b       	subi	r30, 0xBC	; 188
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	20 83       	st	Z, r18
    146a:	31 83       	std	Z+1, r19	; 0x01
    146c:	8b c0       	rjmp	.+278    	; 0x1584 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
	}
	//if: speed limit active
	else
	{
		//if already locked
		if (u16_target == u16_actual)
    146e:	28 17       	cp	r18, r24
    1470:	39 07       	cpc	r19, r25
    1472:	c1 f4       	brne	.+48     	; 0x14a4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x254>
		{
			//Already locked
			gast_command[iu8_index].u1_idle = true;
    1474:	fa 01       	movw	r30, r20
    1476:	31 96       	adiw	r30, 0x01	; 1
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	ec 0f       	add	r30, r28
    1486:	fd 1f       	adc	r31, r29
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	20 83       	st	Z, r18
			gast_command[iu8_index].u1_lock = true;
    148c:	44 0f       	add	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	44 0f       	add	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	44 0f       	add	r20, r20
    1496:	55 1f       	adc	r21, r21
    1498:	fe 01       	movw	r30, r28
    149a:	e4 0f       	add	r30, r20
    149c:	f5 1f       	adc	r31, r21
    149e:	27 83       	std	Z+7, r18	; 0x07
			//Delay of the servo to be returned to caller
			u16_delay = u16_actual;
    14a0:	9c 01       	movw	r18, r24
    14a2:	70 c0       	rjmp	.+224    	; 0x1584 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
		}
		//if: Needs to move
		else
		{
			//Compute absolute difference
			uint16_t u16_delta = ((u16_target > u16_actual)?(u16_target-u16_actual):(u16_actual-u16_target));
    14a4:	82 17       	cp	r24, r18
    14a6:	93 07       	cpc	r25, r19
    14a8:	20 f4       	brcc	.+8      	; 0x14b2 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x262>
    14aa:	f9 01       	movw	r30, r18
    14ac:	e8 1b       	sub	r30, r24
    14ae:	f9 0b       	sbc	r31, r25
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x268>
    14b2:	fc 01       	movw	r30, r24
    14b4:	e2 1b       	sub	r30, r18
    14b6:	f3 0b       	sbc	r31, r19
			//If: I need to move less than my allowed speed limit
			if (u16_delta < u8_speed)
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	e6 17       	cp	r30, r22
    14bc:	f7 07       	cpc	r31, r23
    14be:	20 f5       	brcc	.+72     	; 0x1508 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2b8>
			{
				//I'm locked but not IDLE
				gast_command[iu8_index].u1_lock = true;
    14c0:	fa 01       	movw	r30, r20
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	ec 0f       	add	r30, r28
    14d0:	fd 1f       	adc	r31, r29
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	87 83       	std	Z+7, r24	; 0x07
				gast_command[iu8_index].u1_idle = false;
    14d6:	fa 01       	movw	r30, r20
    14d8:	31 96       	adiw	r30, 0x01	; 1
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	ec 0f       	add	r30, r28
    14e8:	fd 1f       	adc	r31, r29
    14ea:	10 82       	st	Z, r1
				//Update actual
				gast_timer[iu8_index].u16_actual = u16_target;
    14ec:	fa 01       	movw	r30, r20
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	e4 0f       	add	r30, r20
    14f8:	f5 1f       	adc	r31, r21
    14fa:	ec 0f       	add	r30, r28
    14fc:	fd 1f       	adc	r31, r29
    14fe:	ec 5b       	subi	r30, 0xBC	; 188
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	20 83       	st	Z, r18
    1504:	31 83       	std	Z+1, r19	; 0x01
    1506:	3e c0       	rjmp	.+124    	; 0x1584 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x334>
			}
			//if: I need to move more than the speed limit
			else
			{
				//I'm moving in a speed limited way
				gast_command[iu8_index].u1_lock = false;
    1508:	fa 01       	movw	r30, r20
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	ec 0f       	add	r30, r28
    1518:	fd 1f       	adc	r31, r29
    151a:	17 82       	std	Z+7, r1	; 0x07
				gast_command[iu8_index].u1_idle = false;
    151c:	fa 01       	movw	r30, r20
    151e:	31 96       	adiw	r30, 0x01	; 1
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	ec 0f       	add	r30, r28
    152e:	fd 1f       	adc	r31, r29
    1530:	10 82       	st	Z, r1
				//If: moving positive
				if (u16_target > u16_actual)
    1532:	82 17       	cp	r24, r18
    1534:	93 07       	cpc	r25, r19
    1536:	20 f4       	brcc	.+8      	; 0x1540 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2f0>
				{
					//Move the maximum allowed speed in the positive direction	
					u16_actual += u8_speed;
    1538:	9c 01       	movw	r18, r24
    153a:	26 0f       	add	r18, r22
    153c:	37 1f       	adc	r19, r23
    153e:	15 c0       	rjmp	.+42     	; 0x156a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x31a>
					
				}
				//If: moving negative
				else if (u16_target < u16_actual)
    1540:	28 17       	cp	r18, r24
    1542:	39 07       	cpc	r19, r25
    1544:	20 f4       	brcc	.+8      	; 0x154e <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x2fe>
				{
					//Move the maximum allowed speed in the positive direction
					u16_actual -= u8_speed;
    1546:	9c 01       	movw	r18, r24
    1548:	26 1b       	sub	r18, r22
    154a:	37 0b       	sbc	r19, r23
    154c:	0e c0       	rjmp	.+28     	; 0x156a <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x31a>
				}
				else
				{
					this -> report_error( Error_code::ERR_ALGORITHM, __LINE__ );
    154e:	48 ea       	ldi	r20, 0xA8	; 168
    1550:	55 e0       	ldi	r21, 0x05	; 5
    1552:	68 e0       	ldi	r22, 0x08	; 8
    1554:	ce 01       	movw	r24, r28
    1556:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
					ou16_delay = Config::HAL_TIMER_MAX_CNT;
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	9f ef       	ldi	r25, 0xFF	; 255
    155e:	f8 01       	movw	r30, r16
    1560:	80 83       	st	Z, r24
    1562:	91 83       	std	Z+1, r25	; 0x01
					return true;
    1564:	ff 24       	eor	r15, r15
    1566:	f3 94       	inc	r15
    1568:	25 c0       	rjmp	.+74     	; 0x15b4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>
				}
				//Update actual
				gast_timer[iu8_index].u16_actual = u16_actual;
    156a:	fa 01       	movw	r30, r20
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	ee 0f       	add	r30, r30
    1572:	ff 1f       	adc	r31, r31
    1574:	e4 0f       	add	r30, r20
    1576:	f5 1f       	adc	r31, r21
    1578:	ec 0f       	add	r30, r28
    157a:	fd 1f       	adc	r31, r29
    157c:	ec 5b       	subi	r30, 0xBC	; 188
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	20 83       	st	Z, r18
    1582:	31 83       	std	Z+1, r19	; 0x01
				//Delay of the servo to be returned to caller
				u16_delay = u16_actual;
			} //end if: I need to move more than the speed limit
		}  //end if: Needs to move
	} //end if: speed limit active
	if ((Config::PEDANTIC_CHECKS == true) && ((u16_delay < Config::SERVO_PPM_MIN_PULSE) || (u16_delay> Config::SERVO_PPM_MAX_PULSE)) )
    1584:	c9 01       	movw	r24, r18
    1586:	8c 54       	subi	r24, 0x4C	; 76
    1588:	94 40       	sbci	r25, 0x04	; 4
    158a:	81 32       	cpi	r24, 0x21	; 33
    158c:	93 40       	sbci	r25, 0x03	; 3
    158e:	70 f0       	brcs	.+28     	; 0x15ac <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x35c>
	{
		this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    1590:	45 eb       	ldi	r20, 0xB5	; 181
    1592:	55 e0       	ldi	r21, 0x05	; 5
    1594:	68 e0       	ldi	r22, 0x08	; 8
    1596:	ce 01       	movw	r24, r28
    1598:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
		ou16_delay = Config::HAL_TIMER_MAX_CNT;
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	f8 01       	movw	r30, r16
    15a2:	80 83       	st	Z, r24
    15a4:	91 83       	std	Z+1, r25	; 0x01
		return true;
    15a6:	ff 24       	eor	r15, r15
    15a8:	f3 94       	inc	r15
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj+0x364>

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN_ARG("Delay %d\n", u16_delay); //Trace Return
	ou16_delay = u16_delay;
    15ac:	f8 01       	movw	r30, r16
    15ae:	20 83       	st	Z, r18
    15b0:	31 83       	std	Z+1, r19	; 0x01
	return false;	//OK
    15b2:	f1 2c       	mov	r15, r1
}   //end private method: compute_servo_delay | uint8_t | uint16_t |
    15b4:	8f 2d       	mov	r24, r15
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	08 95       	ret

000015c2 <_ZN9OrangeBot5Servo13hal_timer_isrEv>:
//! \n Toggles the servo pin and compute the next OCR
//! \n Re-arms or Stop the timer
/***************************************************************************/

bool Servo::hal_timer_isr( void )
{
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x12>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	7c 01       	movw	r14, r24
	///	SERVO IOs
	///--------------------------------------------------------------------------
	//	Emit the correct IO lines

	//Fetch scan index
	uint8_t u8_index = this -> gu8_index;
    15da:	fc 01       	movw	r30, r24
    15dc:	10 81       	ld	r17, Z
	//First Servo: SET servo line
	if (u8_index == 0)
    15de:	11 11       	cpse	r17, r1
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x2a>
	{
		u1_ret = this -> hal_servo_io( u8_index, true );
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	61 2f       	mov	r22, r17
    15e6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x56>
	}
	//Inner servos
	else if ((u8_index > 0) && (u8_index < Config::NUM_SERVOS))
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	61 0f       	add	r22, r17
    15f0:	67 30       	cpi	r22, 0x07	; 7
    15f2:	58 f4       	brcc	.+22     	; 0x160a <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x48>
	{
		//Clear previous servo line
		u1_ret = this -> hal_servo_io( u8_index-1, false );
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    15fa:	08 2f       	mov	r16, r24
		//SET current servo line
		u1_ret |= this -> hal_servo_io( u8_index, true );
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	61 2f       	mov	r22, r17
    1600:	c7 01       	movw	r24, r14
    1602:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1606:	80 2b       	or	r24, r16
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x56>
	}
	//Last Servo: CLEAR servo line
	else if (u8_index == Config::NUM_SERVOS)
    160a:	18 30       	cpi	r17, 0x08	; 8
    160c:	21 f4       	brne	.+8      	; 0x1616 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x54>
	{
		//Clear previous servo line
		u1_ret = this -> hal_servo_io( u8_index -1, false );
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN9OrangeBot5Servo12hal_servo_ioEhb>
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x56>
	}
	//Algorithmic Error
	else
	{
		//FAIL
		u1_ret = true;
    1616:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	//If Fail
	if (u1_ret == true)
    1618:	88 23       	and	r24, r24
    161a:	21 f0       	breq	.+8      	; 0x1624 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x62>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    161c:	c7 01       	movw	r24, r14
    161e:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    1622:	58 c0       	rjmp	.+176    	; 0x16d4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
	//	Compute and program the delay for the next cycle
	
	//Temp delay in microseconds. HAL takes care of programming a delay in timer units
	uint16_t u16_delay;
	//Latch accumulator
	uint16_t u16_accumulator = gu16_timer_sum;
    1624:	f7 01       	movw	r30, r14
    1626:	e7 59       	subi	r30, 0x97	; 151
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	c0 80       	ld	r12, Z
    162c:	d1 80       	ldd	r13, Z+1	; 0x01
	//Compute Delay for servos
	if (u8_index < Config::NUM_SERVOS)
    162e:	18 30       	cpi	r17, 0x08	; 8
    1630:	d0 f4       	brcc	.+52     	; 0x1666 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xa4>
	{
		//Driver takes care of updating from user command, maintaining servo status and computing what the next delay is to be
		u1_ret = this -> compute_servo_delay( u8_index, u16_delay );
    1632:	ae 01       	movw	r20, r28
    1634:	4f 5f       	subi	r20, 0xFF	; 255
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	61 2f       	mov	r22, r17
    163a:	c7 01       	movw	r24, r14
    163c:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN9OrangeBot5Servo19compute_servo_delayEhRj>
		if ((Config::PEDANTIC_CHECKS == true) && ((u16_delay < Config::SERVO_PPM_MIN_PULSE) || (u16_delay > Config::SERVO_PPM_MAX_PULSE)) )
    1640:	29 81       	ldd	r18, Y+1	; 0x01
    1642:	3a 81       	ldd	r19, Y+2	; 0x02
    1644:	a9 01       	movw	r20, r18
    1646:	4c 54       	subi	r20, 0x4C	; 76
    1648:	54 40       	sbci	r21, 0x04	; 4
    164a:	41 32       	cpi	r20, 0x21	; 33
    164c:	53 40       	sbci	r21, 0x03	; 3
    164e:	40 f0       	brcs	.+16     	; 0x1660 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x9e>
		{
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    1650:	4d ee       	ldi	r20, 0xED	; 237
    1652:	51 e0       	ldi	r21, 0x01	; 1
    1654:	68 e0       	ldi	r22, 0x08	; 8
    1656:	c7 01       	movw	r24, r14
    1658:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			return true;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	3a c0       	rjmp	.+116    	; 0x16d4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
		}
		//Accumulate delay inside accumulator
		u16_accumulator += u16_delay;
    1660:	c2 0e       	add	r12, r18
    1662:	d3 1e       	adc	r13, r19
    1664:	19 c0       	rjmp	.+50     	; 0x1698 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd6>
	}
	//Compute final delay and clear accumulator
	else if (u8_index == Config::NUM_SERVOS)
    1666:	18 30       	cpi	r17, 0x08	; 8
    1668:	b1 f4       	brne	.+44     	; 0x1696 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd4>
	{
		//If: the servo scan time exceed the PPM period
		if (u16_accumulator >= Config::SERVO_PPM_PERIOD)
    166a:	90 e2       	ldi	r25, 0x20	; 32
    166c:	c9 16       	cp	r12, r25
    166e:	9e e4       	ldi	r25, 0x4E	; 78
    1670:	d9 06       	cpc	r13, r25
    1672:	40 f0       	brcs	.+16     	; 0x1684 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xc2>
		{
			this -> report_error( Error_code::ERR_ALGORITHM, __LINE__  );
    1674:	49 ef       	ldi	r20, 0xF9	; 249
    1676:	51 e0       	ldi	r21, 0x01	; 1
    1678:	68 e0       	ldi	r22, 0x08	; 8
    167a:	c7 01       	movw	r24, r14
    167c:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN9OrangeBot5Servo12report_errorENS0_11_Error_codeEj>
			u1_ret = true;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0a c0       	rjmp	.+20     	; 0x1698 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd6>
		}
		//If: scan time is good
		else
		{
			//Final delay is meant to achieve the PPM period
			u16_delay = Config::SERVO_PPM_PERIOD -u16_accumulator;
    1684:	20 e2       	ldi	r18, 0x20	; 32
    1686:	3e e4       	ldi	r19, 0x4E	; 78
    1688:	2c 19       	sub	r18, r12
    168a:	3d 09       	sbc	r19, r13
    168c:	29 83       	std	Y+1, r18	; 0x01
    168e:	3a 83       	std	Y+2, r19	; 0x02
			//Reset the accumulator for the next cycle
			u16_accumulator = 0;	
    1690:	c1 2c       	mov	r12, r1
    1692:	d1 2c       	mov	r13, r1
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xd6>
	}
	//Algorithmic error
	else
	{
		//Fail
		u1_ret = true;	
    1696:	81 e0       	ldi	r24, 0x01	; 1
	}
	//If fail
	if (u1_ret == true)
    1698:	88 23       	and	r24, r24
    169a:	21 f0       	breq	.+8      	; 0x16a4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xe2>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    169c:	c7 01       	movw	r24, r14
    169e:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    16a2:	18 c0       	rjmp	.+48     	; 0x16d4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
	}
	
	//Program the timer with the desired delay. ISR will be called again when said delay has elapsed
	u1_ret = this -> hal_timer_set_delay( u16_delay );
    16a4:	69 81       	ldd	r22, Y+1	; 0x01
    16a6:	7a 81       	ldd	r23, Y+2	; 0x02
    16a8:	c7 01       	movw	r24, r14
    16aa:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN9OrangeBot5Servo19hal_timer_set_delayEj>
	//Fail
	if (u1_ret == true)
    16ae:	88 23       	and	r24, r24
    16b0:	21 f0       	breq	.+8      	; 0x16ba <_ZN9OrangeBot5Servo13hal_timer_isrEv+0xf8>
	{
		//SCRAM!!!
		u1_ret = this -> emergency_stop();
    16b2:	c7 01       	movw	r24, r14
    16b4:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN9OrangeBot5Servo14emergency_stopEv>
		return u1_ret;
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x112>
	}
	//Success
	else
	{
		//Write back accumulator
		gu16_timer_sum = u16_accumulator;
    16ba:	f7 01       	movw	r30, r14
    16bc:	e7 59       	subi	r30, 0x97	; 151
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	c0 82       	st	Z, r12
    16c2:	d1 82       	std	Z+1, r13	; 0x01
	}
	//Next scan. TOP is the last number counted before reset
	u8_index = AT_TOP_INC( u8_index, Config::NUM_SERVOS );
    16c4:	18 30       	cpi	r17, 0x08	; 8
    16c6:	11 f0       	breq	.+4      	; 0x16cc <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x10a>
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <_ZN9OrangeBot5Servo13hal_timer_isrEv+0x10c>
    16cc:	10 e0       	ldi	r17, 0x00	; 0
	//Update the scan index
	this -> gu8_index = u8_index;
    16ce:	f7 01       	movw	r30, r14
    16d0:	10 83       	st	Z, r17

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	return false;	//OK
    16d2:	80 e0       	ldi	r24, 0x00	; 0
}   //end public method: hal_timer_isr
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	08 95       	ret

000016ea <_ZN4User4UartD1Ev>:
//! @return no return
//!	@details
//! Empty destructor
/***************************************************************************/

Uart::~Uart( void )
    16ea:	08 95       	ret

000016ec <_ZN4User4Uart4sendEh>:
//!	@details
//! \n	Load a data inside the UART TX buffer
/***************************************************************************/

bool Uart::send( uint8_t iu8_data )
{
    16ec:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//UART DEMO
	AT_BUF_PUSH( this -> rpi_tx_buf, iu8_data );
    16ee:	a5 85       	ldd	r26, Z+13	; 0x0d
    16f0:	b6 85       	ldd	r27, Z+14	; 0x0e
    16f2:	84 85       	ldd	r24, Z+12	; 0x0c
    16f4:	a8 0f       	add	r26, r24
    16f6:	b1 1d       	adc	r27, r1
    16f8:	6c 93       	st	X, r22
    16fa:	24 85       	ldd	r18, Z+12	; 0x0c
    16fc:	42 2f       	mov	r20, r18
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	82 85       	ldd	r24, Z+10	; 0x0a
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	48 17       	cp	r20, r24
    1708:	59 07       	cpc	r21, r25
    170a:	1c f4       	brge	.+6      	; 0x1712 <_ZN4User4Uart4sendEh+0x26>
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	24 87       	std	Z+12, r18	; 0x0c
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <_ZN4User4Uart4sendEh+0x28>
    1712:	14 86       	std	Z+12, r1	; 0x0c
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace return
	return false;	//OK
}	//end public setter: send | uint8_t |
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret

00001718 <_ZN4User4Uart14get_counter_txERj>:
	DENTER();	//Trace Enter
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	uint16_t u16_cnt = this -> gu16_tx_cnt;
    1718:	fc 01       	movw	r30, r24
    171a:	83 81       	ldd	r24, Z+3	; 0x03
    171c:	94 81       	ldd	r25, Z+4	; 0x04
	oru16_cnt = u16_cnt;
    171e:	fb 01       	movw	r30, r22
    1720:	80 83       	st	Z, r24
    1722:	91 83       	std	Z+1, r25	; 0x01
	DRETURN_ARG("TX: %d\n", u16_cnt );	//Trace return
	return false;	//OK
}	//end public getter: get_counter_tx | uint16_t & |
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	08 95       	ret

00001728 <_ZN4User4Uart14get_counter_rxERj>:
	DENTER();	//Trace Enter
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	
	uint16_t u16_cnt = this -> gu16_rx_cnt;
    1728:	fc 01       	movw	r30, r24
    172a:	81 81       	ldd	r24, Z+1	; 0x01
    172c:	92 81       	ldd	r25, Z+2	; 0x02
	oru16_cnt = u16_cnt;
    172e:	fb 01       	movw	r30, r22
    1730:	80 83       	st	Z, r24
    1732:	91 83       	std	Z+1, r25	; 0x01
	DRETURN_ARG("RX: %d\n", u16_cnt );	//Trace return
	return false;	//OK
}	//end public getter: get_counter_rx | uint16_t & |
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	08 95       	ret

00001738 <_ZN4User4Uart10isr_rx_exeEv>:
//!	@details
//! Method
/***************************************************************************/

bool Uart::isr_rx_exe( void )
{
    1738:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Fetch the data and clear the interrupt flag
	uint8_t rx_data_tmp = USART0.RXDATAL;
    173a:	40 91 00 08 	lds	r20, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	//If: RX buffer overflow
	if (AT_BUF_NUMELEM( this -> rpi_rx_buf )>=(Config::RX_BUFFER_SIZE-1))
    173e:	87 81       	ldd	r24, Z+7	; 0x07
    1740:	96 81       	ldd	r25, Z+6	; 0x06
    1742:	89 17       	cp	r24, r25
    1744:	50 f0       	brcs	.+20     	; 0x175a <_ZN4User4Uart10isr_rx_exeEv+0x22>
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	29 1b       	sub	r18, r25
    174c:	31 09       	sbc	r19, r1
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	2f 31       	cpi	r18, 0x1F	; 31
    1752:	31 05       	cpc	r19, r1
    1754:	74 f4       	brge	.+28     	; 0x1772 <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0c c0       	rjmp	.+24     	; 0x1772 <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    175a:	55 81       	ldd	r21, Z+5	; 0x05
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	25 0f       	add	r18, r21
    1762:	31 1d       	adc	r19, r1
    1764:	29 1b       	sub	r18, r25
    1766:	31 09       	sbc	r19, r1
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	2f 31       	cpi	r18, 0x1F	; 31
    176c:	31 05       	cpc	r19, r1
    176e:	0c f4       	brge	.+2      	; 0x1772 <_ZN4User4Uart10isr_rx_exeEv+0x3a>
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	99 23       	and	r25, r25
    1774:	19 f0       	breq	.+6      	; 0x177c <_ZN4User4Uart10isr_rx_exeEv+0x44>
	{
		//TODO: This is an error
		AT_BUF_FLUSH( this -> rpi_rx_buf );
    1776:	17 82       	std	Z+7, r1	; 0x07
    1778:	16 82       	std	Z+6, r1	; 0x06
    177a:	17 c0       	rjmp	.+46     	; 0x17aa <_ZN4User4Uart10isr_rx_exeEv+0x72>
	}
	//if: there is space in the RX buffer
	else
	{
		//Push byte into RX buffer for processing
		AT_BUF_PUSH( this -> rpi_rx_buf, rx_data_tmp );
    177c:	a0 85       	ldd	r26, Z+8	; 0x08
    177e:	b1 85       	ldd	r27, Z+9	; 0x09
    1780:	a8 0f       	add	r26, r24
    1782:	b1 1d       	adc	r27, r1
    1784:	4c 93       	st	X, r20
    1786:	27 81       	ldd	r18, Z+7	; 0x07
    1788:	42 2f       	mov	r20, r18
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	85 81       	ldd	r24, Z+5	; 0x05
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	48 17       	cp	r20, r24
    1794:	59 07       	cpc	r21, r25
    1796:	1c f4       	brge	.+6      	; 0x179e <_ZN4User4Uart10isr_rx_exeEv+0x66>
    1798:	2f 5f       	subi	r18, 0xFF	; 255
    179a:	27 83       	std	Z+7, r18	; 0x07
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <_ZN4User4Uart10isr_rx_exeEv+0x68>
    179e:	17 82       	std	Z+7, r1	; 0x07
		//Profile
		this -> gu16_rx_cnt++;
    17a0:	81 81       	ldd	r24, Z+1	; 0x01
    17a2:	92 81       	ldd	r25, Z+2	; 0x02
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	81 83       	std	Z+1, r24	; 0x01
    17a8:	92 83       	std	Z+2, r25	; 0x02
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end public method: isr_rx_exe | void |
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	08 95       	ret

000017ae <_ZN4User4Uart6updateEv>:
//!	@details
//! Background uart driver method. Meant to be executed periodically by the user
/***************************************************************************/

bool Uart::update( void )
{
    17ae:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//if: RPI TX buffer is not empty and the RPI TX HW buffer is ready to transmit
	if ( (AT_BUF_NUMELEM( this -> rpi_tx_buf ) > 0) && (IS_BIT_ONE(USART0.STATUS, USART_DREIF_bp)))
    17b0:	24 85       	ldd	r18, Z+12	; 0x0c
    17b2:	83 85       	ldd	r24, Z+11	; 0x0b
    17b4:	28 17       	cp	r18, r24
    17b6:	40 f0       	brcs	.+16     	; 0x17c8 <_ZN4User4Uart6updateEv+0x1a>
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	28 1b       	sub	r18, r24
    17bc:	31 09       	sbc	r19, r1
    17be:	12 16       	cp	r1, r18
    17c0:	13 06       	cpc	r1, r19
    17c2:	5c f0       	brlt	.+22     	; 0x17da <_ZN4User4Uart6updateEv+0x2c>
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <_ZN4User4Uart6updateEv+0x3e>
    17c8:	92 85       	ldd	r25, Z+10	; 0x0a
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	29 0f       	add	r18, r25
    17ce:	31 1d       	adc	r19, r1
    17d0:	28 1b       	sub	r18, r24
    17d2:	31 09       	sbc	r19, r1
    17d4:	12 16       	cp	r1, r18
    17d6:	13 06       	cpc	r1, r19
    17d8:	34 f4       	brge	.+12     	; 0x17e6 <_ZN4User4Uart6updateEv+0x38>
    17da:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
    17de:	95 fd       	sbrc	r25, 5
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <_ZN4User4Uart6updateEv+0x3c>
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <_ZN4User4Uart6updateEv+0x3e>
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <_ZN4User4Uart6updateEv+0x3e>
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	99 23       	and	r25, r25
    17ee:	c9 f0       	breq	.+50     	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
	{
		//Get the byte to be filtered out
		uint8_t tx_tmp = AT_BUF_PEEK( this -> rpi_tx_buf );
    17f0:	a5 85       	ldd	r26, Z+13	; 0x0d
    17f2:	b6 85       	ldd	r27, Z+14	; 0x0e
    17f4:	48 2f       	mov	r20, r24
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	a4 0f       	add	r26, r20
    17fa:	b5 1f       	adc	r27, r21
    17fc:	9c 91       	ld	r25, X
		AT_BUF_KICK( this -> rpi_tx_buf );
    17fe:	22 85       	ldd	r18, Z+10	; 0x0a
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	31 09       	sbc	r19, r1
    1806:	42 17       	cp	r20, r18
    1808:	53 07       	cpc	r21, r19
    180a:	1c f4       	brge	.+6      	; 0x1812 <__DATA_REGION_LENGTH__+0x12>
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	83 87       	std	Z+11, r24	; 0x0b
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <__DATA_REGION_LENGTH__+0x14>
    1812:	13 86       	std	Z+11, r1	; 0x0b
		//Send data through the UART
		USART0.TXDATAL = tx_tmp;
    1814:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		//Profile
		this -> gu16_tx_cnt++;
    1818:	83 81       	ldd	r24, Z+3	; 0x03
    181a:	94 81       	ldd	r25, Z+4	; 0x04
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	83 83       	std	Z+3, r24	; 0x03
    1820:	94 83       	std	Z+4, r25	; 0x04
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end : update | void |
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	08 95       	ret

00001826 <_ZN4User4Uart9init_uartER12USART_structj>:
//!	256.0K		||	625		| 20MHz			| Fast		| 265.0KHz
//!	------------------------------------------------------------------------
/***************************************************************************/

bool Uart::init_uart( USART_t &ist_uart, uint16_t iu16_baud )
{
    1826:	fb 01       	movw	r30, r22
	//----------------------------------------------------------------
	//	VARS
	//----------------------------------------------------------------

	//! Fetch registers
	uint8_t ctrl_a		= ist_uart.CTRLA;
    1828:	25 81       	ldd	r18, Z+5	; 0x05
	uint8_t ctrl_b		= ist_uart.CTRLB;
    182a:	96 81       	ldd	r25, Z+6	; 0x06
	uint8_t ctrl_c		= ist_uart.CTRLC;
    182c:	87 81       	ldd	r24, Z+7	; 0x07
	uint8_t dbgctrl_tmp	= ist_uart.DBGCTRL;
    182e:	63 85       	ldd	r22, Z+11	; 0x0b
	uint8_t ctrl_ev		= ist_uart.EVCTRL;
    1830:	34 85       	ldd	r19, Z+12	; 0x0c
    1832:	8f 73       	andi	r24, 0x3F	; 63
	//UART will keep running when in debug
	//SET_BIT( dbgctrl_tmp, USART_DBGRUN_bp);
	
	//! UART operation mode
	//Asynchronous UART Mode
	SET_MASKED_BIT( ctrl_c, USART_CMODE_gm, USART_CMODE_ASYNCHRONOUS_gc );
    1834:	88 60       	ori	r24, 0x08	; 8
	//Master SPI Mode
	//SET_MASKED_BIT( ctrl_c, USART_CMODE_gm, USART_CMODE_MSPI_gc );
	
	//! 485 Mode
	//Disable 485 Mode
	SET_MASKED_BIT( ctrl_a, USART_RS485_gm, USART_RS485_OFF_gc );
    1836:	2c 7f       	andi	r18, 0xFC	; 252
    1838:	99 7f       	andi	r25, 0xF9	; 249
	//Internal 485 mode
	//SET_MASKED_BIT( ctrl_a, USART_RS485_gm, USART_RS485_INT_gc );
	
	//!	RX Mode
	//Normal mode
	SET_MASKED_BIT( ctrl_b, USART_RXMODE_gm, USART_RXMODE_NORMAL_gc );
    183a:	90 6c       	ori	r25, 0xC0	; 192
	//6 bit
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_6BIT_gc );
	//7 bit
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_7BIT_gc );
	//8 bit
	SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_8BIT_gc );
    183c:	88 7f       	andi	r24, 0xF8	; 248
    183e:	83 60       	ori	r24, 0x03	; 3
	//SET_MASKED_BIT( ctrl_c, USART_CHSIZE_gm, USART_CHSIZE_9BITH_gc );
	
	
	//! Parity Mode
	//No parity bit
	SET_MASKED_BIT( ctrl_c, USART_PMODE_gm, USART_PMODE_DISABLED_gc );
    1840:	8f 7c       	andi	r24, 0xCF	; 207
	//Enable Data register empty interrupt
	//SET_BIT( ctrl_a, USART_DREIE_bp );
	//Enable TX Interrupt
	//SET_BIT( ctrl_a, USART_TXCIE_bp );
	//Enable RX Interrupt
	SET_BIT( ctrl_a, USART_RXCIE_bp );
    1842:	20 68       	ori	r18, 0x80	; 128
	//	WRITE BACK
	//----------------------------------------------------------------
	
	//! Baud rate register
	//Set the baud rate of the peripheral
	ist_uart.BAUD = iu16_baud;
    1844:	40 87       	std	Z+8, r20	; 0x08
    1846:	51 87       	std	Z+9, r21	; 0x09
	
	//! Infrared mode
	//Infrared transmitter pulse length
	ist_uart.TXPLCTRL = 0;
    1848:	15 86       	std	Z+13, r1	; 0x0d
	//Infrared receiver pulse length
	ist_uart.RXPLCTRL = 0;
    184a:	16 86       	std	Z+14, r1	; 0x0e
	
	//Write back configuration registers
	ist_uart.DBGCTRL = dbgctrl_tmp;
    184c:	63 87       	std	Z+11, r22	; 0x0b
	ist_uart.CTRLC = ctrl_c;
    184e:	87 83       	std	Z+7, r24	; 0x07
	//Writing back this register enables interrupts
	ist_uart.EVCTRL = ctrl_ev;
    1850:	34 87       	std	Z+12, r19	; 0x0c
	ist_uart.CTRLA = ctrl_a;
    1852:	25 83       	std	Z+5, r18	; 0x05
	//Writing back his register will enables the UART
	ist_uart.CTRLB = ctrl_b;
    1854:	96 83       	std	Z+6, r25	; 0x06

	return false; //OK
}	//End: init_uart
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	08 95       	ret

0000185a <_ZN4User4Uart4initEv>:
//!	@details
//! Method
/***************************************************************************/

bool Uart::init( void )
{
    185a:	fc 01       	movw	r30, r24
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Reset profilers
	this -> gu16_rx_cnt = 0;
    185c:	11 82       	std	Z+1, r1	; 0x01
    185e:	12 82       	std	Z+2, r1	; 0x02
	this -> gu16_tx_cnt = 0;
    1860:	13 82       	std	Z+3, r1	; 0x03
    1862:	14 82       	std	Z+4, r1	; 0x04
	//attach vector to buffer
	AT_BUF_ATTACH( this -> rpi_rx_buf, this -> v0, Config::RX_BUFFER_SIZE);
    1864:	0f 96       	adiw	r24, 0x0f	; 15
    1866:	80 87       	std	Z+8, r24	; 0x08
    1868:	91 87       	std	Z+9, r25	; 0x09
    186a:	80 e2       	ldi	r24, 0x20	; 32
    186c:	85 83       	std	Z+5, r24	; 0x05
	AT_BUF_FLUSH( this -> rpi_rx_buf );
    186e:	17 82       	std	Z+7, r1	; 0x07
    1870:	16 82       	std	Z+6, r1	; 0x06
	//attach vector to buffer
	AT_BUF_ATTACH( this -> rpi_tx_buf, this -> v1, Config::TX_BUFFER_SIZE);
    1872:	cf 01       	movw	r24, r30
    1874:	8f 96       	adiw	r24, 0x2f	; 47
    1876:	85 87       	std	Z+13, r24	; 0x0d
    1878:	96 87       	std	Z+14, r25	; 0x0e
    187a:	80 e1       	ldi	r24, 0x10	; 16
    187c:	82 87       	std	Z+10, r24	; 0x0a
	AT_BUF_FLUSH( this -> rpi_tx_buf );
    187e:	14 86       	std	Z+12, r1	; 0x0c
    1880:	13 86       	std	Z+11, r1	; 0x0b
	//Activate USART0 @256Kb/s
	this->init_uart( USART0, 313 );
    1882:	49 e3       	ldi	r20, 0x39	; 57
    1884:	51 e0       	ldi	r21, 0x01	; 1
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	78 e0       	ldi	r23, 0x08	; 8
    188a:	cf 01       	movw	r24, r30
    188c:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN4User4Uart9init_uartER12USART_structj>
	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------
	DRETURN();	//Trace Return
	return false;	//OK
}	//end method: init | void
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	08 95       	ret

00001894 <_ZN4User4UartC1Ev>:
	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	//Initialize class
	this -> init();
    1894:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN4User4Uart4initEv>
    1898:	08 95       	ret

0000189a <__udivmodqi4>:
    189a:	99 1b       	sub	r25, r25
    189c:	79 e0       	ldi	r23, 0x09	; 9
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <__udivmodqi4_ep>

000018a0 <__udivmodqi4_loop>:
    18a0:	99 1f       	adc	r25, r25
    18a2:	96 17       	cp	r25, r22
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <__udivmodqi4_ep>
    18a6:	96 1b       	sub	r25, r22

000018a8 <__udivmodqi4_ep>:
    18a8:	88 1f       	adc	r24, r24
    18aa:	7a 95       	dec	r23
    18ac:	c9 f7       	brne	.-14     	; 0x18a0 <__udivmodqi4_loop>
    18ae:	80 95       	com	r24
    18b0:	08 95       	ret

000018b2 <__udivmodhi4>:
    18b2:	aa 1b       	sub	r26, r26
    18b4:	bb 1b       	sub	r27, r27
    18b6:	51 e1       	ldi	r21, 0x11	; 17
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <__udivmodhi4_ep>

000018ba <__udivmodhi4_loop>:
    18ba:	aa 1f       	adc	r26, r26
    18bc:	bb 1f       	adc	r27, r27
    18be:	a6 17       	cp	r26, r22
    18c0:	b7 07       	cpc	r27, r23
    18c2:	10 f0       	brcs	.+4      	; 0x18c8 <__udivmodhi4_ep>
    18c4:	a6 1b       	sub	r26, r22
    18c6:	b7 0b       	sbc	r27, r23

000018c8 <__udivmodhi4_ep>:
    18c8:	88 1f       	adc	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	5a 95       	dec	r21
    18ce:	a9 f7       	brne	.-22     	; 0x18ba <__udivmodhi4_loop>
    18d0:	80 95       	com	r24
    18d2:	90 95       	com	r25
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	08 95       	ret

000018da <__udivmodsi4>:
    18da:	a1 e2       	ldi	r26, 0x21	; 33
    18dc:	1a 2e       	mov	r1, r26
    18de:	aa 1b       	sub	r26, r26
    18e0:	bb 1b       	sub	r27, r27
    18e2:	fd 01       	movw	r30, r26
    18e4:	0d c0       	rjmp	.+26     	; 0x1900 <__udivmodsi4_ep>

000018e6 <__udivmodsi4_loop>:
    18e6:	aa 1f       	adc	r26, r26
    18e8:	bb 1f       	adc	r27, r27
    18ea:	ee 1f       	adc	r30, r30
    18ec:	ff 1f       	adc	r31, r31
    18ee:	a2 17       	cp	r26, r18
    18f0:	b3 07       	cpc	r27, r19
    18f2:	e4 07       	cpc	r30, r20
    18f4:	f5 07       	cpc	r31, r21
    18f6:	20 f0       	brcs	.+8      	; 0x1900 <__udivmodsi4_ep>
    18f8:	a2 1b       	sub	r26, r18
    18fa:	b3 0b       	sbc	r27, r19
    18fc:	e4 0b       	sbc	r30, r20
    18fe:	f5 0b       	sbc	r31, r21

00001900 <__udivmodsi4_ep>:
    1900:	66 1f       	adc	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	1a 94       	dec	r1
    190a:	69 f7       	brne	.-38     	; 0x18e6 <__udivmodsi4_loop>
    190c:	60 95       	com	r22
    190e:	70 95       	com	r23
    1910:	80 95       	com	r24
    1912:	90 95       	com	r25
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	bd 01       	movw	r22, r26
    191a:	cf 01       	movw	r24, r30
    191c:	08 95       	ret

0000191e <__tablejump2__>:
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	05 90       	lpm	r0, Z+
    1924:	f4 91       	lpm	r31, Z
    1926:	e0 2d       	mov	r30, r0
    1928:	09 94       	ijmp

0000192a <__umulhisi3>:
    192a:	a2 9f       	mul	r26, r18
    192c:	b0 01       	movw	r22, r0
    192e:	b3 9f       	mul	r27, r19
    1930:	c0 01       	movw	r24, r0
    1932:	a3 9f       	mul	r26, r19
    1934:	70 0d       	add	r23, r0
    1936:	81 1d       	adc	r24, r1
    1938:	11 24       	eor	r1, r1
    193a:	91 1d       	adc	r25, r1
    193c:	b2 9f       	mul	r27, r18
    193e:	70 0d       	add	r23, r0
    1940:	81 1d       	adc	r24, r1
    1942:	11 24       	eor	r1, r1
    1944:	91 1d       	adc	r25, r1
    1946:	08 95       	ret

00001948 <__muluhisi3>:
    1948:	0e 94 95 0c 	call	0x192a	; 0x192a <__umulhisi3>
    194c:	a5 9f       	mul	r26, r21
    194e:	90 0d       	add	r25, r0
    1950:	b4 9f       	mul	r27, r20
    1952:	90 0d       	add	r25, r0
    1954:	a4 9f       	mul	r26, r20
    1956:	80 0d       	add	r24, r0
    1958:	91 1d       	adc	r25, r1
    195a:	11 24       	eor	r1, r1
    195c:	08 95       	ret

0000195e <do_rand>:
    195e:	8f 92       	push	r8
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	ec 01       	movw	r28, r24
    1974:	68 81       	ld	r22, Y
    1976:	79 81       	ldd	r23, Y+1	; 0x01
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	61 15       	cp	r22, r1
    197e:	71 05       	cpc	r23, r1
    1980:	81 05       	cpc	r24, r1
    1982:	91 05       	cpc	r25, r1
    1984:	21 f4       	brne	.+8      	; 0x198e <do_rand+0x30>
    1986:	64 e2       	ldi	r22, 0x24	; 36
    1988:	79 ed       	ldi	r23, 0xD9	; 217
    198a:	8b e5       	ldi	r24, 0x5B	; 91
    198c:	97 e0       	ldi	r25, 0x07	; 7
    198e:	2d e1       	ldi	r18, 0x1D	; 29
    1990:	33 ef       	ldi	r19, 0xF3	; 243
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__divmodsi4>
    199a:	49 01       	movw	r8, r18
    199c:	5a 01       	movw	r10, r20
    199e:	9b 01       	movw	r18, r22
    19a0:	ac 01       	movw	r20, r24
    19a2:	a7 ea       	ldi	r26, 0xA7	; 167
    19a4:	b1 e4       	ldi	r27, 0x41	; 65
    19a6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__muluhisi3>
    19aa:	6b 01       	movw	r12, r22
    19ac:	7c 01       	movw	r14, r24
    19ae:	ac ee       	ldi	r26, 0xEC	; 236
    19b0:	b4 ef       	ldi	r27, 0xF4	; 244
    19b2:	a5 01       	movw	r20, r10
    19b4:	94 01       	movw	r18, r8
    19b6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__mulohisi3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8c 0d       	add	r24, r12
    19c0:	9d 1d       	adc	r25, r13
    19c2:	ae 1d       	adc	r26, r14
    19c4:	bf 1d       	adc	r27, r15
    19c6:	b7 ff       	sbrs	r27, 7
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <do_rand+0x72>
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	a1 09       	sbc	r26, r1
    19ce:	b0 48       	sbci	r27, 0x80	; 128
    19d0:	88 83       	st	Y, r24
    19d2:	99 83       	std	Y+1, r25	; 0x01
    19d4:	aa 83       	std	Y+2, r26	; 0x02
    19d6:	bb 83       	std	Y+3, r27	; 0x03
    19d8:	9f 77       	andi	r25, 0x7F	; 127
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	08 95       	ret

000019f0 <rand_r>:
    19f0:	0e 94 af 0c 	call	0x195e	; 0x195e <do_rand>
    19f4:	08 95       	ret

000019f6 <rand>:
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	98 e2       	ldi	r25, 0x28	; 40
    19fa:	0e 94 af 0c 	call	0x195e	; 0x195e <do_rand>
    19fe:	08 95       	ret

00001a00 <srand>:
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
    1a08:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    1a0c:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
    1a10:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
    1a14:	08 95       	ret

00001a16 <__divmodsi4>:
    1a16:	05 2e       	mov	r0, r21
    1a18:	97 fb       	bst	r25, 7
    1a1a:	1e f4       	brtc	.+6      	; 0x1a22 <__divmodsi4+0xc>
    1a1c:	00 94       	com	r0
    1a1e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__negsi2>
    1a22:	57 fd       	sbrc	r21, 7
    1a24:	07 d0       	rcall	.+14     	; 0x1a34 <__divmodsi4_neg2>
    1a26:	0e 94 6d 0c 	call	0x18da	; 0x18da <__udivmodsi4>
    1a2a:	07 fc       	sbrc	r0, 7
    1a2c:	03 d0       	rcall	.+6      	; 0x1a34 <__divmodsi4_neg2>
    1a2e:	4e f4       	brtc	.+18     	; 0x1a42 <__divmodsi4_exit>
    1a30:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__negsi2>

00001a34 <__divmodsi4_neg2>:
    1a34:	50 95       	com	r21
    1a36:	40 95       	com	r20
    1a38:	30 95       	com	r19
    1a3a:	21 95       	neg	r18
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a40:	5f 4f       	sbci	r21, 0xFF	; 255

00001a42 <__divmodsi4_exit>:
    1a42:	08 95       	ret

00001a44 <__negsi2>:
    1a44:	90 95       	com	r25
    1a46:	80 95       	com	r24
    1a48:	70 95       	com	r23
    1a4a:	61 95       	neg	r22
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	08 95       	ret

00001a54 <__mulshisi3>:
    1a54:	b7 ff       	sbrs	r27, 7
    1a56:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__muluhisi3>

00001a5a <__mulohisi3>:
    1a5a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__muluhisi3>
    1a5e:	82 1b       	sub	r24, r18
    1a60:	93 0b       	sbc	r25, r19
    1a62:	08 95       	ret

00001a64 <__do_global_dtors>:
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	c9 e5       	ldi	r28, 0x59	; 89
    1a68:	d0 e0       	ldi	r29, 0x00	; 0
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <__do_global_dtors+0x10>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	0e 94 8f 0c 	call	0x191e	; 0x191e <__tablejump2__>
    1a72:	21 96       	adiw	r28, 0x01	; 1
    1a74:	ca 35       	cpi	r28, 0x5A	; 90
    1a76:	d1 07       	cpc	r29, r17
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__do_global_dtors+0x8>
    1a7a:	f8 94       	cli

00001a7c <__stop_program>:
    1a7c:	ff cf       	rjmp	.-2      	; 0x1a7c <__stop_program>
